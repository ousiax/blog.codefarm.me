<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://blog.codefarm.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.codefarm.me/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-07-01T17:23:54+08:00</updated><id>https://blog.codefarm.me/feed.xml</id><title type="html">CODE FARM</title><subtitle>All animals are equal but some animals are more equal than others.</subtitle><entry><title type="html">Learning Notes: Fundamentals of Data Engineering</title><link href="https://blog.codefarm.me/2025/05/31/learning-notes-fundamentals-of-data-engineering/" rel="alternate" type="text/html" title="Learning Notes: Fundamentals of Data Engineering" /><published>2025-05-31T08:34:33+08:00</published><updated>2025-05-31T08:34:33+08:00</updated><id>https://blog.codefarm.me/2025/05/31/learning-notes-fundamentals-of-data-engineering</id><content type="html" xml:base="https://blog.codefarm.me/2025/05/31/learning-notes-fundamentals-of-data-engineering/"><![CDATA[<div class="paragraph">
<p><em>Data engineering</em> is the development, implementation, and maintenance of systems and processes that take in raw data and produce high-quality, consistent information that supports downstream use cases, such as analysis and machine learning. Data engineering is the intersection of security, data management, DataOps, data architecture, orchestration, and software engineering. A <em>data engineer</em> manages the data engineering lifecycle, beginning with getting data from source systems and ending with serving data for use cases, such as analysis or machine learning.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/learning-notes-fundamentals-of-data-engineering/data-engineering-lifecycle.png" alt="Data engineering lifecycle" width="55%" height="55%">
</div>
</div>
<div class="paragraph">
<p><em>ETL</em> (extract, transform, load) is the traditional data warehouse approach where the extract phase pulls data from source systems, the transform phase cleans and standardizes data while organizing and imposing business logic in a highly modeled form, and the load phase pushes the transformed data into the data warehouse target database system, and the processes are typically handled by external systems and work hand-in-hand with specific business structures and teams.</p>
</div>
<div class="paragraph">
<p><em>ELT</em> (extract, load, transform) is a variation where data is moved more directly from production systems into a staging area in the data warehouse in raw form, and transformations are handled directly within the data warehouse itself rather than using external systems, that takes advantage of the massive computational power of cloud data warehouses and data processing tools, with data processed in batches and transformed output written into tables and views for analytics.</p>
</div>
<div class="paragraph">
<p>A <em>data warehouse</em> is a central data hub designed for reporting and analysis, characterized as a subject-oriented, integrated, nonvolatile, and time-variant collection of data that supports management decisions.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Data warehouses separate online analytical processing (OLAP) from production databases and centralizes data through ETL (extract, transform, load) or ELT (extract, load, transform) processes, organizing data into highly formatted structures optimized for analytics.</p>
</li>
<li>
<p>Data warehouses traditionally required significant enterprise budgets but have become more accessible through cloud models.</p>
</li>
<li>
<p>A data mart is a refined subset of a data warehouse specifically designed to serve the analytics and reporting needs of a single suborganization, department, or line of business.</p>
</li>
<li>
<p>Data marts exist to make data more accessible to analysts and provide an additional transformation stage beyond initial ETL/ELT pipelines, improving performance for complex queries by pre-joining and aggregating data.</p>
</li>
<li>
<p>Cloud data warehouses represent a significant evolution from on-premises architectures, pioneered by Amazon Redshift and popularized by Google BigQuery and Snowflake, which offer pay-as-you-go scalability, separate compute from storage using object storage for virtually limitless capacity, and can process petabytes of data in single queries.</p>
</li>
<li>
<p>Cloud data warehouses have expanded MPP capabilities to cover big data use cases that previously required Hadoop clusters, blurring the line between traditional data warehouses and data lakes while evolving into broader data platforms with enhanced capabilities.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>A <em>data lake</em> is a central repository that stores all data—structured, semi-structured, and unstructured—in its raw format with virtually limitless capacity, emerging during the big data era as an alternative to structured data warehouses that promised democratized data access and flexible processing using technologies like Spark, but first-generation data lake 1.0 became known as a "data swamp" due to lack of schema management, data cataloging, and discovery tools, while being write-only and creating compliance issues with regulations like GDPR, CCPA etc.</p>
</div>
<div class="paragraph">
<p>A <em>data lakehouse</em> represents a convergence between data lakes and data warehouses, incorporating the controls, data management, and data structures found in data warehouses while still housing data in object storage and supporting various query and transformation engines, with ACID transaction support that addresses the limitations of first-generation data lakes by providing proper data management capabilities instead of the original write-only approach.</p>
</div>
<div class="paragraph">
<p><em>Lambda architecture</em> is a data processing architecture that handles both batch and streaming data through three independent systems: a batch layer that processes historical data in systems like data warehouses, a speed layer that processes real-time data with low latency using NoSQL databases, and a serving layer that combines results from both layers, though it faces challenges with managing multiple codebases and reconciling data between systems.</p>
</div>
<div class="paragraph">
<p><em>Kappa architecture</em> is an alternative to Lambda that uses a stream-processing platform as the backbone for all data handling—ingestion, storage, and serving—enabling both real-time and batch processing on the same data by reading live event streams and replaying large chunks for batch processing, though it hasn&#8217;t seen widespread adoption due to streaming complexity and cost compared to traditional batch processing.</p>
</div>
<div class="paragraph">
<p>The <em>Dataflow model</em>, developed by Google and implemented through Apache Beam, addresses the challenge of unifying batch and streaming data by viewing all data as events where aggregation is performed over various windows, treating real-time streams as unbounded data and batches as bounded event streams, enabling both processing types to happen in the same system using nearly identical code through the philosophy of "batch as a special case of streaming," which has been adopted by frameworks like Flink and Spark.</p>
</div>
<div class="paragraph">
<p>IoT devices are physical hardware that sense their environment and collect/transmit data, connected through IoT gateways that serve as hubs for data retention and internet routing, with ingestion flowing into event architectures that vary from real-time streaming to batch uploads depending on connectivity, storage requirements ranging from batch object storage for remote sensors to message queues for real-time responses, and serving patterns spanning from batch reports to real-time anomaly detection with reverse ETL patterns where analyzed sensor data is sent back to reconfigure and optimize manufacturing equipment.</p>
</div>
<div class="paragraph">
<p>An Online Transactional Processing (OLTP) data system is designed as an application database to store the state of an application, typically supporting atomicity, consistency, isolation, and durability as part of ACID characteristics, but not ideal for large-scale analytics or bulk queries.</p>
</div>
<div class="paragraph">
<p>In contrast, an online analytical processing (OLAP) system is designed for large-scale, interactive analytics queries, but making it inefficient for single record lookups but enabling its use as a data source for machine learning models or reverse ETL workflows, while the online part implies the system constantly listens for incoming queries.</p>
</div>
<div class="paragraph">
<p>A message is a discrete piece of raw data communicated between systems, which is typically removed from a queue once it&#8217;s delivered and consumed, while a stream is an append-only, ordered log of event records that are persisted over a longer duration to allow for complex analysis of what happened over many events.</p>
</div>
<div class="paragraph">
<p>While time is an essential consideration for all data ingestion, it becomes that much more critical and subtle in the context of streaming, where event time is when an event is generated at the source; ingestion time is when it enters a storage system like a message queue, cache, memory, object storage, or a database; process time is when it undergoes transformation; and processing time measures how long that transformation took, measured in seconds, minutes, hours, etc.</p>
</div>
<div class="paragraph">
<p>A Relational Database Management System (RDBMS) stores data in tables of relations (rows) with fields (columns), typically indexed by a primary key and supporting foreign keys for joins, and is popular, ACID compliant, and ideal for storing rapidly changing application states, often employing normalization to prevent data duplication.</p>
</div>
<div class="paragraph">
<p>NoSQL, or not only SQL, databases, such as key-value, document, wide-column, graph, search, and time series, are alternatives to relational systems, offering improved performance, scalability, and schema flexibility by abandoning traditional RDBMS constraints like strong consistency, joins, or fixed schemas.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A key-value database is a nonrelational database that uniquely identifies and retrieves records using a key, similar to a hash map but more scalable, offering diverse performance characteristics for use cases ranging from high-speed, temporary caching to durable persistence for massive event state changes.</p>
</li>
<li>
<p>A document store, a specialized key-value database, organizes nested objects (documents, often JSON-like) into collections for key-based retrieval; while offering schema flexibility, it is typically not ACID compliant and lacks joins, promoting denormalization, and is often eventually consistent.</p>
</li>
<li>
<p>A wide-column database is optimized for massive data storage, high transaction rates, and low latency, scaling to petabytes and millions of requests per second, making them popular in various industries; however, they only support rapid scans with a single row key index, necessitating data extraction to secondary analytics systems for complex queries. Note that wide-column refers to the database&#8217;s architecture, allowing flexible and sparse columns per row, which is distinct from a wide table, a denormalized data modeling concept with many columns.</p>
</li>
<li>
<p>Graph databases explicitly store data with a mathematical graph structure (nodes and edges), making them ideal for analyzing connectivity and complex traversals between elements, unlike other databases that struggle with such queries; they utilize specialized query languages and present unique challenges for data engineers in terms of data mapping and analytics tool adoption.</p>
</li>
<li>
<p>A search database is a nonrelational database optimized for fast search and retrieval of complex and simple semantic and structural data, primarily used for text search (exact, fuzzy, or semantic matching) and log analysis (anomaly detection, real-time monitoring, security, and operational analytics), often leveraging indexes for speed.</p>
</li>
<li>
<p>A time-series database is optimized for retrieving and statistically processing time-ordered data, handling high-velocity, often write-heavy workloads (including regularly generated measurement data and irregularly created event-based data) by utilizing memory buffering for fast writes and reads; its timestamp-ordered schema makes it suitable for operational analytics, though generally not for BI due to a typical lack of joins.</p>
</li>
</ul>
</div>]]></content><author><name></name></author><category term="data" /><category term="data" /></entry><entry><title type="html">Hands-On Large Language Models</title><link href="https://blog.codefarm.me/2025/03/25/hands-on-large-language-models/" rel="alternate" type="text/html" title="Hands-On Large Language Models" /><published>2025-03-25T08:06:54+08:00</published><updated>2025-03-25T08:06:54+08:00</updated><id>https://blog.codefarm.me/2025/03/25/hands-on-large-language-models</id><content type="html" xml:base="https://blog.codefarm.me/2025/03/25/hands-on-large-language-models/"><![CDATA[<div id="toc" class="toc">
<div id="toctitle"></div>
<ul class="sectlevel1">
<li><a href="#language-ai">1. Language AI</a></li>
<li><a href="#tokens-and-embeddings">2. Tokens and Embeddings</a>
<ul class="sectlevel2">
<li><a href="#llm-tokenization">2.1. LLM Tokenization</a></li>
<li><a href="#token-embeddings">2.2. Token Embeddings</a></li>
<li><a href="#text-embeddings">2.3. Text Embeddings</a></li>
</ul>
</li>
<li><a href="#large-language-models">3. Large Language Models</a>
<ul class="sectlevel2">
<li><a href="#inputs-and-outputs">3.1. Inputs and Outputs</a></li>
<li><a href="#components">3.2. Components</a></li>
<li><a href="#probability-distribution-samplingdecoding">3.3. Probability Distribution (Sampling/Decoding)</a></li>
<li><a href="#parallel-token-processing-and-context-size">3.4. Parallel Token Processing and Context Size</a></li>
<li><a href="#keys-and-values-caching">3.5. Keys and Values Caching</a></li>
<li><a href="#transformer-block">3.6. Transformer Block</a></li>
</ul>
</li>
<li><a href="#text-classification">4. Text Classification</a>
<ul class="sectlevel2">
<li><a href="#representation-models">4.1. Representation Models</a>
<ul class="sectlevel3">
<li><a href="#task-specific-model">4.1.1. Task-Specific Model</a></li>
<li><a href="#embedding-model">4.1.2. Embedding model</a></li>
</ul>
</li>
<li><a href="#generative-models">4.2. Generative Models</a>
<ul class="sectlevel3">
<li><a href="#text-to-text-transfer-transformer">4.2.1. Text-to-Text Transfer Transformer</a></li>
<li><a href="#chatgpt-for-classification">4.2.2. ChatGPT for Classification</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#text-clustering-and-topic-modeling">5. Text Clustering and Topic Modeling</a>
<ul class="sectlevel2">
<li><a href="#arxivs-articles-computation-and-language">5.1. ArXiv’s Articles: Computation and Language</a></li>
<li><a href="#a-common-pipeline-for-text-clustering">5.2. A Common Pipeline for Text Clustering</a>
<ul class="sectlevel3">
<li><a href="#embedding-documents">5.2.1. Embedding Documents</a></li>
<li><a href="#reducing-the-dimensionality-of-embeddings">5.2.2. Reducing the Dimensionality of Embeddings</a></li>
<li><a href="#cluster-the-reduced-embeddings">5.2.3. Cluster the Reduced Embeddings</a></li>
<li><a href="#inspecting-the-clusters">5.2.4. Inspecting the Clusters</a></li>
</ul>
</li>
<li><a href="#from-text-clustering-to-topic-modeling">5.3. From Text Clustering to Topic Modeling</a>
<ul class="sectlevel3">
<li><a href="#bertopic-a-modular-topic-modeling-framework">5.3.1. BERTopic: A Modular Topic Modeling Framework</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#prompt-engineering">6. Prompt Engineering</a>
<ul class="sectlevel2">
<li><a href="#using-text-generation-models">6.1. Using Text Generation Models</a>
<ul class="sectlevel3">
<li><a href="#prompt-template">6.1.1. Prompt Template</a></li>
<li><a href="#controlling-model-output">6.1.2. Controlling Model Output</a></li>
</ul>
</li>
<li><a href="#prompt-engineering-2">6.2. Prompt Engineering</a></li>
<li><a href="#instruction-based-prompting">6.3. Instruction-Based Prompting</a></li>
<li><a href="#advanced-prompt-engineering">6.4. Advanced Prompt Engineering</a>
<ul class="sectlevel3">
<li><a href="#prompt-components">6.4.1. Prompt Components</a></li>
<li><a href="#in-context-learning-providing-examples">6.4.2. In-Context Learning: Providing Examples</a></li>
<li><a href="#chain-prompting-breaking-up-the-problem">6.4.3. Chain Prompting: Breaking up the Problem</a></li>
</ul>
</li>
<li><a href="#reasoning-with-generative-models">6.5. Reasoning with Generative Models</a>
<ul class="sectlevel3">
<li><a href="#chain-of-thought-think-before-answering">6.5.1. Chain-of-Thought: Think Before Answering</a></li>
<li><a href="#self-consistency-sampling-outputs">6.5.2. Self-Consistency: Sampling Outputs</a></li>
<li><a href="#tree-of-thought-exploring-intermediate-steps">6.5.3. Tree-of-Thought: Exploring Intermediate Steps</a></li>
</ul>
</li>
<li><a href="#output-verification">6.6. Output Verification</a>
<ul class="sectlevel3">
<li><a href="#providing-examples">6.6.1. Providing Examples</a></li>
<li><a href="#grammar-constrained-sampling">6.6.2. Grammar: Constrained Sampling</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#advanced-text-generation-techniques-and-tools">7. Advanced Text Generation Techniques and Tools</a>
<ul class="sectlevel2">
<li><a href="#model-io-loading-quantized-models-with-langchain">7.1. Model I/O: Loading Quantized Models with LangChain</a></li>
<li><a href="#chains-extending-the-capabilities-of-llms">7.2. Chains: Extending the Capabilities of LLMs</a>
<ul class="sectlevel3">
<li><a href="#a-single-link-in-the-chain-prompt-template">7.2.1. A Single Link in the Chain: Prompt Template</a></li>
<li><a href="#a-chain-with-multiple-prompts">7.2.2. A Chain with Multiple Prompts</a></li>
</ul>
</li>
<li><a href="#memory-helping-llms-to-remember-conversations">7.3. Memory: Helping LLMs to Remember Conversations</a>
<ul class="sectlevel3">
<li><a href="#conversation-buffer">7.3.1. Conversation Buffer</a></li>
<li><a href="#windowed-conversation-buffer">7.3.2. Windowed Conversation Buffer</a></li>
<li><a href="#conversation-summary">7.3.3. Conversation Summary</a></li>
</ul>
</li>
<li><a href="#agents-creating-a-system-of-llms">7.4. Agents: Creating a System of LLMs</a></li>
<li><a href="#langchain">Appendix A: LangChain</a>
<ul class="sectlevel3">
<li><a href="#chat-models-and-messages">7.A.1. Chat Models and Messages</a></li>
<li><a href="#prompt-templates">7.A.2. Prompt Templates</a></li>
<li><a href="#structured-outputs">7.A.3. Structured Outputs</a></li>
<li><a href="#output-parsers">7.A.4. Output Parsers</a></li>
<li><a href="#embedding-vector-stores-and-retrievers">7.A.5. Embedding, Vector Stores, and Retrievers</a></li>
<li><a href="#document-loaders">7.A.6. Document Loaders</a></li>
<li><a href="#text-splitters">7.A.7. Text Splitters</a></li>
<li><a href="#tools">7.A.8. Tools</a></li>
<li><a href="#chat-history">7.A.9. Chat History</a></li>
<li><a href="#memory">7.A.10. Memory</a></li>
<li><a href="#langchain-expression-language-lcel">7.A.11. LangChain Expression Language (LCEL)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#semantic-search-and-retrieval-augmented-generation">8. Semantic Search and Retrieval-Augmented Generation</a>
<ul class="sectlevel2">
<li><a href="#semantic-search-with-language-models">8.1. Semantic Search with Language Models</a>
<ul class="sectlevel3">
<li><a href="#dense-retrieval">8.1.1. Dense Retrieval</a></li>
<li><a href="#reranking">8.1.2. Reranking</a></li>
</ul>
</li>
<li><a href="#retrieval-augmented-generation-rag">8.2. Retrieval-Augmented Generation (RAG)</a></li>
</ul>
</li>
<li><a href="#multimodal-large-language-models">9. Multimodal Large Language Models</a>
<ul class="sectlevel2">
<li><a href="#vision-transformer-vit">9.1. Vision Transformer (ViT)</a></li>
<li><a href="#multimodal-embedding-models">9.2. Multimodal Embedding Models</a></li>
<li><a href="#multimodal-text-generation-models">9.3. Multimodal Text Generation Models</a>
<ul class="sectlevel3">
<li><a href="#blip-2-bridging-the-modality-gap">9.3.1. BLIP-2: Bridging the Modality Gap</a></li>
<li><a href="#preprocessing-multimodal-inputs">9.3.2. Preprocessing Multimodal Inputs</a></li>
<li><a href="#use-case-1-image-captioning">9.3.3. Use Case 1: Image Captioning</a></li>
<li><a href="#use-case-2-multimodal-chat-based-prompting">9.3.4. Use Case 2: Multimodal Chat-Based Prompting</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#creating-and-fine-tuning-text-embedding-models">10. Creating and Fine-Tuning Text Embedding Models</a>
<ul class="sectlevel2">
<li><a href="#contrastive-learning">10.1. Contrastive Learning</a></li>
<li><a href="#sentence-transformers-sbert">10.2. Sentence Transformers (SBERT)</a></li>
<li><a href="#creating-an-embedding-model">10.3. Creating an Embedding Model</a></li>
</ul>
</li>
<li><a href="#references">References</a></li>
</ul>
</div>
<div class="sect1">
<h2 id="language-ai">1. Language AI</h2>
<div class="sectionbody">
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p><a href="https://colab.research.google.com">Google Colab</a> offers free, cloud-based GPU and TPU access for accelerated computation, subject to usage limits, and requires changing the runtime type to GPU to enable it.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p><em>Artificial Intelligence (AI)</em> is the science and engineering of creating intelligent machines, particularly intelligent computer programs, that can perform tasks similar to human intelligence.</p>
</div>
<div class="paragraph">
<p><em>Language AI</em> is a subfield of AI focused on developing technologies that can understand, process, and generate human language, which is often used interchangeably with Natural Language Processing (NLP).</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/history-of-lang-ai.png" alt="A peek into the history of Language AI." width="45%" height="45%">
</div>
<div class="title">Figure 1. A peek into the history of Language AI.</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/lang-ai-text-tasks.png" alt="Language AI is capable of many tasks by processing textual input." width="35%" height="35%">
</div>
<div class="title">Figure 2. Language AI is capable of many tasks by processing textual input.</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The Bag-of-Words, a representation model, converts text to numerical vectors by tokenizing it—splitting sentences into individual words or subwords (tokens)—creating a vocabulary, and counting token occurrences to form a vector representation (the 'bag of words').</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/bag-of-words.png" alt="A bag-of-words is created by counting individual words" width="35%" height="35%">
</div>
<div class="title">Figure 3. A bag-of-words is created by counting individual words. These values are referred to as vector representations.</div>
</div>
</li>
<li>
<p>Word2vec introduced dense vector embeddings, a significant improvement over Bag-of-Words, by using neural networks to capture the semantic meaning of words based on their context within large datasets, allowing for the measurement of semantic similarity.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/word2vec-embedding.png" alt="Embeddings of words that are similar will be close to each other in dimensional space." width="35%" height="35%">
</div>
<div class="title">Figure 4. Embeddings of words that are similar will be close to each other in dimensional space.</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/types-of-embedding.png" alt="Embeddings can be created for different types of input." width="45%" height="45%">
</div>
<div class="title">Figure 5. Embeddings can be created for different types of input.</div>
</div>
</li>
<li>
<p>Attention-based Transformer models, replacing RNNs which struggled with long sentences, enabled parallel processing and context-aware language representation by using stacked encoders and decoders to focus on relevant input, revolutionizing language AI.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/word2vec-context-embedding.png" alt="Using word2vec embeddings, a context embedding is generated that represents the entire sequence." width="35%" height="35%">
</div>
<div class="title">Figure 6. Using word2vec embeddings, a context embedding is generated that represents the entire sequence.</div>
</div>
</li>
<li>
<p>The Transformer is a combination of stacked encoder and decoder blocks where the input flows through each encoder and decoder.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/transformer-encoder-decoder.png" alt="The Transformer is a combination of stacked encoder and decoder blocks where the input flows through each encoder and decoder." width="25%" height="25%">
</div>
<div class="title">Figure 7. The Transformer is a combination of stacked encoder and decoder blocks where the input flows through each encoder and decoder.</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/transformer-decoder-block.png" alt="An encoder block revolves around self-attention to generate intermediate representations." width="30%" height="30%">
</div>
<div class="title">Figure 8. The encoder block revolves around self-attention to generate intermediate representations.</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/transformer-decoder-block.png" alt="The decoder has an additional attention layer that attends to the output of the encoder." width="30%" height="30%">
</div>
<div class="title">Figure 9. The decoder has an additional attention layer that attends to the output of the encoder.</div>
</div>
</li>
<li>
<p>Encoder-only models (a.k.a., representation models) like Bidirectional Encoder Representations from Transformers(BERT) excel at language representation through masked language modeling, while decoder-only models (a.k.a., generative models) like Generative Pre-trained Transformer (GPT) focus on text generation and are the foundation for large language models.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/bert-arch.png" alt="The architecture of a BERT base model with 12 encoders." width="30%" height="30%">
</div>
<div class="title">Figure 10. The architecture of a BERT base model with 12 encoders.</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/gpt-1-arch.png" alt="The architecture of a GPT-1" width="30%" height="30%">
</div>
<div class="title">Figure 11. The architecture of a GPT-1. It uses a decoder-only architecture and removes the encoder-attention block.</div>
</div>
</li>
<li>
<p>Generative LLMs function as sequence-to-sequence machines, initially designed for text completion, but their capability to be fine-tuned into chatbots or instruct models that can follow user prompts revealed their true potential.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/gen-llm-chat-io.png" alt="Generative LLMs take in some input and try to complete it" width="30%" height="30%">
</div>
<div class="title">Figure 12. Generative LLMs take in some input and try to complete it. With instruct models, this is more than just autocomplete and attempts to answer the question.</div>
</div>
</li>
<li>
<p>The context length, or window, represents the maximum number of tokens the model can process, enabling the generative LLM to handle larger documents, and the current length expands as the model generates new tokens due to its autoregressive nature.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/context-length-llm.png" alt="The context length is the maximum context an LLM can handle." width="35%" height="35%">
</div>
<div class="title">Figure 13. The context length is the maximum context an LLM can handle.</div>
</div>
</li>
<li>
<p>LLMs differ from traditional machine learning by using a two-step training process: <em>pretraining</em>, for general language learning, and <em>fine-tuning</em> (or post-training), to adapt the pretrained (foundation/base) model for specific tasks.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/llm-pretraining-fine-tuning.png" alt="The Training Paradigm of Large Language Models" width="35%" height="35%">
</div>
<div class="title">Figure 14. Compared to traditional machine learning, LLM training takes a multistep approach.</div>
</div>
</li>
<li>
<p>Closed-source LLMs, like GPT-4 and Claude, are models that do not have their weights and architecture shared with the public, which are accessed via APIs, and offer high performance with managed hosting, but are costly and limit user control; open LLMs, such as Llama, share their architecture, enabling local use, fine-tuning, and privacy, but require powerful hardware and expertise.</p>
</li>
<li>
<p>The main source for finding and downloading LLMs is the Hugging Face Hub. Hugging Face is the organization behind the well-known Transformers package, which for years has driven the development of language models in general.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># If a connection to the Hugging Face URL (https://huggingface.co/) fails, try to set the HF_ENDPOINT environment variable to the mirror URL.
</span><span class="kn">import</span> <span class="n">os</span>
<span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">HF_ENDPOINT</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://hf-mirror.com</span><span class="sh">"</span></code></pre>
</div>
</div>
</li>
<li>
<p>Hugging Face, the organization behind the Transformers package, is the primary source for finding and downloading LLMs, built upon the Transformer framework.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">transformers</span> <span class="kn">import</span> <span class="n">AutoModelForCausalLM</span><span class="p">,</span> <span class="n">AutoTokenizer</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="c1"># HF_ENDPOINT controls the base URL used by the transformers library
# to download models and other resources from the Hugging Face Hub.
</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">'</span><span class="s">HF_ENDPOINT</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">https://hf-mirror.com</span><span class="sh">'</span>

<span class="c1"># determine the device
</span><span class="n">dev</span> <span class="o">=</span> <span class="sh">'</span><span class="s">cuda</span><span class="sh">'</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="sh">'</span><span class="s">cpu</span><span class="sh">'</span>

<span class="c1"># load model and tokenizer
</span><span class="n">MODEL_NAME</span> <span class="o">=</span> <span class="sh">'</span><span class="s">microsoft/Phi-4-mini-instruct</span><span class="sh">'</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span>
    <span class="n">MODEL_NAME</span><span class="p">,</span>
    <span class="n">torch_dtype</span><span class="o">=</span><span class="sh">'</span><span class="s">auto</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">device_map</span><span class="o">=</span><span class="n">dev</span><span class="p">,</span>
    <span class="n">trust_remote_code</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="n">MODEL_NAME</span><span class="p">)</span>

<span class="c1"># create a pipeline
</span><span class="n">pipe</span> <span class="o">=</span> <span class="nf">pipeline</span><span class="p">(</span>
    <span class="sh">"</span><span class="s">text-generation</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
    <span class="n">tokenizer</span><span class="o">=</span><span class="n">tokenizer</span><span class="p">,</span>
    <span class="n">return_full_text</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span>
    <span class="n">do_sample</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># the prompt (user input / query)
</span><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Create a funny joke about chickens.</span><span class="sh">"</span><span class="p">}]</span>

<span class="c1"># generate output
</span><span class="n">output</span> <span class="o">=</span> <span class="nf">pipe</span><span class="p">(</span><span class="n">messages</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">generated_text</span><span class="sh">"</span><span class="p">])</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Why did the chicken join the band?

Because he heard they had the "cluck-loudest" performers around!</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># clear memory and empty the VRAM
</span><span class="kn">import</span> <span class="n">gc</span>
<span class="kn">import</span> <span class="n">torch</span>

<span class="c1"># attempt to delete the model, tokenizer, and pipeline objects from memory
</span><span class="k">del</span> <span class="n">model</span><span class="p">,</span> <span class="n">tokenizer</span><span class="p">,</span> <span class="n">pipe</span>

<span class="c1"># flush memory
</span><span class="n">gc</span><span class="p">.</span><span class="nf">collect</span><span class="p">()</span>
<span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">():</span>
    <span class="c1"># if a GPU is available, empty the CUDA cache to free up GPU memory
</span>    <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">empty_cache</span><span class="p">()</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="tokens-and-embeddings">2. Tokens and Embeddings</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Tokens and embeddings are two of the central concepts of using large language models (LLMs).</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/token-embedding.png" alt="Language models deal with text in small chunks called tokens." width="30%" height="30%">
</div>
<div class="title">Figure 15. Language models deal with text in small chunks called tokens. For the lan‐ guage model to compute language, it needs to turn tokens into numeric representations called embeddings.</div>
</div>
<div class="sect2">
<h3 id="llm-tokenization">2.1. LLM Tokenization</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">torch</span>
<span class="kn">from</span> <span class="n">transformers</span> <span class="kn">import</span> <span class="n">AutoModelForCausalLM</span><span class="p">,</span> <span class="n">AutoTokenizer</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="c1"># HF_ENDPOINT controls the base URL used by the transformers library
# to download models and other resources from the Hugging Face Hub.
</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">'</span><span class="s">HF_ENDPOINT</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">https://hf-mirror.com</span><span class="sh">'</span>

<span class="c1"># determine the device
</span><span class="n">dev</span> <span class="o">=</span> <span class="sh">'</span><span class="s">cuda</span><span class="sh">'</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="sh">'</span><span class="s">cpu</span><span class="sh">'</span>

<span class="c1"># load model and tokenizer
</span><span class="n">MODEL_NAME</span> <span class="o">=</span> <span class="sh">'</span><span class="s">microsoft/Phi-4-mini-instruct</span><span class="sh">'</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span>
    <span class="n">MODEL_NAME</span><span class="p">,</span>
    <span class="n">torch_dtype</span><span class="o">=</span><span class="sh">'</span><span class="s">auto</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">device_map</span><span class="o">=</span><span class="n">dev</span><span class="p">,</span>
    <span class="n">trust_remote_code</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="n">MODEL_NAME</span><span class="p">)</span>

<span class="n">prompt</span> <span class="o">=</span> <span class="sh">'</span><span class="s">&lt;s&gt; Write an email apologizing to Sarah for the tragic gardening mishap. Explain how it happened.&lt;|assistant|&gt;</span><span class="sh">'</span>

<span class="c1"># tokenize the input prompt
</span><span class="n">input_ids</span> <span class="o">=</span> <span class="nf">tokenizer</span><span class="p">(</span><span class="n">prompt</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="sh">'</span><span class="s">pt</span><span class="sh">'</span><span class="p">).</span><span class="n">input_ids</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">dev</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">input_ids: </span><span class="si">{</span><span class="n">input_ids</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># generate the text
</span><span class="n">output_ids</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">generate</span><span class="p">(</span><span class="n">input_ids</span><span class="o">=</span><span class="n">input_ids</span><span class="p">,</span> <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">output_ids: </span><span class="si">{</span><span class="n">output_ids</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># print the output
</span><span class="nf">print</span><span class="p">(</span><span class="n">tokenizer</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">output_ids</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="txt">input_ids: tensor([[101950,     29,  16465,    448,   3719,  39950,   6396,    316,  32145,
            395,    290,  62374,  66241,  80785,    403,     13, 115474,   1495,
            480,  12570,     13, 200019]])
output_ids: tensor([[101950,     29,  16465,    448,   3719,  39950,   6396,    316,  32145,
            395,    290,  62374,  66241,  80785,    403,     13, 115474,   1495,
            480,  12570,     13, 200019,  18174,     25,    336,   2768,    512,
           6537,  10384,    395,    290, 193145, 147276,    403,    279,  36210,
          32145,   4464,     40,   5498,    495,   3719]])
&lt;s&gt; Write an email apologizing to Sarah for the tragic gardening mishap. Explain how it happened.&lt;|assistant|&gt;Subject: Sincere Apologies for the Gardening Mishap

Dear Sarah,

I hope this email</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Tokens, the units into which text prompts are broken for model input, also form the model&#8217;s output.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/tokenizer-input-output-id.png" alt="Tokenizer" width="30%" height="30%">
</div>
<div class="title">Figure 16. A tokenizer encodes input prompts into token ID lists for the language model and decodes the model&#8217;s output token IDs back into words or tokens.</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Each ID corresponds to a specific token (character, word, or subword) in the tokenizer&#8217;s vocabulary.</p>
</li>
<li>
<p>The tokenizer&#8217;s vocabulary acts as a lookup table, allowing the model to convert between text and these integer representations.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">101950</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">16465</span><span class="p">,</span> <span class="mi">448</span><span class="p">,</span> <span class="mi">3719</span><span class="p">,</span> <span class="mi">39950</span><span class="p">]:</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">tokenizer</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="nb">id</span><span class="p">))</span>
<span class="c1"># &lt;s
# &gt;
#  Write
#  an
#  email
#  apolog
</span>
<span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">18174</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">336</span><span class="p">,</span> <span class="mi">2768</span><span class="p">,</span> <span class="mi">512</span><span class="p">]:</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">tokenizer</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
<span class="c1"># Subject
# :
#  S
# inc
# ere</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>Tokenization is determined by three major design decisions: the tokenizer algorithm (e.g., BPE, WordPiece, SentencePiece), tokenization parameters (including vocabulary size, special tokens, capitalization, treatment of capitalization and different languages), and the dataset the tokenizer is trained on (a tokenizer trained on an English text dataset will be different from another trained on a code dataset or a multilingual text dataset).</p>
</li>
<li>
<p>Tokenization methods vary in granularity, from word-level to byte-level, with subword tokenization offering a balance of vocabulary expressiveness and efficiency, making it the most common approach in modern language models.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="token-embeddings">2.2. Token Embeddings</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="txt">Text --&gt; Tokens --&gt; Token IDs --&gt; Embeddings (Vectors)</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>A tokenizer, once trained, becomes intrinsically linked to its language model during the model&#8217;s training; consequently, a pretrained language model cannot function with a different tokenizer without retraining, as their vocabularies and tokenization schemes are aligned.</p>
</li>
<li>
<p>An embedding is a dense, numerical vector representation of a token (like a word or subword) that captures its semantic meaning within a high-dimensional space, enabling language models to understand and process relationships between words.</p>
</li>
<li>
<p>A language model stores static embedding vectors for each token in its vocabulary, but also generates contextualized word embeddings, dynamically representing a token based on its context instead of a single, fixed vector.</p>
<div class="ulist">
<ul>
<li>
<p>A language model holds an embedding vector associated with each token in its tokenizer.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/llm-token-embedding.png" alt="A language model holds an embedding vector associated with each token in its tokenizer." width="30%" height="30%">
</div>
<div class="title">Figure 17. A language model holds an embedding vector associated with each token in its tokenizer.</div>
</div>
</li>
<li>
<p>A language model operates on raw, static embeddings as its input and produces contextual text embeddings.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/llm-context-embedding.png" alt="A language model operates on raw, static embeddings as its input and produces contextual text embeddings." width="30%" height="30%">
</div>
<div class="title">Figure 18. A language model operates on raw, static embeddings as its input and produces contextual text embeddings.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">transformers</span> <span class="kn">import</span> <span class="n">AutoModel</span><span class="p">,</span> <span class="n">AutoTokenizer</span>

<span class="c1"># load a tokenizer
</span><span class="n">tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="sh">'</span><span class="s">microsoft/deberta-base</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># load a language model
</span><span class="n">model</span> <span class="o">=</span> <span class="n">AutoModel</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="sh">'</span><span class="s">microsoft/deberta-v3-xsmall</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># tokenize the sentence: convert text to token IDs
</span><span class="n">tokens</span> <span class="o">=</span> <span class="nf">tokenizer</span><span class="p">(</span><span class="sh">'</span><span class="s">Hello world</span><span class="sh">'</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="sh">'</span><span class="s">pt</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># print the decoded tokens to show tokenization
</span><span class="k">for</span> <span class="n">token_id</span> <span class="ow">in</span> <span class="n">tokens</span><span class="p">[</span><span class="sh">'</span><span class="s">input_ids</span><span class="sh">'</span><span class="p">][</span><span class="mi">0</span><span class="p">]:</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">tokenizer</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">token_id</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># process the token IDs through the model to get contextualized embeddings
</span><span class="n">output</span> <span class="o">=</span> <span class="nf">model</span><span class="p">(</span><span class="o">**</span><span class="n">tokens</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

<span class="c1"># show the shape of the embedding result
</span><span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">output</span><span class="p">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># output contains the contextualized embedding vectors
</span><span class="nf">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">[CLS]
Hello
 world
[SEP]


torch.Size([1, 4, 384])

tensor([[[-3.4816,  0.0861, -0.1819,  ..., -0.0612, -0.3911,  0.3017],
         [ 0.1898,  0.3208, -0.2315,  ...,  0.3714,  0.2478,  0.8048],
         [ 0.2071,  0.5036, -0.0485,  ...,  1.2175, -0.2292,  0.8582],
         [-3.4278,  0.0645, -0.1427,  ...,  0.0658, -0.4367,  0.3834]]],
</span><span class="gp">       grad_fn=&lt;NativeLayerNormBackward0&gt;</span><span class="o">)</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="text-embeddings">2.3. Text Embeddings</h3>
<div class="paragraph">
<p>Text embeddings are single, dense vectors that represent the semantic meaning of entire sentences, paragraphs, or documents, in contrast to token embeddings, which represent individual words or subwords.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">sentence_transformers</span> <span class="kn">import</span> <span class="n">SentenceTransformer</span>

<span class="c1"># load model
</span><span class="n">model</span> <span class="o">=</span> <span class="nc">SentenceTransformer</span><span class="p">(</span><span class="sh">'</span><span class="s">sentence-transformers/all-MiniLM-L6-v2</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># convert text to text embeddings
</span><span class="n">embeddings</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">Best movie ever!</span><span class="sh">"</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">embeddings</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span> <span class="c1"># (384,)</span></code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="title">Input Sequence Length: <a href="https://www.sbert.net/" class="bare">https://www.sbert.net/</a></div>
<div class="paragraph">
<p>For transformer models like BERT, RoBERTa, DistilBERT etc., the runtime and memory requirement grows quadratic with the input length. This limits transformers to inputs of certain lengths. A common value for BERT-based models are 512 tokens, which corresponds to about 300-400 words (for English).</p>
</div>
<div class="paragraph">
<p>Each model has a maximum sequence length under <code>model.max_seq_length</code>, which is the maximal number of tokens that can be processed. Longer texts will be truncated to the first <code>model.max_seq_length</code> tokens:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">sentence_transformers</span> <span class="kn">import</span> <span class="n">SentenceTransformer</span>

<span class="n">model</span> <span class="o">=</span> <span class="nc">SentenceTransformer</span><span class="p">(</span><span class="sh">"</span><span class="s">all-MiniLM-L6-v2</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Max Sequence Length:</span><span class="sh">"</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">max_seq_length</span><span class="p">)</span>
<span class="c1"># =&gt; Max Sequence Length: 256
</span>
<span class="c1"># Change the length to 200
</span><span class="n">model</span><span class="p">.</span><span class="n">max_seq_length</span> <span class="o">=</span> <span class="mi">200</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Max Sequence Length:</span><span class="sh">"</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">max_seq_length</span><span class="p">)</span>
<span class="c1"># =&gt; Max Sequence Length: 200</span></code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="large-language-models">3. Large Language Models</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">from</span> <span class="n">transformers</span> <span class="kn">import</span> <span class="n">AutoModelForCausalLM</span><span class="p">,</span> <span class="n">AutoTokenizer</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="c1"># determine the device
</span><span class="n">dev</span> <span class="o">=</span> <span class="sh">'</span><span class="s">cuda</span><span class="sh">'</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="sh">'</span><span class="s">cpu</span><span class="sh">'</span>

<span class="c1"># load model and tokenizer
</span><span class="n">MODEL_NAME</span> <span class="o">=</span> <span class="sh">'</span><span class="s">microsoft/Phi-4-mini-instruct</span><span class="sh">'</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span>
    <span class="n">MODEL_NAME</span><span class="p">,</span>
    <span class="n">torch_dtype</span><span class="o">=</span><span class="sh">'</span><span class="s">auto</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">device_map</span><span class="o">=</span><span class="n">dev</span><span class="p">,</span>
    <span class="n">trust_remote_code</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="n">MODEL_NAME</span><span class="p">)</span>

<span class="c1"># create a pipeline
</span><span class="n">generator</span> <span class="o">=</span> <span class="nf">pipeline</span><span class="p">(</span>
    <span class="sh">"</span><span class="s">text-generation</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
    <span class="n">tokenizer</span><span class="o">=</span><span class="n">tokenizer</span><span class="p">,</span>
    <span class="n">return_full_text</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
    <span class="n">do_sample</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
<span class="p">)</span></code></pre>
</div>
</div>
<div class="sect2">
<h3 id="inputs-and-outputs">3.1. Inputs and Outputs</h3>
<div class="paragraph">
<p>The most common picture of understanding the behavior of a Transformer LLM is to think of it as a software system that takes in text and generates text in response.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Once a large enough text-in-text-out model is trained on a large enough high-quality dataset, it becomes able to generate impressive and useful outputs.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/llm-text-to-text.png" alt="At a high level of abstraction, Transformer LLMs take a text prompt and output generated text." width="30%" height="30%">
</div>
<div class="title">Figure 19. At a high level of abstraction, Transformer LLMs take a text prompt and output generated text.</div>
</div>
</li>
<li>
<p>The model does not generate the text all in one operation; it actually generates one token at a time.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/llm-text-gen-token.png" alt="Transformer LLMs generate one token at a time" width="30%" height="30%">
</div>
<div class="title">Figure 20. Transformer LLMs generate one token at a time, not the entire text at once.</div>
</div>
</li>
<li>
<p>Each token generation step is one forward pass through the model (that’s machine-learning speak for the inputs going into the neural network and flowing through the computations it needs to produce an output on the other end of the computation graph).</p>
</li>
<li>
<p>After each token generation, the input prompt for the next generation step is tweaked by appending the output token to the end of the input prompt.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/llm-text-gen-forward-pass.png" alt="An output token is appended to the prompt" width="30%" height="30%">
</div>
<div class="title">Figure 21. An output token is appended to the prompt, then this new text is presented to the model again for another forward pass to generate the next token.</div>
</div>
</li>
<li>
<p>Text generation LLMs are called <em>autoregressive</em> models because they generate text sequentially, using prior outputs as input, unlike text representation models like BERT, which process the entire input at once.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="components">3.2. Components</h3>
<div class="ulist">
<ul>
<li>
<p>A language model consists of a <em>tokenizer</em>, a stack of <em>Transformer blocks</em> for processing, and an <em>LM head</em> that converts the processed information into probability scores for the next token.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/llm-tokenizer-transformers-lm-head.png" alt="A Transformer LLM is made up of a tokenizer, a stack of Transformer blocks, and a language modeling head." width="35%" height="35%">
</div>
<div class="title">Figure 22. A Transformer LLM is made up of a tokenizer, a stack of Transformer blocks, and a language modeling head.</div>
</div>
</li>
<li>
<p>The model has a vector representation associated with each of these tokens in the vocabulary (token embeddings).</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/llm-tokenizer-embedding.png" alt="The tokenizer has a vocabulary of 50,000 tokens. The model has token embeddings associated with those embeddings." width="35%" height="35%">
</div>
<div class="title">Figure 23. The tokenizer has a vocabulary of 50,000 tokens. The model has token embeddings associated with those embeddings.</div>
</div>
</li>
<li>
<p>For each generated token, the process flows once through each of the Transformer blocks in the stack in order, then to the LM head, which finally outputs the probability distribution for the next token.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/llm-forward-pass.png" alt="At the end of the forward pass, the model predicts a probability score for each token in the vocabulary." width="35%" height="35%">
</div>
<div class="title">Figure 24. At the end of the forward pass, the model predicts a probability score for each token in the vocabulary.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">from</span> <span class="n">transformers</span> <span class="kn">import</span> <span class="n">AutoModelForCausalLM</span><span class="p">,</span> <span class="n">AutoTokenizer</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="c1"># determine the device
</span><span class="n">dev</span> <span class="o">=</span> <span class="sh">'</span><span class="s">cuda</span><span class="sh">'</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="sh">'</span><span class="s">cpu</span><span class="sh">'</span>

<span class="c1"># load model and tokenizer
</span><span class="n">MODEL_NAME</span> <span class="o">=</span> <span class="sh">'</span><span class="s">microsoft/Phi-4-mini-instruct</span><span class="sh">'</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span>
    <span class="n">MODEL_NAME</span><span class="p">,</span>
    <span class="n">torch_dtype</span><span class="o">=</span><span class="sh">'</span><span class="s">auto</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">device_map</span><span class="o">=</span><span class="n">dev</span><span class="p">,</span>
    <span class="n">trust_remote_code</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">model</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Phi3ForCausalLM(
  (model): Phi3Model(
    (embed_tokens): Embedding(200064, 3072, padding_idx=199999)
    (layers): ModuleList(
      (0-31): 32 x Phi3DecoderLayer(
        (self_attn): Phi3Attention(
          (o_proj): Linear(in_features=3072, out_features=3072, bias=False)
          (qkv_proj): Linear(in_features=3072, out_features=5120, bias=False)
        )
        (mlp): Phi3MLP(
          (gate_up_proj): Linear(in_features=3072, out_features=16384, bias=False)
          (down_proj): Linear(in_features=8192, out_features=3072, bias=False)
          (activation_fn): SiLU()
        )
        (input_layernorm): Phi3RMSNorm((3072,), eps=1e-05)
        (post_attention_layernorm): Phi3RMSNorm((3072,), eps=1e-05)
        (resid_attn_dropout): Dropout(p=0.0, inplace=False)
        (resid_mlp_dropout): Dropout(p=0.0, inplace=False)
      )
    )
    (norm): Phi3RMSNorm((3072,), eps=1e-05)
    (rotary_emb): Phi3RotaryEmbedding()
  )
  (lm_head): Linear(in_features=3072, out_features=200064, bias=False)
)</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="probability-distribution-samplingdecoding">3.3. Probability Distribution (Sampling/Decoding)</h3>
<div class="paragraph">
<p>Language models use a probability distribution to determine the next token, which  is called the <em>decoding strategy</em>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The easiest strategy would be to always pick the token with the highest probability score, which is called <em>greedy decoding</em> (equivalent to setting the temperature to zero in an LLM).</p>
<div class="paragraph">
<p>In practice, this doesn’t tend to lead to the best outputs for most use cases.</p>
</div>
</li>
<li>
<p>A better approach is to introduce randomness by <em>sampling</em> from the probability distribution, sometimes choosing the second or third highest probability token.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="parallel-token-processing-and-context-size">3.4. Parallel Token Processing and Context Size</h3>
<div class="ulist">
<ul>
<li>
<p>Transformers excel at parallel processing, unlike earlier architectures, which is evident in how they handle token generation.</p>
<div class="ulist">
<ul>
<li>
<p>Each input token is processed simultaneously through its own computation path or stream.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/llm-parallel-token-processing.png" alt="llm parallel token processing" width="30%" height="30%">
</div>
<div class="title">Figure 25. Each token is processed through its own stream of computation (with some interaction between them in attention steps).</div>
</div>
</li>
<li>
<p>A model with 4K context length or context size can only process 4K tokens and would only have 4K of these streams.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Each of the token streams starts with an input vector (the embedding vector and some positional information).</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/llm-token-vector-processing.png" alt="llm token vector processing" width="30%" height="30%">
</div>
<div class="title">Figure 26. Each processing stream takes a vector as input and produces a final resulting vector of the same size (often referred to as the model dimension).</div>
</div>
<div class="ulist">
<ul>
<li>
<p>At the end of the stream, another vector emerges as the result of the model’s processing.</p>
<div class="ulist">
<ul>
<li>
<p>For text generation, only the output result of the last stream is used to predict the next token.</p>
</li>
<li>
<p>That output vector is the only input into the LM head as it calculates the probabilities of the next token.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="keys-and-values-caching">3.5. Keys and Values Caching</h3>
<div class="paragraph">
<p>Transformer models use a <a href="https://kipp.ly/transformer-inference-arithmetic/">key/value (KV) cache</a> to cache the results of the previous calculation (especially some of the specific vectors in the attention mechanism), speeding up text generation by avoiding redundant calculations.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/llm-text-gen-kv-cache.png" alt="llm text gen kv cache" width="30%" height="30%">
</div>
<div class="title">Figure 27. When generating text, it’s important to cache the computation results of previous tokens instead of repeating the same calculation over and over again.</div>
</div>
<div class="ulist">
<ul>
<li>
<p>In Hugging Face Transformers, cache is enabled by default, and can be disabled it by setting <code>use_cache</code> to <code>False</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">prompt</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Write a very long email apologizing to Sarah for the tragic gardening mishap. Explain how it happened.</span><span class="sh">'</span>
<span class="n">input_ids</span> <span class="o">=</span> <span class="nf">tokenizer</span><span class="p">(</span><span class="n">prompt</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="sh">'</span><span class="s">pt</span><span class="sh">'</span><span class="p">).</span><span class="n">input_ids</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">dev</span><span class="p">)</span>
<span class="n">generation_output</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">generate</span><span class="p">(</span>
    <span class="n">input_ids</span><span class="o">=</span><span class="n">input_ids</span><span class="p">,</span>
    <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>
    <span class="n">use_cache</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
<span class="p">)</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="transformer-block">3.6. Transformer Block</h3>
<div class="paragraph">
<p>Transformer LLMs are composed of a series Transformer blocks (often in the range of six in the original Transformer paper, to over a hundred in many large LLMs) and each block processes its inputs, then passes the results of its processing to the next block.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/transformer-blocks.png" alt="transformer blocks" width="35%" height="35%">
</div>
<div class="title">Figure 28. The bulk of the Transformer LLM processing happens inside a series of Transformer blocks, each handing the result of its processing as input to the subsequent block.</div>
</div>
<div class="ulist">
<ul>
<li>
<p>A Transformer block is made up of two successive components:</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/transformer-block-attention-feedforward-neural-network.png" alt="transformer block attention feedforward neural network" width="35%" height="35%">
</div>
<div class="title">Figure 29. A Transformer block is made up of a self-attention layer and a feedforward neural network.</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The <em>attention layer</em> is mainly concerned with incorporating relevant information from other input tokens and positions</p>
</li>
<li>
<p>The <em>feedforward layer</em> houses the majority of the model’s processing capacity</p>
</li>
</ul>
</div>
</li>
<li>
<p>The feedforward network in a Transformer model stores learned information, such as 'The Shawshank' and 'Redemption,' and enables interpolation and generalization for generating text on unseen inputs.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/transformer-feedforeward.png" alt="transformer feedforeward" width="35%" height="35%">
</div>
<div class="title">Figure 30. The feedforward neural network component of a Transformer block likely does the majority of the model’s memorization and interpolation.</div>
</div>
</li>
<li>
<p>The attention layer in a Transformer model enables context awareness, crucial for language understanding beyond simple memorization.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/transformer-attention.png" alt="transformer attention" width="35%" height="35%">
</div>
<div class="title">Figure 31. The self-attention layer incorporates relevant information from previous positions that help process the current token.</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="text-classification">4. Text Classification</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A common task in natural language processing is classification, where the goal is to train a model to assign a label or class to input text, a technique widely used in applications like sentiment analysis and intent detection, significantly impacted by both representative and generative language models.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/text-classification-gen-repr-models.png" alt="Both representation and generative models can be used for classification" width="45%" height="45%">
</div>
<div class="title">Figure 32. Although both representation and generative models can be used for classification, their approaches differ.</div>
</div>
<div class="paragraph">
<p>The Hugging Face Hub is a collaborative platform for machine learning resources (models, datasets, applications), and the <code>datasets</code> package can be used to load datasets.</p>
</div>
<div class="paragraph">
<p>The dataset is split into train (for training), test (for final evaluation), and validation (for intermediate generalization checks, especially during hyperparameter tuning).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">datasets</span> <span class="kn">import</span> <span class="n">load_dataset</span>

<span class="c1"># load data
</span><span class="n">data</span> <span class="o">=</span> <span class="nf">load_dataset</span><span class="p">(</span><span class="sh">"</span><span class="s">rotten_tomatoes</span><span class="sh">"</span><span class="p">)</span> <span class="c1"># the well-known 'rotten_tomatoes' dataset
</span><span class="n">data</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">DatasetDict({
    train: Dataset({
        features: ['text', 'label'],
        num_rows: 8530
    })
    validation: Dataset({
        features: ['text', 'label'],
        num_rows: 1066
    })
    test: Dataset({
        features: ['text', 'label'],
        num_rows: 1066
    })
})</span></code></pre>
</div>
</div>
<div class="sect2">
<h3 id="representation-models">4.1. Representation Models</h3>
<div class="ulist">
<ul>
<li>
<p>Classification with pretrained representation models generally comes in two flavors, either using a task-specific model or an embedding model.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/text-classification-repr-models.png" alt="Text Classification with Representation Models" width="45%" height="45%">
</div>
<div class="title">Figure 33. A foundation model is fine-tuned for specific tasks; for instance, to perform classification or generate general-purpose embeddings.</div>
</div>
</li>
<li>
<p>A task-specific model is a representation model, such as BERT, trained for a specific task, like sentiment analysis.</p>
</li>
<li>
<p>An embedding model generates general-purpose embeddings that can be used for a variety of tasks not limited to classification, like semantic search.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/text-classification-repr-frozen-models.png" alt="Perform classification directly with a task-specific model or indirectly with general-purpose embeddings." width="45%" height="45%">
</div>
<div class="title">Figure 34. Perform classification directly with a task-specific model or indirectly with general-purpose embeddings.</div>
</div>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="task-specific-model">4.1.1. Task-Specific Model</h4>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">datasets</span> <span class="kn">import</span> <span class="n">load_dataset</span>

<span class="c1"># load the well-known 'rotten_tomatoes' dataset for sentiment analysis
</span><span class="n">data</span> <span class="o">=</span> <span class="nf">load_dataset</span><span class="p">(</span><span class="sh">"</span><span class="s">rotten_tomatoes</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># determine the device to use for computation (GPU if available, otherwise CPU)
</span><span class="kn">import</span> <span class="n">torch</span>
<span class="n">dev</span> <span class="o">=</span> <span class="sh">'</span><span class="s">cuda</span><span class="sh">'</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="sh">'</span><span class="s">cpu</span><span class="sh">'</span>

<span class="kn">from</span> <span class="n">transformers</span> <span class="kn">import</span> <span class="n">pipeline</span>

<span class="c1"># specify the path to the pre-trained Twitter-RoBERTa-base for Sentiment Analysis model
</span><span class="n">model_path</span> <span class="o">=</span> <span class="sh">"</span><span class="s">cardiffnlp/twitter-roberta-base-sentiment-latest</span><span class="sh">"</span>
<span class="c1"># load the pre-trained sentiment analysis model into a pipeline for easy inference
</span><span class="n">pipe</span> <span class="o">=</span> <span class="nf">pipeline</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="n">model_path</span><span class="p">,</span>
    <span class="n">tokenizer</span><span class="o">=</span><span class="n">model_path</span><span class="p">,</span>
    <span class="n">return_all_scores</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="c1"># return the scores for all sentiment labels
</span>    <span class="n">device</span><span class="o">=</span><span class="n">dev</span><span class="p">,</span> <span class="c1"># specify the device to run the pipeline on
</span><span class="p">)</span>

<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span> <span class="c1"># for progress bar during inference
</span><span class="kn">from</span> <span class="n">transformers.pipelines.pt_utils</span> <span class="kn">import</span> <span class="n">KeyDataset</span> <span class="c1"># utility to feed data to the pipeline
</span>
<span class="c1"># run inference on the test dataset
</span><span class="n">y_pred</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1"># list to store the predicted sentiment labels
</span><span class="k">for</span> <span class="n">output</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span>
    <span class="c1"># iterate through the 'text' column of the test dataset
</span>    <span class="nf">pipe</span><span class="p">(</span><span class="nc">KeyDataset</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">test</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">)),</span> <span class="n">total</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">test</span><span class="sh">"</span><span class="p">])</span>
<span class="p">):</span>
    <span class="c1"># extract the negative sentiment score
</span>    <span class="n">negative_score</span> <span class="o">=</span> <span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">score</span><span class="sh">"</span><span class="p">]</span>
    <span class="c1"># extract the positive sentiment score (assuming labels are ordered: negative, neutral, positive)
</span>    <span class="n">positive_score</span> <span class="o">=</span> <span class="n">output</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="sh">"</span><span class="s">score</span><span class="sh">"</span><span class="p">]</span>
    <span class="c1"># predict the sentiment based on the highest score (0 for negative, 1 for positive)
</span>    <span class="n">assignment</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">argmax</span><span class="p">([</span><span class="n">negative_score</span><span class="p">,</span> <span class="n">positive_score</span><span class="p">])</span>
    <span class="c1"># add the predicted label to the list
</span>    <span class="n">y_pred</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">assignment</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">classification_report</span>


<span class="k">def</span> <span class="nf">evaluate_performance</span><span class="p">(</span><span class="n">y_true</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">Create and print the classification report comparing true and predicted labels</span><span class="sh">'''</span>
    <span class="n">performance</span> <span class="o">=</span> <span class="nf">classification_report</span><span class="p">(</span>
        <span class="n">y_true</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">,</span> <span class="n">target_names</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">Negative Review</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Positive Review</span><span class="sh">"</span><span class="p">]</span>
    <span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">performance</span><span class="p">)</span>


<span class="c1"># evaluate the performance of the sentiment analysis model on the test set
</span><span class="nf">evaluate_performance</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">test</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">label</span><span class="sh">"</span><span class="p">],</span> <span class="n">y_pred</span><span class="p">)</span> <span class="c1"># compare the true labels with the predicted labels</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">                 precision    recall  f1-score   support

Negative Review       0.76      0.88      0.81       533
Positive Review       0.86      0.72      0.78       533

       accuracy                           0.80      1066
      macro avg       0.81      0.80      0.80      1066
   weighted avg       0.81      0.80      0.80      1066</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The above generated classification report shows four such methods: precision, recall, accuracy, and the F1 score.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><em>Precision</em> measures how many of the items found are relevant, which indicates the accuracy of the relevant results.</p>
</li>
<li>
<p><em>Recall</em> refers to how many relevant classes were found, which indicates its ability to find all relevant results.</p>
</li>
<li>
<p><em>Accuracy</em> refers to how many correct predictions the model makes out of all predictions, which indicates the overall correctness of the model.</p>
</li>
<li>
<p>The <em>F1 score</em> balances both precision and recall to create a model’s overall performance.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>A confusion matrix visualizes the performance of a classification model by showing the counts of four prediction outcomes: True Positives, True Negatives, False Positives, and False Negatives, which serves as the basis for calculating various metrics to evaluate the model&#8217;s quality.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/confusion-matrix.png" alt="The confusion matrix describes four types of predictions." width="35%" height="35%">
</div>
<div class="title">Figure 35. The confusion matrix describes four types of predictions.</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/classification-metrics.png" alt="classification metrics" width="35%" height="35%">
</div>
<div class="title">Figure 36. The classification report describes several metrics for evaluating a model’s performance.</div>
</div>
</div>
<div class="sect3">
<h4 id="embedding-model">4.1.2. Embedding model</h4>
<div class="ulist">
<ul>
<li>
<p>Without fine-tuning a representation model, a general-purpose embedding model can generate features that are then fed into a separate, trainable classifier (like logistic regression, which can be trained efficiently on a CPU), creating a two-step classification approach.</p>
</li>
<li>
<p>A major benefit of this separation is avoiding the costly fine-tuning of the embedding model, instead, a classifier, such as logistic regression, can be trained efficiently on the CPU.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">datasets</span> <span class="kn">import</span> <span class="n">load_dataset</span>

<span class="c1"># load the well-known 'rotten_tomatoes' dataset for sentiment analysis
</span><span class="n">data</span> <span class="o">=</span> <span class="nf">load_dataset</span><span class="p">(</span><span class="sh">"</span><span class="s">rotten_tomatoes</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># load the SentenceTransformer model for generating text embeddings
</span><span class="kn">from</span> <span class="n">sentence_transformers</span> <span class="kn">import</span> <span class="n">SentenceTransformer</span>
<span class="n">model</span> <span class="o">=</span> <span class="nc">SentenceTransformer</span><span class="p">(</span><span class="sh">"</span><span class="s">sentence-transformers/all-mpnet-base-v2</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># convert the text data from the train and test splits into embeddings
</span><span class="n">train_embeddings</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">train</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">],</span> <span class="n">show_progress_bar</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">test_embeddings</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">test</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">],</span> <span class="n">show_progress_bar</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegression</span>

<span class="c1"># train a logistic regression classifier on the generated training embeddings
#   initialize the logistic regression model with a random state for reproducibility
</span><span class="n">clf</span> <span class="o">=</span> <span class="nc">LogisticRegression</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
<span class="c1">#   train the classifier using the training embeddings and their corresponding labels
</span><span class="n">clf</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">train_embeddings</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">train</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">label</span><span class="sh">"</span><span class="p">])</span>

<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">classification_report</span>


<span class="k">def</span> <span class="nf">evaluate_performance</span><span class="p">(</span><span class="n">y_true</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">Create and print the classification report comparing true and predicted labels</span><span class="sh">'''</span>
    <span class="n">performance</span> <span class="o">=</span> <span class="nf">classification_report</span><span class="p">(</span>
        <span class="n">y_true</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">,</span> <span class="n">target_names</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">Negative Review</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Positive Review</span><span class="sh">"</span><span class="p">]</span>
    <span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">performance</span><span class="p">)</span>


<span class="c1"># predict the sentiment labels for the test embeddings using the trained classifier
</span><span class="n">y_pred</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">test_embeddings</span><span class="p">)</span>

<span class="c1"># evaluate the performance of the classifier on the test set
</span><span class="nf">evaluate_performance</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">test</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">label</span><span class="sh">"</span><span class="p">],</span> <span class="n">y_pred</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">                 precision    recall  f1-score   support

Negative Review       0.85      0.86      0.85       533
Positive Review       0.86      0.85      0.85       533

       accuracy                           0.85      1066
      macro avg       0.85      0.85      0.85      1066
   weighted avg       0.85      0.85      0.85      1066</span></code></pre>
</div>
</div>
</li>
<li>
<p>Zero-shot classification can be used on unlabeled data by leveraging the model&#8217;s pre-existing knowledge to predict labels based solely on their definitions.</p>
<div class="ulist">
<ul>
<li>
<p>In zero-shot classification, without any labeled examples, the model determines the relationship between input text and predefined candidate labels.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/zero-shot-classification.png" alt="zero shot classification" width="30%" height="30%">
</div>
<div class="title">Figure 37. In zero-shot classification, we have no labeled data, only the labels them‐ selves. The zero-shot model decides how the input is related to the candidate labels.</div>
</div>
</li>
<li>
<p>Zero-shot classification generates target labels without labeled data by describing and embedding labels (e.g., "negative movie review") and documents.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/zero-shot-classification-embedding.png" alt="zero shot classification embedding" width="30%" height="30%">
</div>
<div class="title">Figure 38. To embed the labels, we first need to give them a description, such as “a negative movie review.” This can then be embedded through sentence-transformers.</div>
</div>
</li>
<li>
<p>To assign labels to documents in zero-shot classification, cosine similarity, representing the cosine of the angle between the embedding vectors, can be applied to document-label embedding pairs.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">datasets</span> <span class="kn">import</span> <span class="n">load_dataset</span>

<span class="c1"># load the well-known 'rotten_tomatoes' dataset for sentiment analysis
</span><span class="n">data</span> <span class="o">=</span> <span class="nf">load_dataset</span><span class="p">(</span><span class="sh">'</span><span class="s">rotten_tomatoes</span><span class="sh">'</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">sentence_transformers</span> <span class="kn">import</span> <span class="n">SentenceTransformer</span>

<span class="c1"># load model
</span><span class="n">model</span> <span class="o">=</span> <span class="nc">SentenceTransformer</span><span class="p">(</span><span class="sh">'</span><span class="s">sentence-transformers/all-mpnet-base-v2</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># convert text to embeddings
</span><span class="n">train_embeddings</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">train</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">text</span><span class="sh">'</span><span class="p">],</span> <span class="n">show_progress_bar</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">test_embeddings</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">test</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">text</span><span class="sh">'</span><span class="p">],</span> <span class="n">show_progress_bar</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># create embeddings for our labels
</span><span class="n">label_embeddings</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">encode</span><span class="p">([</span><span class="sh">'</span><span class="s">A negative review</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">A positive review</span><span class="sh">'</span><span class="p">])</span>

<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">sklearn.metrics.pairwise</span> <span class="kn">import</span> <span class="n">cosine_similarity</span>
<span class="c1"># find the best matching label for each document using cosine similarity
</span><span class="n">sim_matrix</span> <span class="o">=</span> <span class="nf">cosine_similarity</span><span class="p">(</span><span class="n">test_embeddings</span><span class="p">,</span> <span class="n">label_embeddings</span><span class="p">)</span>
<span class="c1"># get the index of the label with the highest similarity score for each test embedding
</span><span class="n">y_pred</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">sim_matrix</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">classification_report</span>

<span class="k">def</span> <span class="nf">evaluate_performance</span><span class="p">(</span><span class="n">y_true</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">Create and print the classification report comparing true and predicted labels</span><span class="sh">'''</span>
    <span class="n">performance</span> <span class="o">=</span> <span class="nf">classification_report</span><span class="p">(</span>
        <span class="n">y_true</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">,</span> <span class="n">target_names</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">Negative Review</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Positive Review</span><span class="sh">'</span><span class="p">]</span>
    <span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">performance</span><span class="p">)</span>

<span class="nf">evaluate_performance</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">test</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">label</span><span class="sh">'</span><span class="p">],</span> <span class="n">y_pred</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">                 precision    recall  f1-score   support

Negative Review       0.78      0.77      0.78       533
Positive Review       0.77      0.79      0.78       533

       accuracy                           0.78      1066
      macro avg       0.78      0.78      0.78      1066
   weighted avg       0.78      0.78      0.78      1066</span></code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>From Wikipedia, the free encyclopedia</p>
</div>
<div class="paragraph">
<p>In data analysis, cosine similarity is a measure of similarity between two non-zero vectors defined in an inner product space. Cosine similarity is the cosine of the angle between the vectors; that is, it is the dot product of the vectors divided by the product of their lengths. It follows that the cosine similarity does not depend on the magnitudes of the vectors, but only on their angle. The cosine similarity always belongs to the interval <code>[−1, 1]</code>.</p>
</div>
</blockquote>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/cosine-similarity.svg" alt="{\displaystyle {\text{cosine similarity}}=S_{C}(A,B):=\cos(\theta )={\mathbf {A} \cdot \mathbf {B}  \over \|\mathbf {A} \|\|\mathbf {B} \|}={\frac {\sum \limits _{i=1}^{n}{A_{i}B_{i}}}{{\sqrt {\sum \limits _{i=1}^{n}{A_{i}^{2}}}}\cdot {\sqrt {\sum \limits _{i=1}^{n}{B_{i}^{2}}}}}},}" width="45%" height="45%">
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>  <span class="c1"># import the NumPy library for numerical operations
</span>
<span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>  <span class="c1"># create a NumPy array named A
</span><span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">])</span>  <span class="c1"># create a NumPy array named B
</span>
<span class="c1"># calculate the cosine similarity using the formula: (A dot B) / (||A|| * ||B||)
</span><span class="n">dot_product</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>  <span class="c1"># calculate the dot product of A and B
</span><span class="n">norm_A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">norm</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>  <span class="c1"># calculate the Euclidean norm (magnitude) of A
</span><span class="n">norm_B</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">norm</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>  <span class="c1"># calculate the Euclidean norm (magnitude) of B
</span><span class="n">cosine_similarity</span> <span class="o">=</span> <span class="n">dot_product</span> <span class="o">/</span> <span class="p">(</span><span class="n">norm_A</span> <span class="o">*</span> <span class="n">norm_B</span><span class="p">)</span>  <span class="c1"># calculate the cosine similarity
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">cosine_similarity</span><span class="p">)</span>  <span class="c1"># 0.9746318461970762</span></code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="generative-models">4.2. Generative Models</h3>
<div class="ulist">
<ul>
<li>
<p>Text classification with generative language models (like GPT) involves feeding input text to the model and having it generate text as output, in contrast to task-specific models that directly output a class label.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/classification-text-generation-models.png" alt="A task-specific model generates numerical values from sequences of tokens while a generative model generates sequences of tokens from sequences of tokens." width="45%" height="45%">
</div>
<div class="title">Figure 39. A task-specific model generates numerical values from sequences of tokens while a generative model generates sequences of tokens from sequences of tokens.</div>
</div>
</li>
<li>
<p>Generative models are generally trained on a wide variety of tasks and usually don&#8217;t inherently know how to handle specific tasks like classifying a movie review without explicit instructions.</p>
</li>
<li>
<p>Prompt engineering is the skill of crafting effective instructions, or prompts, to guide generative AI models towards producing desired and high-quality outputs for specific tasks, like text classification, which often involves iterative refinement of these prompts based on the model&#8217;s responses.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/prompt-engineering-iteration.png" alt="Prompt engineering allows prompts to be updated to improve the output generated by the model." width="35%" height="35%">
</div>
<div class="title">Figure 40. Prompt engineering allows prompts to be updated to improve the output generated by the model.</div>
</div>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="text-to-text-transfer-transformer">4.2.1. Text-to-Text Transfer Transformer</h4>
<div class="ulist">
<ul>
<li>
<p>Text-to-Text Transfer Transformer or T5, like the original Transformer, is a generative encoder-decoder sequence-to-sequence model, contrasting with encoder-only BERT and decoder-only GPT.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/t5-arch.png" alt="The T5 architecture is similar to the original Transformer model, a decoder- encoder architecture." width="35%" height="35%">
</div>
<div class="title">Figure 41. The T5 architecture is similar to the original Transformer model, a decoder- encoder architecture.</div>
</div>
<div class="ulist">
<ul>
<li>
<p>In the first step of training, namely pretraining, encoder-decoder models like T5 are initially trained with a masked language modeling objective that masks sets of tokens (or token spans), differing from BERT&#8217;s individual token masking approach.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/t5-pretraining.png" alt="t5 pretraining" width="35%" height="35%">
</div>
<div class="title">Figure 42. In the first step of training, namely pretraining, the T5 model needs to predict masks that could contain multiple tokens.</div>
</div>
</li>
<li>
<p>In the second step of training, namely fine-tuning the base model, instead of fine-tuning the model for one specific task, each task is converted to a sequence-to-sequence task and trained simultaneously.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/t5-fine-tuning.png" alt="t5 fine tuning" width="35%" height="35%">
</div>
<div class="title">Figure 43. By converting specific tasks to textual instructions, the T5 model can be trained on a variety of tasks during fine-tuning.</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">datasets</span> <span class="kn">import</span> <span class="n">load_dataset</span>

<span class="c1"># load the well-known 'rotten_tomatoes' dataset for sentiment analysis
</span><span class="n">data</span> <span class="o">=</span> <span class="nf">load_dataset</span><span class="p">(</span><span class="sh">'</span><span class="s">rotten_tomatoes</span><span class="sh">'</span><span class="p">)</span>

<span class="kn">import</span> <span class="n">torch</span>

<span class="c1"># determine the device to use for computation (GPU if available, otherwise CPU)
</span><span class="n">dev</span> <span class="o">=</span> <span class="sh">'</span><span class="s">cuda</span><span class="sh">'</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="sh">'</span><span class="s">cpu</span><span class="sh">'</span>

<span class="kn">from</span> <span class="n">transformers</span> <span class="kn">import</span> <span class="n">pipeline</span>

<span class="c1"># specify the path to the pre-trained FLAN-T5-small model for text-to-text generation
</span><span class="n">model_path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">google/flan-t5-small</span><span class="sh">'</span>
<span class="c1"># load the pre-trained text-to-text generation model into a pipeline for easy inference
</span><span class="n">pipe</span> <span class="o">=</span> <span class="nf">pipeline</span><span class="p">(</span>
    <span class="sh">'</span><span class="s">text2text-generation</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">model</span><span class="o">=</span><span class="n">model_path</span><span class="p">,</span>
    <span class="n">device</span><span class="o">=</span><span class="n">dev</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># prepare our data by creating a prompt and combining it with the text
</span><span class="n">prompt</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Is the following sentence positive or negative? </span><span class="sh">'</span>
<span class="c1"># apply the prompt to each example in the dataset's 'text' column to create a new 't5' column
</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">example</span><span class="p">:</span> <span class="p">{</span><span class="sh">'</span><span class="s">t5</span><span class="sh">'</span><span class="p">:</span> <span class="n">prompt</span> <span class="o">+</span> <span class="n">example</span><span class="p">[</span><span class="sh">'</span><span class="s">text</span><span class="sh">'</span><span class="p">]})</span>
<span class="c1"># data # uncomment to inspect the modified dataset
</span>
<span class="kn">from</span> <span class="n">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>  <span class="c1"># for progress bar during inference
</span><span class="kn">from</span> <span class="n">transformers.pipelines.pt_utils</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">KeyDataset</span><span class="p">,</span>
<span class="p">)</span>  <span class="c1"># utility to feed data to the pipeline
</span>
<span class="c1"># Run inference
</span><span class="n">y_pred</span> <span class="o">=</span> <span class="p">[]</span>
<span class="c1"># iterate through the test dataset using the pipeline for text generation
</span><span class="k">for</span> <span class="n">output</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span>
    <span class="nf">pipe</span><span class="p">(</span><span class="nc">KeyDataset</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">test</span><span class="sh">'</span><span class="p">],</span> <span class="sh">'</span><span class="s">t5</span><span class="sh">'</span><span class="p">)),</span> <span class="n">total</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">test</span><span class="sh">'</span><span class="p">])</span>
<span class="p">):</span>
    <span class="c1"># extract the generated text from the pipeline's output
</span>    <span class="n">text</span> <span class="o">=</span> <span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">generated_text</span><span class="sh">'</span><span class="p">]</span>
    <span class="c1"># classify the generated text as 0 (negative) if it equals 'negative', otherwise 1 (positive)
</span>    <span class="n">y_pred</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="mi">0</span> <span class="k">if</span> <span class="n">text</span> <span class="o">==</span> <span class="sh">'</span><span class="s">negative</span><span class="sh">'</span> <span class="k">else</span> <span class="mi">1</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">classification_report</span>


<span class="k">def</span> <span class="nf">evaluate_performance</span><span class="p">(</span><span class="n">y_true</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">Create and print the classification report comparing true and predicted labels</span><span class="sh">'''</span>
    <span class="n">performance</span> <span class="o">=</span> <span class="nf">classification_report</span><span class="p">(</span>
        <span class="n">y_true</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">,</span> <span class="n">target_names</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">Negative Review</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Positive Review</span><span class="sh">'</span><span class="p">]</span>
    <span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">performance</span><span class="p">)</span>


<span class="c1"># evaluate the performance of the model by comparing the true labels with the predicted labels
</span><span class="nf">evaluate_performance</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">test</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">label</span><span class="sh">'</span><span class="p">],</span> <span class="n">y_pred</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">                 precision    recall  f1-score   support

Negative Review       0.83      0.85      0.84       533
Positive Review       0.85      0.83      0.84       533

       accuracy                           0.84      1066
      macro avg       0.84      0.84      0.84      1066
   weighted avg       0.84      0.84      0.84      1066</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="chatgpt-for-classification">4.2.2. ChatGPT for Classification</h4>
<div class="paragraph">
<p>OpenAI shared <a href="https://openai.com/index/chatgpt/">an overview of the training procedure</a> that involved an important component, namely preference tuning.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>OpenAI first manually created the desired output to an input prompt (instruction data) and used that data to create a first variant of its model.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/chatgpt-instruction-tuning.png" alt="chatgpt instruction tuning" width="35%" height="35%">
</div>
<div class="title">Figure 44. Manually labeled data consisting of an instruction (prompt) and output was used to perform fine-tuning (instruction-tuning).</div>
</div>
</li>
<li>
<p>OpenAI used the resulting model to generate multiple outputs that were manually ranked from best to worst.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/chatgpt-preference-tuning.png" alt="chatgpt preference tuning" width="35%" height="35%">
</div>
<div class="title">Figure 45. Manually ranked preference data was used to generate the final model, ChatGPT.</div>
</div>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="python"><span class="kn">import</span> <span class="n">openai</span>

<span class="c1"># create client for interacting with OpenAI API
</span><span class="n">client</span> <span class="o">=</span> <span class="n">openai</span><span class="p">.</span><span class="nc">OpenAI</span><span class="p">(</span><span class="n">api_key</span><span class="o">=</span><span class="sh">'</span><span class="s">YOUR_KEY_HERE</span><span class="sh">'</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">chatgpt_generation</span><span class="p">(</span><span class="n">prompt</span><span class="p">,</span> <span class="n">document</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="sh">'</span><span class="s">gpt-3.5-turbo-0125</span><span class="sh">'</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">Generate an output based on a prompt and an input document using ChatGPT.</span><span class="sh">'''</span>
    <span class="c1"># define the message structure for the OpenAI API
</span>    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">'</span><span class="s">role</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">system</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">content</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">You are a helpful assistant.</span><span class="sh">'</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">'</span><span class="s">role</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">content</span><span class="sh">'</span><span class="p">:</span> <span class="n">prompt</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">[DOCUMENT]</span><span class="sh">'</span><span class="p">,</span> <span class="n">document</span><span class="p">)},</span>
    <span class="p">]</span>
    <span class="c1"># call the OpenAI Chat Completions API to get a response
</span>    <span class="n">chat_completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span> <span class="n">temperature</span><span class="o">=</span><span class="mi">0</span> <span class="c1"># temperature=0 for deterministic output
</span>    <span class="p">)</span>
    <span class="c1"># return the content of the first choice's message
</span>    <span class="k">return</span> <span class="n">chat_completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span>


<span class="c1"># define a prompt template as a base for sentiment classification
</span><span class="n">prompt</span> <span class="o">=</span> <span class="sh">'''</span><span class="s">Predict whether the following document is a positive or negative
movie review:
[DOCUMENT]
If it is positive return 1 and if it is negative return 0. Do not give any
other answers.
</span><span class="sh">'''</span>

<span class="c1"># predict the target for a single document using GPT
</span><span class="n">document</span> <span class="o">=</span> <span class="sh">'</span><span class="s">unpretentious , charming , quirky , original</span><span class="sh">'</span>
<span class="nf">chatgpt_generation</span><span class="p">(</span><span class="n">prompt</span><span class="p">,</span> <span class="n">document</span><span class="p">)</span>



<span class="kn">from</span> <span class="n">datasets</span> <span class="kn">import</span> <span class="n">load_dataset</span>

<span class="c1"># load the well-known 'rotten_tomatoes' dataset for sentiment analysis
</span><span class="n">data</span> <span class="o">=</span> <span class="nf">load_dataset</span><span class="p">(</span><span class="sh">'</span><span class="s">rotten_tomatoes</span><span class="sh">'</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>

<span class="c1"># generate predictions for all documents in the test set
</span><span class="n">predictions</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nf">chatgpt_generation</span><span class="p">(</span><span class="n">prompt</span><span class="p">,</span> <span class="n">doc</span><span class="p">)</span> <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">test</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">text</span><span class="sh">'</span><span class="p">])</span>
<span class="p">]</span>

<span class="c1"># convert the string predictions ('0' or '1') to integers
</span><span class="n">y_pred</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">pred</span><span class="p">)</span> <span class="k">for</span> <span class="n">pred</span> <span class="ow">in</span> <span class="n">predictions</span><span class="p">]</span>

<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">classification_report</span>


<span class="k">def</span> <span class="nf">evaluate_performance</span><span class="p">(</span><span class="n">y_true</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">Create and print the classification report comparing true and predicted labels</span><span class="sh">'''</span>
    <span class="n">performance</span> <span class="o">=</span> <span class="nf">classification_report</span><span class="p">(</span>
        <span class="n">y_true</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">,</span> <span class="n">target_names</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">Negative Review</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Positive Review</span><span class="sh">'</span><span class="p">]</span>
    <span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">performance</span><span class="p">)</span>


<span class="c1"># evaluate the performance of ChatGPT on the test set
</span><span class="nf">evaluate_performance</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">test</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">label</span><span class="sh">'</span><span class="p">],</span> <span class="n">y_pred</span><span class="p">)</span></code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="text-clustering-and-topic-modeling">5. Text Clustering and Topic Modeling</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Although supervised techniques, such as classification, have reigned supreme over the last few years in the industry, the potential of unsupervised techniques such as text clustering cannot be understated.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Text clustering aims to group similar texts based on their semantic content, meaning, and relationships.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/text-clustering.png" alt="Clustering unstructured textual data." width="35%" height="35%">
</div>
<div class="title">Figure 46. Clustering unstructured textual data.</div>
</div>
</li>
<li>
<p>Text clustering is also applied in topic modeling to uncover abstract topics within large textual datasets.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/topic-modeling.png" alt="Topic modeling is a way to give meaning to clusters of textual documents." width="35%" height="35%">
</div>
<div class="title">Figure 47. Topic modeling is a way to give meaning to clusters of textual documents.</div>
</div>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="arxivs-articles-computation-and-language">5.1. ArXiv’s Articles: Computation and Language</h3>
<div class="paragraph">
<p><a href="https://arxiv.org/">ArXiv</a> is an open-access platform for scholarly articles, mostly in the fields of <a href="https://huggingface.co/datasets/MaartenGr/arxiv_nlp">computer science</a>, mathematics, and physics.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">datasets</span> <span class="kn">import</span> <span class="n">load_dataset</span>

<span class="c1"># load the 'arxiv_nlp' dataset from Hugging Face Datasets library
</span><span class="n">dataset</span> <span class="o">=</span> <span class="nf">load_dataset</span><span class="p">(</span><span class="sh">"</span><span class="s">maartengr/arxiv_nlp</span><span class="sh">"</span><span class="p">)[</span><span class="sh">"</span><span class="s">train</span><span class="sh">"</span><span class="p">]</span>

<span class="c1"># extract metadata
</span><span class="n">abstracts</span> <span class="o">=</span> <span class="n">dataset</span><span class="p">[</span><span class="sh">"</span><span class="s">Abstracts</span><span class="sh">"</span><span class="p">]</span>
<span class="n">titles</span> <span class="o">=</span> <span class="n">dataset</span><span class="p">[</span><span class="sh">"</span><span class="s">Titles</span><span class="sh">"</span><span class="p">]</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="a-common-pipeline-for-text-clustering">5.2. A Common Pipeline for Text Clustering</h3>
<div class="paragraph">
<p>Text clustering enables the discovery of both known and unknown data patterns, providing an intuitive understanding of tasks like classification and their complexity, making it valuable beyond just exploratory data analysis.</p>
</div>
<div class="paragraph">
<p>Although there are many methods for text clustering, from graph-based neural networks to centroid-based clustering techniques, a common pipeline that has gained popularity involves three steps and algorithms:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Convert the input documents to embeddings with an embedding model.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/text-cluster-embedding-documents.png" alt="text cluster embedding documents" width="35%" height="35%">
</div>
<div class="title">Figure 48. Step 1: We convert documents to embeddings using an embedding model.</div>
</div>
</li>
<li>
<p>Reduce the dimensionality of embeddings with a dimensionality reduction model.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/dimensionality-compression.png" alt="dimensionality compression" width="35%" height="35%">
</div>
<div class="title">Figure 49. Step 2: The embeddings are reduced to a lower-dimensional space using dimensionality reduction.</div>
</div>
</li>
<li>
<p>Find groups of semantically similar documents with a cluster model.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/text-cluster-3-step.png" alt="Cluster the Reduced Embeddings" width="35%" height="35%">
</div>
<div class="title">Figure 50. Step 3: We cluster the documents using the embeddings with reduced dimensionality.</div>
</div>
</li>
</ol>
</div>
<div class="sect3">
<h4 id="embedding-documents">5.2.1. Embedding Documents</h4>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">sentence_transformers</span> <span class="kn">import</span> <span class="n">SentenceTransformer</span>

<span class="c1"># create an embedding model using a pre-trained Sentence Transformer model
</span><span class="n">embedding_model</span> <span class="o">=</span> <span class="nc">SentenceTransformer</span><span class="p">(</span><span class="sh">'</span><span class="s">thenlper/gte-small</span><span class="sh">'</span><span class="p">)</span> <i class="conum" data-value="1"></i><b>(1)</b>

<span class="c1"># generate embeddings for each abstract in the 'abstracts' list
</span><span class="n">embeddings</span> <span class="o">=</span> <span class="n">embedding_model</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="n">abstracts</span><span class="p">,</span> <span class="n">show_progress_bar</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># check the dimensions (shape) of the resulting embeddings
</span><span class="n">embeddings</span><span class="p">.</span><span class="n">shape</span> <span class="c1"># (44949, 384) <i class="conum" data-value="2"></i><b>(2)</b>
</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The <code>thenlper/gte-small</code> model is a more recent model that outperforms the previous model on clustering tasks and due to its small size is even faster for inference.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The <code>embeddings.shape</code> of <code>(44949, 384)</code> shows that there are 44,949 abstract embeddings, each with a dimensionality of 384.</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="reducing-the-dimensionality-of-embeddings">5.2.2. Reducing the Dimensionality of Embeddings</h4>
<div class="ulist">
<ul>
<li>
<p>Reducing the dimensionality of embeddings is essential before clustering high-dimensional data to simplify the representation and enhance clustering effectiveness.</p>
</li>
<li>
<p>Dimensionality reduction is a compression technique and that the underlying algorithm is not arbitrarily removing dimensions.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/dimensionality-reduction.png" alt="dimensionality reduction" width="35%" height="35%">
</div>
<div class="title">Figure 51. Dimensionality reduction allows data in high-dimensional space to be compressed to a lower-dimensional representation.</div>
</div>
</li>
<li>
<p>Well-known methods for dimensionality reduction are Principal Component Analysis (PCA) and Uniform Manifold Approximation and Projection (UMAP).</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">umap</span> <span class="kn">import</span> <span class="n">UMAP</span>

<span class="c1"># reduce the input embeddings from 384 dimensions to 5 dimensions using UMAP
</span><span class="n">umap_model</span> <span class="o">=</span> <span class="nc">UMAP</span><span class="p">(</span>
    <span class="c1"># generally, values between 5 and 10 work well to capture high-dimensional global structures.
</span>    <span class="n">n_components</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>   <span class="c1"># the number of dimensions to reduce to
</span>    <span class="n">min_dist</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span>     <span class="c1"># the effective minimum distance between embedded points
</span>    <span class="n">metric</span><span class="o">=</span><span class="sh">'</span><span class="s">cosine</span><span class="sh">'</span><span class="p">,</span>  <span class="c1"># the metric to use to compute distances in high dimensional space
</span>    <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span>  <span class="c1"># for reproducibility of the embedding
</span><span class="p">)</span>
<span class="c1"># fit and then transform the embeddings to the lower-dimensional space
</span><span class="n">reduced_embeddings</span> <span class="o">=</span> <span class="n">umap_model</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">embeddings</span><span class="p">)</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="cluster-the-reduced-embeddings">5.2.3. Cluster the Reduced Embeddings</h4>
<div class="ulist">
<ul>
<li>
<p>While k-means, a centroid-based algorithm needing a predefined number of clusters, is common, density-based algorithms are preferable when the number of clusters is unknown as they automatically determine the clusters and don&#8217;t require all data points to belong to one.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/centroid-based-and-density-based-algorithm.png" alt="centroid based and density based algorithm" width="35%" height="35%">
</div>
<div class="title">Figure 52. The clustering algorithm not only impacts how clusters are generated but also how they are viewed.</div>
</div>
</li>
<li>
<p>A common density-based model is Hierarchical Density-Based Spatial Clustering of Applications with Noise (HDBSCAN).</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">hdbscan</span> <span class="kn">import</span> <span class="n">HDBSCAN</span>

<span class="c1"># initialize and fit the HDBSCAN clustering model
</span><span class="n">hdbscan_model</span> <span class="o">=</span> <span class="nc">HDBSCAN</span><span class="p">(</span>
    <span class="c1"># the minimum number of samples in a group for it to be considered a cluster
</span>    <span class="n">min_cluster_size</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
    <span class="c1"># the metric to use when calculating pairwise distances between data points
</span>    <span class="n">metric</span><span class="o">=</span><span class="sh">'</span><span class="s">euclidean</span><span class="sh">'</span><span class="p">,</span>
    <span class="c1"># the method used to select clusters from the hierarchy ('eom' stands for Excess of Mass)
</span>    <span class="n">cluster_selection_method</span><span class="o">=</span><span class="sh">'</span><span class="s">eom</span><span class="sh">'</span>
<span class="p">).</span><span class="nf">fit</span><span class="p">(</span><span class="n">reduced_embeddings</span><span class="p">)</span> <span class="c1"># fit the HDBSCAN model to the reduced dimensionality embeddings
# extract the cluster labels assigned to each data point (-1 indicates noise)
</span><span class="n">clusters</span> <span class="o">=</span> <span class="n">hdbscan_model</span><span class="p">.</span><span class="n">labels_</span>
<span class="c1"># How many clusters did we generate? (excluding the noise cluster labeled -1)
</span><span class="n">num_clusters</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">clusters</span><span class="p">))</span> <span class="o">-</span> <span class="p">(</span><span class="mi">1</span> <span class="k">if</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">in</span> <span class="n">clusters</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="inspecting-the-clusters">5.2.4. Inspecting the Clusters</h4>
<div class="ulist">
<ul>
<li>
<p>To inspect each cluster manually and explore the assigned documents to get an understanding of its content.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="c1"># print first three documents in cluster 0
</span><span class="n">cluster</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="n">np</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">clusters</span> <span class="o">==</span> <span class="n">cluster</span><span class="p">)[</span><span class="mi">0</span><span class="p">][:</span><span class="mi">3</span><span class="p">]:</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">abstracts</span><span class="p">[</span><span class="n">index</span><span class="p">][:</span><span class="mi">300</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">... </span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span></code></pre>
</div>
</div>
</li>
<li>
<p>To visualize clustering approximation results without manual review, further reduce document embeddings to two dimensions for plotting on an 2D plane.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">from</span> <span class="n">umap</span> <span class="kn">import</span> <span class="n">UMAP</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="c1"># reduce 384-dimensional embeddings to two dimensions for easier visualization
</span><span class="n">reduced_embeddings</span> <span class="o">=</span> <span class="nc">UMAP</span><span class="p">(</span>
    <span class="n">n_components</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">min_dist</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span>
    <span class="n">metric</span><span class="o">=</span><span class="sh">"</span><span class="s">cosine</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span>
<span class="p">).</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">embeddings</span><span class="p">)</span>
<span class="c1"># create dataframe
</span><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">reduced_embeddings</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">x</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">])</span>
<span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">titles</span>
<span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">cluster</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">clusters</span><span class="p">]</span>
<span class="c1"># select outliers (cluster -1) and non-outliers (clusters)
</span><span class="n">to_plot</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df</span><span class="p">.</span><span class="n">cluster</span> <span class="o">!=</span> <span class="sh">"</span><span class="s">-1</span><span class="sh">"</span><span class="p">,</span> <span class="p">:]</span>
<span class="n">outliers</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df</span><span class="p">.</span><span class="n">cluster</span> <span class="o">==</span> <span class="sh">"</span><span class="s">-1</span><span class="sh">"</span><span class="p">,</span> <span class="p">:]</span>

<span class="c1"># plot outliers and non-outliers separately
</span><span class="n">plt</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">outliers</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">outliers</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="sh">"</span><span class="s">grey</span><span class="sh">"</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Outliers</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span>
    <span class="n">to_plot</span><span class="p">.</span><span class="n">x</span><span class="p">,</span>
    <span class="n">to_plot</span><span class="p">.</span><span class="n">y</span><span class="p">,</span>
    <span class="n">c</span><span class="o">=</span><span class="n">to_plot</span><span class="p">.</span><span class="n">cluster</span><span class="p">.</span><span class="nf">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">),</span>
    <span class="n">alpha</span><span class="o">=</span><span class="mf">0.6</span><span class="p">,</span>
    <span class="n">s</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">cmap</span><span class="o">=</span><span class="sh">"</span><span class="s">tab20b</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Clusters</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">axis</span><span class="p">(</span><span class="sh">"</span><span class="s">off</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span> <span class="c1"># Add a legend to distinguish outliers and clusters
</span><span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Visualization of Clustered Abstracts</span><span class="sh">"</span><span class="p">)</span> <span class="c1"># Add a title for context
</span><span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span></code></pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/text-clusters-outliers-visualization.png" alt="text clusters outliers visualization" width="35%" height="35%">
</div>
<div class="title">Figure 53. The generated clusters (colored) and outliers (gray) are represented as a 2D visualization.</div>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="from-text-clustering-to-topic-modeling">5.3. From Text Clustering to Topic Modeling</h3>
<div class="paragraph">
<p>Text clustering is a powerful tool for finding structure among large collections of documents, whereas topic modeling is the process of discovering underlying themes or latent topics within a collection of textual data, which typically involves finding a set of keywords or phrases that best represent and capture the meaning of the topic.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/textual-to-topics.png" alt="topics are represented by a number of keywords but can take other forms." width="35%" height="35%">
</div>
<div class="title">Figure 54. Traditionally, topics are represented by a number of keywords but can take other forms. Instead of labeling a topic as “sign language,” these techniques use keywords such as “sign,” “language,” and “translation” to describe the topic. As such, this does not give a single label to a topic and instead requires the user to understand the meaning of the topic through those keywords.</div>
</div>
<div class="sect3">
<h4 id="bertopic-a-modular-topic-modeling-framework">5.3.1. BERTopic: A Modular Topic Modeling Framework</h4>
<div class="paragraph">
<p>BERTopic is a topic modeling technique that leverages clusters of semantically similar texts to extract various types of topic representations.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/pipline-of-bertopic-clustering-topic-representation.png" alt="The full pipeline of BERTopic, roughly, consists of two steps, clustering and topic representation." width="35%" height="35%">
</div>
<div class="title">Figure 55. The full pipeline of BERTopic, roughly, consists of two steps, clustering and topic representation.</div>
</div>
<div class="ulist">
<ul>
<li>
<p>First, similar to text clustering, it embeds documents, reduces their dimensionality, and then clusters these embeddings to group semantically similar texts.
.The first part of BERTopic’s pipeline is to create clusters of semantically similar documents.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/bertopic-clustering.png" alt="embed documents, reduce dimensionality, and cluster the reduced embedding to create groups of semantically similar documents." width="35%" height="35%">
</div>
</div>
</li>
<li>
<p>Second, it models word distributions using a bag-of-words approach, counting word frequencies within documents to help extract the most frequent terms.</p>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>The bag-of-words approach does exactly what its name implies: it counts the number of times each word appears in a document, which can then be used to extract the most frequent words within that document.</p>
</div>
</blockquote>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/doc-bag-of-words.png" alt="A bag-of-words counts the number of times each word appears inside a document." width="35%" height="35%">
</div>
<div class="title">Figure 56. A bag-of-words counts the number of times each word appears inside a document.</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/gen-c-tf-word-counting.png" alt="Generating c-TF by counting the frequency of words per cluster instead of per document." width="35%" height="35%">
</div>
<div class="title">Figure 57. Generating c-TF by counting the frequency of words per cluster instead of per document.</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="prompt-engineering">6. Prompt Engineering</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Prompt engineering is the art and science of crafting effective prompts to guide large language models (LLMs) and other generative AI systems to produce desired and high-quality outputs. It involves understanding how these models interpret and respond to different phrasings, instructions, and contexts within a prompt to achieve specific goals, such as generating creative text, answering questions accurately, or performing tasks effectively.</p>
</div>
<div class="sect2">
<h3 id="using-text-generation-models">6.1. Using Text Generation Models</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">from</span> <span class="n">transformers</span> <span class="kn">import</span> <span class="n">AutoModelForCausalLM</span><span class="p">,</span> <span class="n">AutoTokenizer</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="c1"># determine the device
</span><span class="n">dev</span> <span class="o">=</span> <span class="sh">'</span><span class="s">cuda</span><span class="sh">'</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="sh">'</span><span class="s">cpu</span><span class="sh">'</span>

<span class="c1"># load model and tokenizer
</span><span class="n">model_path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">microsoft/Phi-4-mini-instruct</span><span class="sh">'</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span>
    <span class="n">model_path</span><span class="p">,</span>
    <span class="n">device_map</span><span class="o">=</span><span class="n">dev</span><span class="p">,</span>
    <span class="n">torch_dtype</span><span class="o">=</span><span class="sh">'</span><span class="s">auto</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">trust_remote_code</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="n">model_path</span><span class="p">)</span>

<span class="c1"># create a pipeline
</span><span class="n">pipe</span> <span class="o">=</span> <span class="nf">pipeline</span><span class="p">(</span>
    <span class="sh">'</span><span class="s">text-generation</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
    <span class="n">tokenizer</span><span class="o">=</span><span class="n">tokenizer</span><span class="p">,</span>
    <span class="n">return_full_text</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span>
    <span class="n">do_sample</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># prompt
</span><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">'</span><span class="s">role</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">content</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Create a funny joke about chickens.</span><span class="sh">'</span><span class="p">}]</span>

<span class="c1"># generate the output
</span><span class="n">output</span> <span class="o">=</span> <span class="nf">pipe</span><span class="p">(</span><span class="n">messages</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">generated_text</span><span class="sh">'</span><span class="p">])</span></code></pre>
</div>
</div>
<div class="sect3">
<h4 id="prompt-template">6.1.1. Prompt Template</h4>
<div class="ulist">
<ul>
<li>
<p>Under the hood, <code>transformers.pipeline</code> first converts the messages into a specific prompt template which was used during the training of the model.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># apply prompt template
</span><span class="n">prompt</span> <span class="o">=</span> <span class="n">pipe</span><span class="p">.</span><span class="n">tokenizer</span><span class="p">.</span><span class="nf">apply_chat_template</span><span class="p">(</span><span class="n">messages</span><span class="p">,</span> <span class="n">tokenize</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">&lt;s&gt;</span>&lt;|user|&gt;
<span class="gp">Create a funny joke about chickens.&lt;|end|&gt;</span><span class="w">
</span><span class="gp">&lt;|assistant|&gt;</span></code></pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/phi-3-prompt-template.png" alt="The template Phi-3 expects when interacting with the model." width="35%" height="35%">
</div>
<div class="title">Figure 58. The template Phi-3 expects when interacting with the model.</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="controlling-model-output">6.1.2. Controlling Model Output</h4>
<div class="ulist">
<ul>
<li>
<p>Each time an LLM needs to generate a token, it assigns a likelihood number to each possible token to generate different responses for the exact same prompt.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/next-token-likelihood-score.png" alt="The model chooses the next token to generate based on their likelihood scores." width="35%" height="35%">
</div>
<div class="title">Figure 59. The model chooses the next token to generate based on their likelihood scores.</div>
</div>
</li>
<li>
<p>The <code>temperature</code> controls the randomness or creativity of the text generated; a higher temperature increases creativity by making less probable tokens more likely, while a temperature of <code>0</code> results in deterministic output by always selecting the most probable token.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># using a high temperature
</span><span class="n">output</span> <span class="o">=</span> <span class="nf">pipe</span><span class="p">(</span><span class="n">messages</span><span class="p">,</span> <span class="n">do_sample</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">temperature</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">generated_text</span><span class="sh">"</span><span class="p">])</span></code></pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/temperature.png" alt="A higher temperature increases the likelihood that less probable tokens are generated and vice versa." width="35%" height="35%">
</div>
<div class="title">Figure 60. A higher temperature increases the likelihood that less probable tokens are generated and vice versa.</div>
</div>
</li>
<li>
<p>The <code>top-p</code>, or nucleus sampling, is a technique that controls the subset of tokens (the nucleus) an LLM considers for generation by including tokens until their cumulative probability reaches a specified threshold.</p>
<div class="paragraph">
<p>For instance, if <code>top_p</code> is set to <code>0.1</code>, the model will consider tokens until their cumulative probability reaches 10%, and if <code>top_p</code> is set to <code>1</code>, all tokens will be considered.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># using a high top_p
</span><span class="n">output</span> <span class="o">=</span> <span class="nf">pipe</span><span class="p">(</span><span class="n">messages</span><span class="p">,</span> <span class="n">do_sample</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">top_p</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">generated_text</span><span class="sh">"</span><span class="p">])</span></code></pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/top_p.png" alt="A higher top_p increases the number of tokens that can be selected to generate and vice versa." width="35%" height="35%">
</div>
<div class="title">Figure 61. A higher top_p increases the number of tokens that can be selected to generate and vice versa.</div>
</div>
</li>
<li>
<p>The <code>top_k</code> parameter directly limits the number of most probable tokens an LLM considers; setting it to 100 restricts the selection to only the top 100 tokens.</p>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 1. Use case examples when selecting values for temperature and top_p.</caption>
<colgroup>
<col style="width: 20%;">
<col style="width: 13.3333%;">
<col style="width: 6.6666%;">
<col style="width: 60.0001%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Example use case</th>
<th class="tableblock halign-left valign-top">temperature</th>
<th class="tableblock halign-left valign-top">top_p</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Brainstorming session</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">High</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">High</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">High randomness with large pool of potential tokens. The results will be highly diverse, often leading to very creative and unexpected results.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Email generation</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Low</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Low</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Deterministic output with high probable predicted tokens. This results in predictable, focused, and conservative outputs.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creative writing</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">High</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Low</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">High randomness with a small pool of potential tokens. This combination produces creative outputs but still remains coherent.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Translation</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Low</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">High</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Deterministic output with high probable predicted tokens. Produces coherent output with a wider range of vocabulary, leading to outputs with linguistic variety.</p></td>
</tr>
</tbody>
</table>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="prompt-engineering-2">6.2. Prompt Engineering</h3>
<div class="paragraph">
<p>Prompt engineering is the iterative process of designing effective prompts, including questions, statements, or instructions, to elicit useful and relevant outputs from LLMs through experimentation and optimization.</p>
</div>
<div class="paragraph">
<p>A prompt is the input provided to a large language model to elicit a desired response, which generally consists of multiple components such as instructions, data, and output indicators, and can be as complex as needed.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/basic-prompt.png" alt="Basic prompt" width="20%" height="20%">
</div>
<div class="title">Figure 62. A basic example of a prompt. No instruction is given so the LLM will simply try to complete the sentence.</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/instruction-prompt.png" alt="Instruction prompt" width="25%" height="25%">
</div>
<div class="title">Figure 63. Two components of a basic instruction prompt: the instruction itself and the data it refers to.</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/extend-prompt.png" alt="Extend instruction prompt" width="25%" height="25%">
</div>
<div class="title">Figure 64. Extending the prompt with an output indicator that allows for a specific output.</div>
</div>
</div>
<div class="sect2">
<h3 id="instruction-based-prompting">6.3. Instruction-Based Prompting</h3>
<div class="paragraph">
<p>Instruction-based prompting is a method of prompting where the primary goal is to have the LLM answer a specific question or resolve a certain task by providing it with specific instructions.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/prompt-example-common-use-cases.png" alt="Prompt examples of common use cases." width="35%" height="35%">
</div>
<div class="title">Figure 65. Prompt examples of common use cases. Notice how within a use case, the structure and location of the instruction can be changed.</div>
</div>
<div class="paragraph">
<p>Each of these tasks requires different prompting formats and more specifically, asking different questions of the LLM. A non-exhaustive list of the prompting techniques includes:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Specificity</p>
<div class="paragraph">
<p>Accurately describe the desired output, for example, instead of "Write a product description," ask "Write a product description in under two sentences using a formal tone."</p>
</div>
<div class="paragraph">
<p>Specificity is arguably the most important aspect; by restricting and specifying what the model should generate, there is a smaller chance of it generating something unrelated to a use case.</p>
</div>
</li>
<li>
<p>Hallucination</p>
<div class="paragraph">
<p>LLMs may generate incorrect information confidently, which is referred to as hallucination.</p>
</div>
<div class="paragraph">
<p>To reduce its impact, ask the LLM to only generate an answer if it knows the answer, and to respond with "I don’t know" if it does not know the answer.</p>
</div>
</li>
<li>
<p>Order</p>
<div class="paragraph">
<p>Either begin or end the prompt with the instruction.</p>
</div>
<div class="paragraph">
<p>Especially with long prompts, information in the middle is often forgotten.</p>
</div>
<div class="paragraph">
<p>LLMs tend to focus on information either at the beginning of a prompt (primacy effect) or the end of a prompt (recency effect).</p>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="advanced-prompt-engineering">6.4. Advanced Prompt Engineering</h3>
<div class="paragraph">
<p>While creating a good prompt might initially seem straightforward—just ask a specific question, be accurate, and add examples—prompting can quickly become complex and is often an underestimated aspect of effectively using LLMs.</p>
</div>
<div class="sect3">
<h4 id="prompt-components">6.4.1. Prompt Components</h4>
<div class="paragraph">
<p>A prompt generally consists of multiple components, such as instruction, data, and output indicators, and other advanced components that can quickly make a prompt quite complex.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/prompt-with-many-components.png" alt="An example of a complex prompt with many components." width="45%" height="45%">
</div>
<div class="title">Figure 66. An example of a complex prompt with many components.</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/iteration-over-modular-components-prompt.png" alt="Iterating over modular components is a vital part of prompt engineering." width="35%" height="35%">
</div>
<div class="title">Figure 67. Iterating over modular components is a vital part of prompt engineering.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># prompt components
</span><span class="n">persona</span> <span class="o">=</span> <span class="sh">'</span><span class="s">You are an expert in Large Language models. You excel at breaking down complex papers into digestible summaries.</span><span class="se">\n</span><span class="sh">'</span>
<span class="n">instruction</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Summarize the key findings of the paper provided.</span><span class="se">\n</span><span class="sh">'</span>
<span class="n">context</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Your summary should extract the most crucial points that can help researchers quickly understand the most vital information of the paper.</span><span class="se">\n</span><span class="sh">'</span>
<span class="n">data_format</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Create a bullet-point summary that outlines the method. Follow this up with a concise paragraph that encapsulates the main results.</span><span class="se">\n</span><span class="sh">'</span>
<span class="n">audience</span> <span class="o">=</span> <span class="sh">'</span><span class="s">The summary is designed for busy researchers that quickly need to grasp the newest trends in Large Language Models.</span><span class="se">\n</span><span class="sh">'</span>
<span class="n">tone</span> <span class="o">=</span> <span class="sh">'</span><span class="s">The tone should be professional and clear.</span><span class="se">\n</span><span class="sh">'</span>
<span class="n">text</span> <span class="o">=</span> <span class="sh">'</span><span class="s">MY TEXT TO SUMMARIZE</span><span class="sh">'</span>
<span class="n">data</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">Text to summarize: </span><span class="si">{</span><span class="n">text</span><span class="si">}</span><span class="sh">'</span>

<span class="c1"># the full prompt - remove and add pieces to view its impact on the generated output
</span><span class="n">query</span> <span class="o">=</span> <span class="n">persona</span> <span class="o">+</span> <span class="n">instruction</span> <span class="o">+</span> <span class="n">context</span> <span class="o">+</span> <span class="n">data_format</span> <span class="o">+</span> <span class="n">audience</span> <span class="o">+</span> <span class="n">tone</span> <span class="o">+</span> <span class="n">data</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="in-context-learning-providing-examples">6.4.2. In-Context Learning: Providing Examples</h4>
<div class="paragraph">
<p><em>In-context learning</em> (ICL) is a prompting technique that demonstrates the desired task to an LLM through direct examples, rather than solely describing it to provide the model with context to learn from within the prompt.</p>
</div>
<div class="paragraph">
<p>Zero-shot prompting does not leverage examples, one-shot prompts use a single example, and few-shot prompts use two or more examples.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/prompt-shots.png" alt="prompt shots" width="45%" height="45%">
</div>
<div class="title">Figure 68. An example of a complex prompt with many components.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># use a single example of using the made-up word in a sentence
</span><span class="n">one_shot_prompt</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">'</span><span class="s">role</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">content</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">A </span><span class="se">\'</span><span class="s">Gigamuru</span><span class="se">\'</span><span class="s"> is a type of Japanese musical instrument. An example of a sentence that uses the word Gigamuru is:</span><span class="sh">'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">'</span><span class="s">role</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">assistant</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">content</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">I have a Gigamuru that my uncle gave me as a gift. I love to play it at home.</span><span class="sh">'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">'</span><span class="s">role</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">content</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">To </span><span class="se">\'</span><span class="s">screeg</span><span class="se">\'</span><span class="s"> something is to swing a sword at it. An example of a sentence that uses the word screeg is:</span><span class="sh">'</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">tokenizer</span><span class="p">.</span><span class="nf">apply_chat_template</span><span class="p">(</span><span class="n">one_shot_prompt</span><span class="p">,</span> <span class="n">tokenize</span><span class="o">=</span><span class="bp">False</span><span class="p">))</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="txt">&lt;|user|&gt;A 'Gigamuru' is a type of Japanese musical instrument. An example of a sentence that uses the word Gigamuru is:&lt;|end|&gt;&lt;|assistant|&gt;I have a Gigamuru that my uncle gave me as a gift. I love to play it at home.&lt;|end|&gt;&lt;|user|&gt;To 'screeg' something is to swing a sword at it. An example of a sentence that uses the word screeg is:&lt;|end|&gt;&lt;|endoftext|&gt;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># generate the output
</span><span class="n">outputs</span> <span class="o">=</span> <span class="nf">pipe</span><span class="p">(</span><span class="n">one_shot_prompt</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">generated_text</span><span class="sh">"</span><span class="p">])</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">In the medieval fantasy novel, the knight would screeg his enemies with his gleaming sword.</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="chain-prompting-breaking-up-the-problem">6.4.3. Chain Prompting: Breaking up the Problem</h4>
<div class="paragraph">
<p>Prompt chaining is a technique that addresses complex tasks by breaking them down across multiple prompts, where the output of one prompt serves as the input for the subsequent prompt, creating a sequence of interactions that collectively solve the problem.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/chain-prompts-create-product.png" alt="Using a description of a product’s features, chain prompts to create a suitable name, slogan, and sales pitch." width="40%" height="40%">
</div>
<div class="title">Figure 69. Using a description of a product’s features, chain prompts to create a suitable name, slogan, and sales pitch.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># create name and slogan for a product
</span><span class="n">product_prompt</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Create a name and slogan for a chatbot that leverages LLMs.</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">]</span>
<span class="n">outputs</span> <span class="o">=</span> <span class="nf">pipe</span><span class="p">(</span><span class="n">product_prompt</span><span class="p">)</span>
<span class="n">product_description</span> <span class="o">=</span> <span class="n">outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">generated_text</span><span class="sh">"</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">product_description</span><span class="p">)</span>

<span class="c1"># based on a name and slogan for a product, generate a sales pitch
</span><span class="n">sales_prompt</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Generate a very short sales pitch for the following product: </span><span class="sh">'</span><span class="si">{</span><span class="n">product_description</span><span class="si">}</span><span class="sh">'"</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">]</span>
<span class="n">outputs</span> <span class="o">=</span> <span class="nf">pipe</span><span class="p">(</span><span class="n">sales_prompt</span><span class="p">)</span>
<span class="n">sales_pitch</span> <span class="o">=</span> <span class="n">outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">generated_text</span><span class="sh">"</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">sales_pitch</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Name: LexiBot

Slogan: "Unlock the Power of Language with LexiBot – Your AI Conversation Partner!"

Discover the future of communication with LexiBot – your AI conversation partner. Say goodbye to language barriers and hello to seamless, intelligent interactions. LexiBot is here to unlock the power of language, making every conversation more engaging and productive. Embrace the power of AI with LexiBot today!</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="reasoning-with-generative-models">6.5. Reasoning with Generative Models</h3>
<div class="paragraph">
<p>Reasoning is a core component of human intelligence and is often compared to the emergent behavior of LLMs that often resembles reasoning (through memorization of training data and pattern matching, rather than true reasoning).</p>
</div>
<div class="paragraph">
<p>Human reasoning can be broadly categorized into two systems.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>System 1 thinking represents an automatic, intuitive, and near-instantaneous process, which shares similarities with generative models that automatically generate tokens without any self-reflective behavior.</p>
</li>
<li>
<p>System 2 thinking, in contrast, is a conscious, slow, and logical process, akin to brainstorming and self-reflection.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The system 2 way of thinking, which tends to produce more thoughtful responses than system 1 thinking, would be emulated by giving a generative model the ability to mimic a form of self-reflection.</p>
</div>
<div class="sect3">
<h4 id="chain-of-thought-think-before-answering">6.5.1. Chain-of-Thought: Think Before Answering</h4>
<div class="paragraph">
<p>Chain-of-thought (CoT) prompting is a technique that allows large language models (LLMs) to solve a problem as a series of intermediate steps ("thoughts") before giving a final answer.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Although chain-of-thought is a great method for enhancing the output of a generative model, it does require one or more examples of reasoning in the prompt, which the user might not have access to.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/chain-of-thoughts-prompting.png" alt="Chain-of-thought prompting" width="45%" height="45%">
</div>
<div class="title">Figure 70. Chain-of-thought prompting uses reasoning examples to persuade the generative model to use reasoning in its answer.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># answering with chain-of-thought
</span><span class="n">cot_prompt</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Roger has 5 tennis balls. He buys 2 more cans of tennis balls. Each can has 3 tennis balls. How many tennis balls does he have now?</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Roger started with 5 balls. 2 cans of 3 tennis balls each is 6 tennis balls. 5 + 6 = 11. The answer is 11.</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">The cafeteria had 23 apples. If they used 20 to make lunch and bought 6 more, how many apples do they have?</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># generate the output
</span><span class="n">outputs</span> <span class="o">=</span> <span class="nf">pipe</span><span class="p">(</span><span class="n">cot_prompt</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">generated_text</span><span class="sh">"</span><span class="p">])</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">The cafeteria started with 23 apples. They used 20, so they had 23 - 20 = 3 apples left. Then they bought 6 more, so they now have 3 + 6 = 9 apples. The answer is 9.</span></code></pre>
</div>
</div>
</li>
<li>
<p>Instead of providing examples, zero-shot chain-of-thought allows a generative model to provide reasoning without explicit examples by directly prompting it for its thought process.</p>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Although the prompt “Let’s think step by step” can improve the output, you are not constrained by this exact formulation. Alterna‐ tives exist like “Take a deep breath and think step-by-step” and “Let’s work through this problem step-by-step.”</p>
</div>
</blockquote>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/cot-step-by-step.png" alt="Zero-shot chain-of-thought" width="35%" height="35%">
</div>
<div class="title">Figure 71. Chain-of-thought prompting without using examples. Instead, it uses the phrase “Let’s think step-by-step” to prime reasoning in its answer.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># zero-shot chain-of-thought prompt
</span><span class="n">zeroshot_cot_prompt</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">The cafeteria had 23 apples. If they used 20 to make lunch and bought 6 more, how many apples do they have? Let</span><span class="sh">'</span><span class="s">s think step-by-step.</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">]</span>

<span class="c1"># generate the output
</span><span class="n">outputs</span> <span class="o">=</span> <span class="nf">pipe</span><span class="p">(</span><span class="n">zeroshot_cot_prompt</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">generated_text</span><span class="sh">"</span><span class="p">])</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Sure, let's break it down step-by-step:

1. The cafeteria starts with 23 apples.
2. They use 20 apples to make lunch.
3. After using 20 apples, they have:
   23 apples - 20 apples = 3 apples left.
4. They then buy 6 more apples.
5. Adding the 6 new apples to the 3 apples they have left:
   3 apples + 6 apples = 9 apples.

So, the cafeteria now has 9 apples.</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="self-consistency-sampling-outputs">6.5.2. Self-Consistency: Sampling Outputs</h4>
<div class="paragraph">
<p>Self-consistency is a technique that reduces randomness in generative models by prompting them multiple times with the same input, using varied sampling parameters like <code>temperature</code> and <code>top_p</code> to enhance diversity, and selecting the majority result as the final answer for robustness.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/sampling-multiple-reasoning-paths.png" alt="Self-Consistency: Sampling Outputs" width="45%" height="45%">
</div>
<div class="title">Figure 72. By sampling from multiple reasoning paths, we can use majority voting to extract the most likely answer.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># zero-shot chain-of-thought prompt
</span><span class="n">zeroshot_cot_prompt</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">The cafeteria had 23 apples. If they used 20 to make lunch and bought 6 more, how many apples do they have? Let</span><span class="sh">'</span><span class="s">s think step-by-step.</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">]</span>

<span class="c1"># self-consistency settings
</span><span class="n">num_samples</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">temperature</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.7</span><span class="p">]</span>
<span class="n">top_p</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.8</span><span class="p">,</span> <span class="mf">0.85</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">]</span>


<span class="c1"># extract final numerical answers
</span><span class="k">def</span> <span class="nf">extract_answer</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">numbers</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">\d+</span><span class="sh">"</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>  <span class="c1"># find all numbers in the output
</span>    <span class="nf">return </span><span class="p">(</span>
        <span class="n">numbers</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">if</span> <span class="n">numbers</span> <span class="k">else</span> <span class="bp">None</span>
    <span class="p">)</span>  <span class="c1"># take the last number as the final answer
</span>

<span class="c1"># generate multiple answers
</span><span class="n">answers</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">num_samples</span><span class="p">):</span>
    <span class="n">outputs</span> <span class="o">=</span> <span class="nf">pipe</span><span class="p">(</span>
        <span class="n">zeroshot_cot_prompt</span><span class="p">,</span>
        <span class="n">do_sample</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">temperature</span><span class="o">=</span><span class="n">temperature</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="nf">len</span><span class="p">(</span><span class="n">temperature</span><span class="p">)],</span>
        <span class="n">top_p</span><span class="o">=</span><span class="n">top_p</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="nf">len</span><span class="p">(</span><span class="n">top_p</span><span class="p">)],</span>
    <span class="p">)</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">generated_text</span><span class="sh">"</span><span class="p">].</span><span class="nf">strip</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="se">\n</span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="sh">'</span>
    <span class="n">final_answer</span> <span class="o">=</span> <span class="nf">extract_answer</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">final_answer</span><span class="p">:</span>
        <span class="n">answers</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">final_answer</span><span class="p">)</span>

<span class="c1"># perform majority voting on numerical answers
</span><span class="n">most_common_answer</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">(</span><span class="n">answers</span><span class="p">).</span><span class="nf">most_common</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">generated answers:</span><span class="sh">"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">ans</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">answers</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">. </span><span class="si">{</span><span class="n">ans</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">final answer (majority vote): </span><span class="si">{</span><span class="n">most_common_answer</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Sure, let's break it down step-by-step:

1. The cafeteria starts with 23 apples.
2. They use 20 apples to make lunch.
3. After using 20 apples, they have:
   23 apples - 20 apples = 3 apples left.
4. They then buy 6 more apples.
5. Adding the 6 apples to the 3 apples they have left gives:
   3 apples + 6 apples = 9 apples.

So, the cafeteria

Sure, let's break it down step-by-step:

1. The cafeteria starts with 23 apples.
2. They use 20 apples to make lunch.
3. After using 20 apples, they have:
   23 apples - 20 apples = 3 apples left.
4. They then buy 6 more apples.
5. Adding the 6 new apples to the 3 apples they have left, they now have:
   3 apples + 6 apples = 9 apples.

Sure, let's break it down step by step:

1. The cafeteria starts with 23 apples.
2. They use 20 apples to make lunch.
   - 23 apples - 20 apples = 3 apples remaining.
3. They then buy 6 more apples.
   - 3 apples + 6 apples = 9 apples.

So, after these transactions, the cafeteria has 9 apples.

generated answers:
1. 9
2. 9
3. 9

final answer (majority vote): 9</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="tree-of-thought-exploring-intermediate-steps">6.5.3. Tree-of-Thought: Exploring Intermediate Steps</h4>
<div class="paragraph">
<p>Tree-of-Thought (ToT) is a problem-solving technique structuring reasoning as a decision tree that explores multiple potential solutions at each step, evaluates them, and branches forward with the most promising, similar to brainstorming, to enhance the final outcome.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/tree-of-thought.png" alt="Tree-of-though" width="30%" height="30%">
</div>
<div class="title">Figure 73. By leveraging a tree-based structure, generative models can generate inter‐ mediate thoughts to be rated. The most promising thoughts are kept and the lowest are pruned.</div>
</div>
<div class="paragraph">
<p>Tree-of-Thought excels at tasks requiring exploration of multiple paths, such as creative writing, but its reliance on numerous generative model calls can be slow.</p>
</div>
<div class="paragraph">
<p>A more efficient approach involves prompting the model to simulate a multi-expert discussion to reach a consensus, mimicking the ToT framework with a single call.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># zero-shot tree-of-thought prompt
</span><span class="n">zeroshot_tot_prompt</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">'</span><span class="s">role</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">content</span><span class="sh">'</span><span class="p">:</span> <span class="sh">"</span><span class="s">Imagine three different experts are answering this question. All experts will write down 1 step of their thinking, then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they</span><span class="sh">'</span><span class="s">re wrong at any point then they leave. The question is </span><span class="sh">'</span><span class="s">The cafeteria had 23 apples. If they used 20 to make lunch and bought 6 more, how many apples do they have?</span><span class="sh">'</span><span class="s"> Make sure to discuss the results.</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">]</span>

<span class="c1"># generate the output
</span><span class="n">outputs</span> <span class="o">=</span> <span class="nf">pipe</span><span class="p">(</span><span class="n">zeroshot_tot_prompt</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">generated_text</span><span class="sh">'</span><span class="p">])</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">**Expert 1:**
Step 1: Start with the initial number of apples, which is 23.

**Expert 2:**
Step 1: Subtract the apples used for lunch, which is 20, from the initial 23 apples. This leaves 3 apples.

**Expert 3:**
Step 1: Add the 6 apples that were bought to the remaining 3 apples. This results in 9 apples.

**Discussion:**
All three experts agree on the final result. The cafeteria started with 23 apples, used 20 for lunch, leaving them with 3 apples. Then, they bought 6 more apples, bringing the total to 9 apples. Therefore, the cafeteria now has 9 apples.</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="output-verification">6.6. Output Verification</h3>
<div class="paragraph">
<p>Systems and applications built with generative models might eventually end up in production. When that happens, it is important to verify and control the output of the model to prevent breaking the application and to create a robust generative AI application.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>By default, most generative models create free-form text without adhering to specific structures other than those defined by natural language.</p>
<div class="paragraph">
<p>Some use cases require their output to be structured in certain formats, like JSON.</p>
</div>
</li>
<li>
<p>Even allowing the model to generate structured output, it still has the capability to freely generate its content.</p>
<div class="paragraph">
<p>For instance, when a model is asked to output either one of two choices, it should not come up with a third.</p>
</div>
</li>
<li>
<p>Some open source generative models have no guardrails and will generate outputs that do not consider safety or ethical considerations.</p>
<div class="paragraph">
<p>For instance, use cases might require the output to be free of profanity, personally identifiable information (PII), bias, cultural stereotypes, etc.</p>
</div>
</li>
<li>
<p>Many use cases require the output to adhere to certain standards or performance.</p>
<div class="paragraph">
<p>The aim is to double-check whether the generated information is factually accurate, coherent, or free from hallucination.</p>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>Generally, there are three ways of controlling the output of a generative model:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Examples: Provide a number of examples of the expected output.</p>
</li>
<li>
<p>Grammar: Control the token selection process.</p>
</li>
<li>
<p>Fine-tuning: Tune a model on data that contains the expected output.</p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="providing-examples">6.6.1. Providing Examples</h4>
<div class="paragraph">
<p>A simple and straightforward method to fix the output is to provide the generative model with examples of what the output should look like.</p>
</div>
<div class="paragraph">
<p>The <em>few-shot learning</em> is a helpful technique that guides the output of the generative model, which can be generalized to guide the structure of the output as well.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
An important note here is that it is still up to the model whether it will adhere to your suggested format or not. Some models are better than others at following instructions.
</td>
</tr>
</table>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># zero-shot learning: providing no in-context examples
</span><span class="n">zeroshot_prompt</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">'</span><span class="s">role</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">content</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Create a character profile for an RPG game in JSON format.</span><span class="sh">'</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">]</span>

<span class="c1"># generate the output
</span><span class="n">outputs</span> <span class="o">=</span> <span class="nf">pipe</span><span class="p">(</span><span class="n">zeroshot_prompt</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">generated_text</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># one-shot learning: providing a single in-context example of the desired output structure
</span><span class="n">one_shot_template</span> <span class="o">=</span> <span class="sh">'''</span><span class="s">Create a short character profile for an RPG game. Make
sure to only use this format:
{
  </span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">A SHORT DESCRIPTION</span><span class="sh">"</span><span class="s">,
  </span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">THE CHARACTER</span><span class="sh">'</span><span class="s">S NAME</span><span class="sh">"</span><span class="s">,
  </span><span class="sh">"</span><span class="s">armor</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">ONE PIECE OF ARMOR</span><span class="sh">"</span><span class="s">,
  </span><span class="sh">"</span><span class="s">weapon</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">ONE OR MORE WEAPONS</span><span class="sh">"</span><span class="s">
}
</span><span class="sh">'''</span>
<span class="n">one_shot_prompt</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">'</span><span class="s">role</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">content</span><span class="sh">'</span><span class="p">:</span> <span class="n">one_shot_template</span><span class="p">}]</span>

<span class="c1"># generate the output
</span><span class="n">outputs</span> <span class="o">=</span> <span class="nf">pipe</span><span class="p">(</span><span class="n">one_shot_prompt</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">generated_text</span><span class="sh">'</span><span class="p">])</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">{
  "name": "Eldrin Shadowbane",
  "class": "Rogue",
  "level": 10,
  "race": "Elf",
  "background": "Eldrin was born into a noble family in the elven city of Luminara. He was trained in the arts of stealth and combat from a young age. However, Eldrin always felt a deep connection to the shadows and the mysteries of the night. He left his family to become a rogue
{
  "description": "A skilled archer with a mysterious past, known for their agility and precision.",
  "name": "Lyra Swiftarrow",
  "armor": "Leather bracers and a lightweight leather tunic",
  "weapon": "Longbow, throwing knives"
}</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="grammar-constrained-sampling">6.6.2. Grammar: Constrained Sampling</h4>
<div class="paragraph">
<p>Few-shot learning has a significant disadvantage: explicitly preventing certain output is not possible. Although the model is guided and given instructions, it might still not follow them completely.</p>
</div>
<div class="paragraph">
<p>Grammar-constrained sampling is a technique used during the token generation process of a Large Language Model (LLM) that enforces adherence to predefined grammars or rules when selecting the next token.</p>
</div>
<div class="paragraph">
<p>Instead, packages have been rapidly developed to constrain and validate the output of generative models, like <a href="https://github.com/guidance-ai/guidance">Guidance</a>, <a href="https://github.com/guardrails-ai/guardrails">Guardrails</a>, and <a href="https://github.com/eth-sri/lmql">LMQL</a>, which leverage generative models to validate their own output.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/llm-check-rules.png" alt="Use an LLM to check whether the output correctly follows our rules." width="35%" height="35%">
</div>
<div class="title">Figure 74. The generative models retrieve the output as new prompts and attempt to validate it based on a number of predefined guardrails.</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/llm-generate-pieces.png" alt="llm generate pieces" width="35%" height="35%">
</div>
<div class="title">Figure 75. Use an LLM to generate only the pieces of information we do not know beforehand.</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/constrain-token-selection.png" alt="constrain token selection" width="35%" height="35%">
</div>
<div class="title">Figure 76. Constrain the token selection to only three possible tokens: “positive,” “neutral,” and “negative.”</div>
</div>
<div class="paragraph">
<p>Like transformers, <a href="https://github.com/abetlen/llama-cpp-python">llama-cpp-python</a> is a library, generally used to efficiently load and use compressed models (quantization) in the GGUF format but can also be used to apply a JSON grammar.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">llama_cpp.llama</span> <span class="kn">import</span> <span class="n">Llama</span>

<span class="c1"># load the Phi-3 language model using the llama-cpp-python library
</span><span class="n">llm</span> <span class="o">=</span> <span class="n">Llama</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span>
    <span class="n">repo_id</span><span class="o">=</span><span class="sh">"</span><span class="s">microsoft/Phi-3-mini-4k-instruct-gguf</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">filename</span><span class="o">=</span><span class="sh">"</span><span class="s">*fp16.gguf</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">n_gpu_layers</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span>
    <span class="n">n_ctx</span><span class="o">=</span><span class="mi">2048</span><span class="p">,</span>
    <span class="n">verbose</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># generate output using the loaded language model for a chat completion task
</span><span class="n">output</span> <span class="o">=</span> <span class="n">llm</span><span class="p">.</span><span class="nf">create_chat_completion</span><span class="p">(</span>
    <span class="n">messages</span><span class="o">=</span><span class="p">[</span>
        <span class="p">{</span>
            <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Create a warrior for an RPG in JSON for mat.</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">],</span>
    <span class="n">response_format</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">json_object</span><span class="sh">"</span><span class="p">},</span> <span class="c1"># specify the response_format as a JSON
</span>    <span class="n">temperature</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
<span class="p">)[</span><span class="sh">'</span><span class="s">choices</span><span class="sh">'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">][</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">]</span>

<span class="kn">import</span> <span class="n">json</span>

<span class="c1"># check whether the output actually is JSON
</span><span class="n">json_output</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">output</span><span class="p">),</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">json_output</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">{
    "warrior": {
        "name": "Aldarion the Brave",
        "class": "Warrior",
        "level": 10,
        "attributes": {
            "strength": 18,
            "dexterity": 10,
            "constitution": 16,
            "intelligence": 8,
            "wisdom": 10,
            "charisma": 12
        },</span></code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="advanced-text-generation-techniques-and-tools">7. Advanced Text Generation Techniques and Tools</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://python.langchain.com/">LangChain</a> is a framework for developing applications powered by large language models (LLMs), which implements a standard interface for large language models and related technologies, such as embedding models and vector stores, and integrates with hundreds of providers.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/langchian.png" alt="LangChain" width="45%" height="45%">
</div>
<div class="title">Figure 77. LangChain is a complete framework for using LLMs. It has modular compo‐ nents that can be chained together to allow for complex LLM systems.</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Hugging Face models can be run locally through the <a href="https://python.langchain.com/docs/integrations/llms/huggingface_pipelines/"><code>HuggingFacePipeline</code></a> class.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">from</span> <span class="n">transformers</span> <span class="kn">import</span> <span class="n">AutoModelForCausalLM</span><span class="p">,</span> <span class="n">AutoTokenizer</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="c1"># determine the device
</span><span class="n">dev</span> <span class="o">=</span> <span class="sh">'</span><span class="s">cuda</span><span class="sh">'</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="sh">'</span><span class="s">cpu</span><span class="sh">'</span>

<span class="c1"># load model and tokenizer
</span><span class="n">model_id</span> <span class="o">=</span> <span class="sh">'</span><span class="s">microsoft/Phi-4-mini-instruct</span><span class="sh">'</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span>
    <span class="n">model_id</span><span class="p">,</span>
    <span class="n">torch_dtype</span><span class="o">=</span><span class="sh">'</span><span class="s">auto</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">device_map</span><span class="o">=</span><span class="n">dev</span><span class="p">,</span>
    <span class="n">trust_remote_code</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">)</span>

<span class="c1"># create a pipeline
</span><span class="n">pipe</span> <span class="o">=</span> <span class="nf">pipeline</span><span class="p">(</span>
    <span class="sh">"</span><span class="s">text-generation</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
    <span class="n">tokenizer</span><span class="o">=</span><span class="n">tokenizer</span><span class="p">,</span>
    <span class="n">return_full_text</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span>
    <span class="n">do_sample</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>

<span class="kn">from</span> <span class="n">langchain_huggingface.llms</span> <span class="kn">import</span> <span class="n">HuggingFacePipeline</span>

<span class="n">llm</span> <span class="o">=</span> <span class="nc">HuggingFacePipeline</span><span class="p">(</span><span class="n">pipeline</span><span class="o">=</span><span class="n">pipe</span><span class="p">)</span></code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="model-io-loading-quantized-models-with-langchain">7.1. Model I/O: Loading Quantized Models with LangChain</h3>
<div class="paragraph">
<p>A GGUF model represents a compressed version of its original counterpart through a method called quantization, which reduces the number of bits needed to represent the parameters of an LLM.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/pi-bit-representations.png" alt="pi with float 32-bit and float 16-bit representations" width="35%" height="35%">
</div>
<div class="title">Figure 78. Attempting to represent pi with float 32-bit and float 16-bit representations. Notice the lowered accuracy when we halve the number of bits.</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Bits, a series of 0s and 1s, represent values through binary encoding; more bits allow for a wider range of values but demand greater memory for storage.</p>
</li>
<li>
<p>Quantization reduces the number of bits required to represent the parameters of an LLM while attempting to maintain most of the original information.</p>
<div class="paragraph">
<p>Quantization comes with some loss in precision but often makes up for it as the model is much faster to run, requires less VRAM, and is often almost as accurate as the original.</p>
</div>
<div class="paragraph">
<p>Like rounding the time to the nearest minute ("14:16") instead of including seconds ("14:16 and 12 seconds"), quantization reduces the precision of a value without losing essential information.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>As a rule of thumb, look for at least 4-bit quantized models. These models have a good balance between compression and accuracy. Although it is possible to use 3-bit or even 2-bit quantized mod‐ els, the performance degradation becomes noticeable and it would instead be preferable to choose a smaller model with a higher precision.</p>
</div>
</blockquote>
</div>
</li>
<li>
<p>To download a specific bit-variant file (e.g., fp16) of the <a href="https://huggingface.co/microsoft/Phi-3-mini-4k-instruct-gguf">microsoft/Phi-3-mini-4k-instruct-gguf</a> model, which includes multiple files with different bit-variants (see the 'Files and versions' tab).</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="c"># download from the primary Hugging Face URL:</span>
wget https://huggingface.co/microsoft/Phi-3-mini-4k-instruct-gguf/resolve/main/Phi-3-mini-4k-instruct-fp16.gguf

<span class="c"># alternatively, download from the HF mirror:</span>
wget https://hf-mirror.com/microsoft/Phi-3-mini-4k-instruct-gguf/resolve/main/Phi-3-mini-4k-instruct-fp16.gguf</code></pre>
</div>
</div>
</li>
<li>
<p>Use <a href="https://python.langchain.com/docs/integrations/llms/llamacpp/">Llama.cpp</a> together with LangChain to load the GGUF file, and generate output.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># !wget https://huggingface.co/microsoft/Phi-3-mini-4k-instruct-gguf/resolve/main/Phi-3-mini-4k-instruct-fp16.gguf
# !pip install llama-cpp-python langchain_communit
</span><span class="kn">from</span> <span class="n">langchain_community.llms</span> <span class="kn">import</span> <span class="n">LlamaCpp</span>

<span class="c1"># initialize the LlamaCpp language model integration from Langchain
</span><span class="n">llm</span> <span class="o">=</span> <span class="nc">LlamaCpp</span><span class="p">(</span>
    <span class="c1"># path to the downloaded GGUF model file (ensure this file exists!)
</span>    <span class="n">model_path</span><span class="o">=</span><span class="sh">"</span><span class="s">Phi-3-mini-4k-instruct-fp16.gguf</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">n_gpu_layers</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span>
    <span class="n">max_tokens</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span>
    <span class="n">n_ctx</span><span class="o">=</span><span class="mi">2048</span><span class="p">,</span>
    <span class="n">seed</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span>
    <span class="n">verbose</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># invoke the language model with a prompt.
</span><span class="n">output</span> <span class="o">=</span> <span class="n">llm</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="sh">"</span><span class="s">Hi! My name is Maarten. What is 1 + 1?</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># no/meanless output! Phi-3 requires a specific prompt template.
</span><span class="nf">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="chains-extending-the-capabilities-of-llms">7.2. Chains: Extending the Capabilities of LLMs</h3>
<div class="paragraph">
<p>In Langchain, a "chain" is a core concept that goes beyond running LLMs in isolation, which involves connecting an LLM with other components like prompts, tools, or even other chains, to enhance its capabilities and create more complex systems.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/single-chain.png" alt="A single chain connects some modular component" width="25%" height="25%">
</div>
<div class="title">Figure 79. A single chain connects some modular component, like a prompt template or external memory, to the LLM.</div>
</div>
<div class="sect3">
<h4 id="a-single-link-in-the-chain-prompt-template">7.2.1. A Single Link in the Chain: Prompt Template</h4>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/prompt-template-chain.png" alt="A Single Link in the Chain" width="25%" height="25%">
</div>
<div class="title">Figure 80. By chaining a prompt template with an LLM, we only need to define the input prompts. The template will be constructed for you.</div>
</div>
<div class="paragraph">
<p>By chaining a prompt template with an LLM to get the output, only the user and system prompts need to be defined for each interaction, eliminating the need to repeatedly define the full prompt template.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/prompt-chain-phi3-example.png" alt="prompt chain phi3 example" width="25%" height="25%">
</div>
<div class="title">Figure 81. An example of a single chain using Phi-3’s template.</div>
</div>
<div class="paragraph">
<p>The template for Phi-3 is comprised of four main components:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>&lt;s&gt;</code> to indicate when the prompt starts</p>
</li>
<li>
<p><code>&lt;|user|&gt;</code> to indicate the start of the user’s prompt</p>
</li>
<li>
<p><code>&lt;|assistant|&gt;</code> to indicate the start of the model’s output</p>
</li>
<li>
<p><code>&lt;|end|&gt;</code> to indicate the end of either the prompt or the model’s output</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/phi3-prompt-template.png" alt="The prompt template Phi-3 expects." width="35%" height="35%">
</div>
<div class="title">Figure 82. The prompt template Phi-3 expects.</div>
</div>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">PromptTemplate</span>

<span class="c1"># create a prompt template with a placeholder for the user's input
</span><span class="n">template</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">&lt;s&gt;&lt;|user|&gt; {input_prompt}&lt;|end|&gt; &lt;|assistant|&gt;</span><span class="sh">"""</span>
<span class="n">prompt</span> <span class="o">=</span> <span class="nc">PromptTemplate</span><span class="p">(</span>
    <span class="n">template</span><span class="o">=</span><span class="n">template</span><span class="p">,</span>
    <span class="n">input_variables</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">input_prompt</span><span class="sh">"</span><span class="p">],</span>
<span class="p">)</span>

<span class="c1"># create a simple chain with the prompt template and the language model
</span><span class="n">basic_chain</span> <span class="o">=</span> <span class="n">prompt</span> <span class="o">|</span> <span class="n">llm</span>

<span class="c1"># invoke the chain with the input for the prompt template
</span><span class="n">output</span> <span class="o">=</span> <span class="n">basic_chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">input_prompt</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Hi! My name is Maarten. What is 1 + 1?</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">)</span>

<span class="c1"># the 'output' variable now contains the generated text
</span><span class="nf">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Hello Maarten! The answer to 1 + 1 is 2.</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="a-chain-with-multiple-prompts">7.2.2. A Chain with Multiple Prompts</h4>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/multiple-prompt-chain.png" alt="A Chain with Multiple Prompts" width="25%" height="25%">
</div>
<div class="title">Figure 83. With sequential chains, the output of a prompt is used as the input for the next prompt.</div>
</div>
<div class="paragraph">
<p>A multiple prompt chain, or sequential chain, processes a complex task by dividing it into a series of smaller, sequential subtasks, where each subtask utilizes a distinct prompt and LLM call, with the output from one step feeding directly into the input of the subsequent step.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/prompt-multiple-template-chain.png" alt="A Chain with Multiple Prompts Example" width="25%" height="25%">
</div>
<div class="title">Figure 84. An example to generate a story that has three components: a title, a description of the main character, a summary of the story. The output of the title prompt is used as the input of the character prompt. To generate the story, the output of all previous prompts is used.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">import</span> <span class="n">json</span>
<span class="kn">from</span> <span class="n">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">PromptTemplate</span>
<span class="kn">from</span> <span class="n">langchain_core.runnables</span> <span class="kn">import</span> <span class="n">RunnablePassthrough</span><span class="p">,</span> <span class="n">RunnableLambda</span>
<span class="kn">from</span> <span class="n">langchain.schema</span> <span class="kn">import</span> <span class="n">StrOutputParser</span>
<span class="kn">from</span> <span class="n">langchain_openai</span> <span class="kn">import</span> <span class="n">ChatOpenAI</span>

<span class="n">llm</span> <span class="o">=</span> <span class="nc">ChatOpenAI</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">'</span><span class="s">qwen2.5:0.5b-instruct</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">temperature</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span>
    <span class="n">max_tokens</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>
    <span class="n">timeout</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span>
    <span class="n">max_retries</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">base_url</span><span class="o">=</span><span class="sh">'</span><span class="s">http://localhost:11434/v1</span><span class="sh">'</span><span class="p">,</span> <span class="c1"># Ollama API
</span>    <span class="n">api_key</span><span class="o">=</span><span class="sh">'</span><span class="s">API-KEY</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">title_prompt</span> <span class="o">=</span> <span class="n">PromptTemplate</span><span class="p">.</span><span class="nf">from_template</span><span class="p">(</span>
    <span class="sh">"</span><span class="s">&lt;s&gt;&lt;|user|&gt;</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">Create a title for a story about {summary}.</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">Only return the title.</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">&lt;|end|&gt; &lt;|assistant|&gt;</span><span class="sh">"</span>
<span class="p">)</span>
<span class="n">character_prompt</span> <span class="o">=</span> <span class="n">PromptTemplate</span><span class="p">.</span><span class="nf">from_template</span><span class="p">(</span>
    <span class="sh">"</span><span class="s">&lt;s&gt;&lt;|user|&gt;</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">Describe the main character of a story about {summary} with the title {title}. </span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">Use only two sentences.</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">&lt;|end|&gt;&lt;|assistant|&gt;</span><span class="sh">"</span>
<span class="p">)</span>
<span class="n">story_prompt</span> <span class="o">=</span> <span class="n">PromptTemplate</span><span class="p">.</span><span class="nf">from_template</span><span class="p">(</span>
    <span class="sh">"</span><span class="s">&lt;s&gt;&lt;|user|&gt;</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">Create a story about {summary} with the title {title}.</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">The main character is: {character}. </span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">Only return the story and it cannot be longer than one paragraph.</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">&lt;|end|&gt;&lt;|assistant|&gt;</span><span class="sh">"</span>
<span class="p">)</span>

<span class="c1"># LCEL-style chain using Runnables
</span><span class="n">title_chain</span> <span class="o">=</span> <span class="p">(</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">summary</span><span class="sh">"</span><span class="p">:</span> <span class="nc">RunnablePassthrough</span><span class="p">()}</span> <span class="o">|</span> <span class="n">title_prompt</span> <span class="o">|</span> <span class="n">llm</span> <span class="o">|</span> <span class="nc">StrOutputParser</span><span class="p">()</span>
<span class="p">)</span>

<span class="n">character_chain</span> <span class="o">=</span> <span class="p">(</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">summary</span><span class="sh">"</span><span class="p">:</span> <span class="nc">RunnablePassthrough</span><span class="p">(),</span> <span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">:</span> <span class="n">title_chain</span><span class="p">}</span>
    <span class="o">|</span> <span class="n">character_prompt</span>
    <span class="o">|</span> <span class="n">llm</span>
    <span class="o">|</span> <span class="nc">StrOutputParser</span><span class="p">()</span>
<span class="p">)</span>

<span class="n">story_chain</span> <span class="o">=</span> <span class="p">(</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">summary</span><span class="sh">"</span><span class="p">:</span> <span class="nc">RunnablePassthrough</span><span class="p">(),</span>
        <span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">:</span> <span class="n">title_chain</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">character</span><span class="sh">"</span><span class="p">:</span> <span class="n">character_chain</span><span class="p">,</span>
    <span class="p">}</span>
    <span class="o">|</span> <span class="n">story_prompt</span>
    <span class="o">|</span> <span class="n">llm</span>
    <span class="o">|</span> <span class="nc">StrOutputParser</span><span class="p">()</span>
<span class="p">)</span>

<span class="n">aggregate_chain</span> <span class="o">=</span> <span class="nc">RunnableLambda</span><span class="p">(</span>
    <span class="k">lambda</span> <span class="n">inputs</span><span class="p">:</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">summary</span><span class="sh">"</span><span class="p">:</span> <span class="n">inputs</span><span class="p">[</span><span class="sh">"</span><span class="s">summary</span><span class="sh">"</span><span class="p">],</span>
        <span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">:</span> <span class="n">inputs</span><span class="p">[</span><span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">],</span>
        <span class="sh">"</span><span class="s">character</span><span class="sh">"</span><span class="p">:</span> <span class="n">inputs</span><span class="p">[</span><span class="sh">"</span><span class="s">character</span><span class="sh">"</span><span class="p">],</span>
        <span class="sh">"</span><span class="s">story</span><span class="sh">"</span><span class="p">:</span> <span class="n">inputs</span><span class="p">[</span><span class="sh">"</span><span class="s">story</span><span class="sh">"</span><span class="p">],</span>
    <span class="p">}</span>
<span class="p">)</span>

<span class="n">final_chain</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">summary</span><span class="sh">"</span><span class="p">:</span> <span class="nc">RunnablePassthrough</span><span class="p">(),</span>
    <span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">:</span> <span class="n">title_chain</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">character</span><span class="sh">"</span><span class="p">:</span> <span class="n">character_chain</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">story</span><span class="sh">"</span><span class="p">:</span> <span class="n">story_chain</span><span class="p">,</span>
<span class="p">}</span> <span class="o">|</span> <span class="n">aggregate_chain</span>

<span class="n">output</span> <span class="o">=</span> <span class="n">final_chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">({</span><span class="sh">"</span><span class="s">summary</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">a girl that lost her mother</span><span class="sh">"</span><span class="p">})</span>
<span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">{
  "summary": {
    "summary": "a girl that lost her mother"
  },
  "title": "\"Lost Mother Girl\"",
  "character": "In the story, the main character named Lily, who was born to an ordinary family, unexpectedly finds herself the daughter of a rich individual after losing her mother. She navigates this new reality with courage and strength, learning valuable lessons about empathy, perseverance, and the power of resilience.",
  "story": "In the quiet village where Linxue lived, her mother had been gone for many years. As an only child, she often felt distant from the other children in the village. One day,</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="memory-helping-llms-to-remember-conversations">7.3. Memory: Helping LLMs to Remember Conversations</h3>
<div class="paragraph">
<p>Memory can be added to the LLM chain using methods like conversation buffers and conversation summaries to make chat models stateful to remember previous conversations.</p>
</div>
<div class="sect3">
<h4 id="conversation-buffer">7.3.1. Conversation Buffer</h4>
<div class="paragraph">
<p>In Langchain, <code>ConversationBufferMemory</code> provides an intuitive way to give LLMs memory by updating the prompt to include the full chat history.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/conversation-buffer.png" alt="Conversation Buffer" width="35%" height="35%">
</div>
<div class="title">Figure 85. We can remind an LLM of what previously happened by simply appending the entire conversation history to the input prompt.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">PromptTemplate</span>

<span class="n">template</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">&lt;s&gt;&lt;|user|&gt;Current conversation:{chat_history}

{input}&lt;|end|&gt;
&lt;|assistant|&gt;</span><span class="sh">"""</span>
<span class="n">prompt</span> <span class="o">=</span> <span class="n">PromptTemplate</span><span class="p">.</span><span class="nf">from_template</span><span class="p">(</span><span class="n">template</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">langchain.memory</span> <span class="kn">import</span> <span class="n">ConversationBufferMemory</span>

<span class="n">memory</span> <span class="o">=</span> <span class="nc">ConversationBufferMemory</span><span class="p">(</span><span class="n">memory_key</span><span class="o">=</span><span class="sh">"</span><span class="s">chat_history</span><span class="sh">"</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">langchain.chains.llm</span> <span class="kn">import</span> <span class="n">LLMChain</span>

<span class="n">llm_chain</span> <span class="o">=</span> <span class="nc">LLMChain</span><span class="p">(</span><span class="n">prompt</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span> <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span> <span class="n">memory</span><span class="o">=</span><span class="n">memory</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">llm_chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">({</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Hi! My name is Maarten. What is 1 + 1?</span><span class="sh">"</span><span class="p">})</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">{'input': 'Hi! My name is Maarten. What is 1 + 1?',
 'chat_history': '',
 'text': 'Nice to meet you, Maarten!\n\nThe answer to 1 + 1 is... 2!'}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">llm_chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">({</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">What is my name?</span><span class="sh">"</span><span class="p">})</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">{'input': 'What is my name?',
 'chat_history': 'Human: Hi! My name is Maarten. What is 1 + 1?\nAI: Nice to meet you, Maarten!\n\nThe answer to 1 + 1 is... 2!',
 'text': 'Nice to meet you too, Maarten! Your name is indeed Maarten. Would you like to ask another question or have a conversation?'}</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="windowed-conversation-buffer">7.3.2. Windowed Conversation Buffer</h4>
<div class="paragraph">
<p>In LangChain, <code>ConversationBufferWindowMemory</code> decides how many the last <em>k</em> conversations are passed to the input prompt.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">PromptTemplate</span>

<span class="n">template</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">&lt;s&gt;&lt;|user|&gt;Current conversation:{chat_history}

{input}&lt;|end|&gt;
&lt;|assistant|&gt;</span><span class="sh">"""</span>
<span class="n">prompt</span> <span class="o">=</span> <span class="n">PromptTemplate</span><span class="p">.</span><span class="nf">from_template</span><span class="p">(</span><span class="n">template</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">langchain.memory</span> <span class="kn">import</span> <span class="n">ConversationBufferWindowMemory</span>

<span class="n">memory</span> <span class="o">=</span> <span class="nc">ConversationBufferWindowMemory</span><span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">memory_key</span><span class="o">=</span><span class="sh">"</span><span class="s">chat_history</span><span class="sh">"</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">langchain.chains.llm</span> <span class="kn">import</span> <span class="n">LLMChain</span>

<span class="n">llm_chain</span> <span class="o">=</span> <span class="nc">LLMChain</span><span class="p">(</span><span class="n">prompt</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span> <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span> <span class="n">memory</span><span class="o">=</span><span class="n">memory</span><span class="p">)</span>

<span class="n">llm_chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span>
    <span class="nb">input</span><span class="o">=</span><span class="sh">"</span><span class="s">Hi! My name is Maarten and I am 33 years old. What is 1 + 1?</span><span class="sh">"</span>
<span class="p">)</span>
<span class="n">llm_chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="nb">input</span><span class="o">=</span><span class="sh">"</span><span class="s">What is 3 + 3?</span><span class="sh">"</span><span class="p">)</span>
<span class="n">llm_chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">({</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">What is my name?</span><span class="sh">"</span><span class="p">})</span>
<span class="n">llm_chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">({</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">What is my age?</span><span class="sh">"</span><span class="p">})</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="conversation-summary">7.3.3. Conversation Summary</h4>
<div class="paragraph">
<p>In LangChain, <code>ConversationSummaryMemory</code> summarizes the entire conversation history (typically using an external LLM) before providing it to the input prompt.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/conversation-summary.png" alt="Conversation Summary" width="35%" height="35%">
</div>
<div class="title">Figure 86. Instead of passing the conversation history directly to the prompt, we use another LLM to summarize it first.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">PromptTemplate</span>

<span class="n">template</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">&lt;s&gt;&lt;|user|&gt;Current conversation:{chat_history}

{input}&lt;|end|&gt;
&lt;|assistant|&gt;</span><span class="sh">"""</span>
<span class="n">prompt</span> <span class="o">=</span> <span class="n">PromptTemplate</span><span class="p">.</span><span class="nf">from_template</span><span class="p">(</span><span class="n">template</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">langchain.memory</span> <span class="kn">import</span> <span class="n">ConversationSummaryMemory</span>

<span class="c1"># prepare a summarization template as the summarization prompt
</span><span class="n">summary_prompt_template</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">&lt;s&gt;&lt;|user|&gt;Summarize the conversations and update
with the new lines.
Current summary:
{summary}
new lines of conversation:
{new_lines}
New summary:&lt;|end|&gt;
&lt;|assistant|&gt;</span><span class="sh">"""</span>
<span class="n">summary_prompt</span> <span class="o">=</span> <span class="n">PromptTemplate</span><span class="p">.</span><span class="nf">from_template</span><span class="p">(</span><span class="n">template</span><span class="o">=</span><span class="n">summary_prompt_template</span><span class="p">)</span>

<span class="n">memory</span> <span class="o">=</span> <span class="nc">ConversationSummaryMemory</span><span class="p">(</span>
    <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span> <span class="n">memory_key</span><span class="o">=</span><span class="sh">"</span><span class="s">chat_history</span><span class="sh">"</span><span class="p">,</span> <span class="n">prompt</span><span class="o">=</span><span class="n">summary_prompt</span>
<span class="p">)</span>

<span class="kn">from</span> <span class="n">langchain.chains.llm</span> <span class="kn">import</span> <span class="n">LLMChain</span>

<span class="n">llm_chain</span> <span class="o">=</span> <span class="nc">LLMChain</span><span class="p">(</span><span class="n">prompt</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span> <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span> <span class="n">memory</span><span class="o">=</span><span class="n">memory</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">llm_chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">({</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Hi! My name is Maarten. What is 1 + 1?</span><span class="sh">"</span><span class="p">})</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">{'input': 'Hi! My name is Maarten. What is 1 + 1?',
 'chat_history': '',
 'text': 'Hi Maarten!\n\nThe answer to 1 + 1 is 2.'}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">llm_chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">({</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">What is my name?</span><span class="sh">"</span><span class="p">})</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">{'input': 'What is my name?',
 'chat_history': "Here is the updated summary:\n\nCurrent summary:\n\n* Human: Hi! My name is Maarten. What is 1 + 1?\n* AI: Hi Maarten!\n* Answer: The answer to 1 + 1 is 2.\n\nNew lines of conversation:\nHuman: That's correct, what's 2 * 2?\nAI: Let me calculate... The answer to 2 * 2 is 4.",
 'text': 'Hi Maarten! Your name was mentioned earlier in our conversation. You said "Hi! My name is Maarten." What can I help you with next?'}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">llm_chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">({</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">What was the first question I asked?</span><span class="sh">"</span><span class="p">})</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">{'input': 'What was the first question I asked?',
 'chat_history': 'Here\'s the updated summary:\n\nCurrent summary:\n\n* Human: Hi! My name is Maarten. What is 1 + 1?\n* AI: Hi Maarten!\n* Answer: The answer to 1 + 1 is 2.\n* Human: That\'s correct, what\'s 2 * 2?\n* AI: Let me calculate... The answer to 2 * 2 is 4.\n* Human: What is my name?\n* AI: Hi Maarten! Your name was mentioned earlier in our conversation. You said "Hi! My name is Maarten." What can I help you with next?',
 'text': 'The first question you asked was: "what\'s 1 + 1?"'}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># check what the summary is thus far
</span><span class="n">memory</span><span class="p">.</span><span class="nf">load_memory_variables</span><span class="p">({})</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">{'chat_history': 'Here is the updated summary:\n\nCurrent summary:\n\n* Human: Hi! My name is Maarten. What is 1 + 1?\n* AI: Hi Maarten!\n* Answer: The answer to 1 + 1 is 2.\n* Human: That\'s correct, what\'s 2 * 2?\n* AI: Let me calculate... The answer to 2 * 2 is 4.\n* Human: What is my name?\n* AI: Hi Maarten! Your name was mentioned earlier in our conversation. You said "Hi! My name is Maarten." What can I help you with next?\n* Human: What was the first question I asked?\n* AI: The first question you asked was: "what\'s 1 + 1?"'}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="agents-creating-a-system-of-llms">7.4. Agents: Creating a System of LLMs</h3>
<div class="paragraph">
<p><a href="https://python.langchain.com/docs/concepts/agents/">Agents</a> are systems that take a high-level task and use an LLM as a reasoning engine to decide what actions to take and execute those actions.</p>
</div>
<div class="paragraph">
<p>ReAct (Reasoning and Acting) is a cognitive framework for language models that interleaves reasoning ("Thoughts") and acting ("Actions") with observations, allowing the model to dynamically plan, execute, and learn from its interactions with external tools or environments to solve complex tasks.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/react-prompt-template-example.png" alt="An example of a ReAct prompt template." width="35%" height="35%">
</div>
<div class="title">Figure 87. An example of a ReAct prompt template.</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/two-cycles-react-pipeline-example.png" alt="An example of two cycles in a ReAct pipeline." width="45%" height="45%">
</div>
<div class="title">Figure 88. An example of two cycles in a ReAct pipeline.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_openai</span> <span class="kn">import</span> <span class="n">ChatOpenAI</span>

<span class="c1"># an LLM that is powerful enough to properly follow complex instructions
</span><span class="n">llm</span> <span class="o">=</span> <span class="nc">ChatOpenAI</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">mistral:7b-instruct</span><span class="sh">"</span><span class="p">,</span> <span class="c1"># "llama3.1:8b", # "llama3.2:1b",
</span>    <span class="n">temperature</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span>
    <span class="n">max_tokens</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>
    <span class="n">base_url</span><span class="o">=</span><span class="sh">"</span><span class="s">http://localhost:11434/v1</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">api_key</span><span class="o">=</span><span class="sh">"</span><span class="s">API-KEY</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>

<span class="kn">from</span> <span class="n">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">PromptTemplate</span>

<span class="c1"># create the ReAct template
</span><span class="n">react_template</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">Answer the following questions as best you can. You have
access to the following tools:

{tools}

Use the following format:

Question: the input question you must answer
Thought: you should always think about what to do
Agents: Creating a System of LLMs
Action: the action to take, should be one of [{tool_names}]
Action Input: the input to the action
Observation: the result of the action
</span><span class="gp">...</span> <span class="p">(</span><span class="n">this</span> <span class="n">Thought</span><span class="o">/</span><span class="n">Action</span><span class="o">/</span><span class="n">Action</span> <span class="n">Input</span><span class="o">/</span><span class="n">Observation</span> <span class="n">can</span> <span class="n">repeat</span> <span class="n">N</span> <span class="n">times</span><span class="p">)</span>
<span class="n">Thought</span><span class="p">:</span> <span class="n">I</span> <span class="n">now</span> <span class="n">know</span> <span class="n">the</span> <span class="n">final</span> <span class="n">answer</span>
<span class="n">Final</span> <span class="n">Answer</span><span class="p">:</span> <span class="n">the</span> <span class="n">final</span> <span class="n">answer</span> <span class="n">to</span> <span class="n">the</span> <span class="n">original</span> <span class="nb">input</span> <span class="n">question</span>

<span class="s">Begin!

Question: {input}
Thought:{agent_scratchpad}</span><span class="sh">"""</span>

<span class="n">prompt</span> <span class="o">=</span> <span class="nc">PromptTemplate</span><span class="p">(</span>
    <span class="n">template</span><span class="o">=</span><span class="n">react_template</span><span class="p">,</span>
    <span class="n">input_variables</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_names</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">agent_scratchpad</span><span class="sh">"</span><span class="p">],</span>
<span class="p">)</span>

<span class="kn">from</span> <span class="n">langchain.agents</span> <span class="kn">import</span> <span class="n">load_tools</span><span class="p">,</span> <span class="n">Tool</span>
<span class="kn">from</span> <span class="n">langchain_community.tools.ddg_search.tool</span> <span class="kn">import</span> <span class="n">DuckDuckGoSearchResults</span>

<span class="n">search</span> <span class="o">=</span> <span class="nc">DuckDuckGoSearchResults</span><span class="p">()</span>
<span class="n">search_tool</span> <span class="o">=</span> <span class="nc">Tool</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">duckduck</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">A web search engine. Use this to as a search engine for general queries.</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">func</span><span class="o">=</span><span class="n">search</span><span class="p">.</span><span class="n">run</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">tools</span> <span class="o">=</span> <span class="nf">load_tools</span><span class="p">([</span><span class="sh">"</span><span class="s">llm-math</span><span class="sh">"</span><span class="p">],</span> <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">)</span>
<span class="n">tools</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">search_tool</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">langchain.agents</span> <span class="kn">import</span> <span class="n">AgentExecutor</span><span class="p">,</span> <span class="n">create_react_agent</span>

<span class="n">agent</span> <span class="o">=</span> <span class="nf">create_react_agent</span><span class="p">(</span><span class="n">llm</span><span class="p">,</span> <span class="n">tools</span><span class="p">,</span> <span class="n">prompt</span><span class="p">)</span>
<span class="n">agent_executor</span> <span class="o">=</span> <span class="nc">AgentExecutor</span><span class="p">(</span>
    <span class="n">agent</span><span class="o">=</span><span class="n">agent</span><span class="p">,</span>
    <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
    <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">handle_parsing_errors</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">max_iterations</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
<span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">agent_executor</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">What is 123 + 456?</span><span class="sh">"</span>
    <span class="p">}</span>
<span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">&gt;</span><span class="w"> </span>Entering new AgentExecutor chain...
<span class="go"> To solve this, I will use the Calculator tool. The input for the calculator will be the equation "123 + 456".

Action: Calculator
Action Input: "123 + 456"Answer: 579 I now know the final answer.
Final Answer: The result of the calculation (123 + 456) is 579.

</span><span class="gp">&gt;</span><span class="w"> </span>Finished chain.
<span class="go">
{'input': 'What is 123 + 456?',
 'output': 'The result of the calculation (123 + 456) is 579.'}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">agent_executor</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">What is the current price of a MacBook Pro in USD? How much would it cost in EUR if the exchange rate is 0.85 EUR for 1 USD.</span><span class="sh">"</span>
    <span class="p">}</span>
<span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">&gt;</span><span class="w"> </span>Entering new AgentExecutor chain...
<span class="go"> I need to find the current price of a MacBook Pro and then convert that price from USD to EUR using the given exchange rate.

Agents: Calculator, duckduck
Action: duckduck
</span><span class="gp">Action Input: What is the current price of a MacBook Pro in USD?snippet: Apple resellers are hosting a variety of MacBook Pro sales that discount current M4, M4 Pro and M4 Max 14-inch and 16-inch models, in addition to blowout bargains on M3 models. Apple offers two ..., title: Best MacBook Pro Deals for March 2025 | Save up to $</span>1,200 - AppleInsider, <span class="nb">link</span>: https://appleinsider.com/deals/best-macbook-pro-deals, snippet: The newly launched M4 Pro and M4 Max 14-inch MacBook Pros have shown notable performance improvements over their M1, M2, and M3 counterparts, especially <span class="k">in </span>single-core scores. In recent benchmarks, the M4 Pro 14-inch MacBook Pro achieved a single-core score of approximately 3,850, surpassing the M3 Pro<span class="s1">'s single-core score by about 15-20%., title: Apple 14″ MacBook Pro Prices at MacPrices.net, link: https://www.macprices.net/14-macbook-pro/, snippet: Apple MacBook Pro 14" (M4/512GB): was $1,599 now $1,399 at Amazon. The M4-based MacBook Pro M4 is pretty close to being the perfect laptop. You get fantastic performance from the M4 chip, useful ..., title: Epic Apple MacBook sale is live — shop the best deals from $629 right ..., link: https://www.tomsguide.com/sales-events/epic-apple-macbook-sale-is-live-shop-the-best-deals-from-usd629-right-now, snippet: The M4 Max MacBook Pro is Apple'</span>s most powerful option, and both the silver and space black options are on sale. ... List price Best price <span class="o">(</span>current<span class="o">)</span> Best price <span class="o">(</span>all-time<span class="o">)</span> M2 MacBook Air <span class="o">(</span>13-inch ..., title: Best MacBook Deals: Save on Apple<span class="s1">'s Latest Laptops and Previous-Gen ..., link: https://www.cnet.com/deals/best-macbook-deals/ The current price of a MacBook Pro in USD can be found from the search results. Let me filter the results a bit more specifically to find the price.
</span><span class="go">
Agents: duckduck
Action: duckduck
</span><span class="gp">Action Input: What is the price of a new 14-inch MacBook Pro (M4/512GB) in USD?snippet: - 14″ M4 MacBook Pro (16GB/1TB/Gray): $</span>1599, <span class="nv">$200</span> off MSRP - 14″ M4 MacBook Pro <span class="o">(</span>24GB/1TB/Gray<span class="o">)</span>: <span class="nv">$1799</span>, <span class="nv">$200</span> off MSRP. These are currently the lowest prices available <span class="k">for </span>new M4-powered 14″ MacBook Pros among the Apple retailers we track. For the latest sales and prices, keep an eye on our 14-inch MacBook Pro Price Tracker, updated daily., title: 14-inch M4 MacBook Pros on sale today <span class="k">for</span> <span class="nv">$150</span>-<span class="nv">$200</span> off MSRP, <span class="nb">link</span>: https://www.macprices.net/2025/01/14/14-inch-m4-macbook-pros-on-sale-today-for-150-200-off-msrp/, snippet: Every M4 Pro and M4 Max model is also on sale at up to <span class="nv">$300</span> off <span class="k">in </span>our Mac Price Guide. Prices start at <span class="nv">$1</span>,699. Here are a few top picks from the MacBook Pro sale: 14-inch M4, 16GB, 512GB, Space ..., title: Apple M4 MacBook Pro Drops to <span class="nv">$1</span>,399, Free Next Day Shipping - AppleInsider, <span class="nb">link</span>: https://appleinsider.com/articles/24/12/25/snag-an-m4-macbook-pro-14-inch-for-1399-with-free-next-day-delivery, snippet: The M4 Pro MacBook Pro 14-inch has hit a new record low price of <span class="nv">$1</span>,699, with units <span class="k">in </span>stock with free store pickup as early as today. But don<span class="s1">'t delay, as the deal ends on Christmas Eve., title: Apple MacBook Pro 14-inch M4 Pro Drops to Best $1,699 Price - AppleInsider, link: https://appleinsider.com/articles/24/12/24/apples-14-inch-macbook-pro-with-m4-pro-chip-plunges-to-record-low-1699-today-only, snippet: Right now the 14-inch MacBook Pro is available with a discount that slashes its price to the lowest yet, and you won'</span>t want to miss out. Amazon is now selling the M4 MacBook Pro <span class="k">for </span>just <span class="nv">$1</span>,398 ..., title: Apple<span class="s1">'s Latest M4 14-inch MacBook Pro Is Now Yours for Its Best-Ever Price, link: https://www.cnet.com/deals/apples-latest-m4-14-inch-macbook-pro-is-now-yours-for-its-best-ever-price/ The current price of a new 14-inch MacBook Pro (M4/512GB) in USD is $1399. To find the cost in EUR, we can use the given exchange rate of 0.85 EUR for 1 USD. So, the cost of the MacBook Pro in EUR would be 1399 * 0.85 = €1176.21.
</span><span class="go">
Final Answer: The current price of a new 14-inch MacBook Pro (M4/512GB) is approximately €1176.21 in EUR.

</span><span class="gp">&gt;</span><span class="w"> </span>Finished chain.
<span class="go">
{'input': 'What is the current price of a MacBook Pro in USD? How much would it cost in EUR if the exchange rate is 0.85 EUR for 1 USD.',
 'output': 'The current price of a new 14-inch MacBook Pro (M4/512GB) is approximately €1176.21 in EUR.'}</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="langchain">Appendix A: LangChain</h3>
<div class="paragraph">
<p>LangChain is a framework that consists of a number of packages, which implements a standard interface for large language models and related technologies, such as embedding models and vector stores, and integrates with hundreds of providers.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://python.langchain.com/svg/langchain_stack_112024.svg" alt="Diagram outlining the hierarchical organization of the LangChain framework, displaying the interconnected parts across multiple layers." width="45%" height="45%">
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>langchain-core</code> is a lightweight package containing base abstractions and interfaces for core Langchain components like chat models, vector stores, and tools, without including any third-party integrations and with minimal dependencies.</p>
</li>
<li>
<p><code>langchain</code> is the main package containing generic chains and retrieval strategies that form an application&#8217;s cognitive architecture, independent of specific third-party integrations.</p>
</li>
<li>
<p>Integrations are a list of lightweight packages (e.g., <code>langchain-openai</code>, <code>langchain-anthropic</code>) that contain specific integrations and are co-maintained for proper versioning.</p>
</li>
<li>
<p><code>langchain-community</code> is a package containing third-party integrations for various components (chat models, vector stores, tools, etc.), maintained by the Langchain community, with all dependencies being optional to ensure a lightweight package.</p>
</li>
<li>
<p><code>langgraph</code> is an extension of <code>langchain</code> aimed at building robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.</p>
</li>
<li>
<p><code>langserve</code> is a package to deploy LangChain chains as REST APIs that makes it easy to get a production ready API up and running.</p>
</li>
<li>
<p>LangSmith is a developer platform for debugging, testing, evaluating, and monitoring LLM applications.</p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="chat-models-and-messages">7.A.1. Chat Models and Messages</h4>
<div class="paragraph">
<p>Large Language Models (LLMs) are advanced machine learning models that excel in a wide range of language-related tasks such as text generation, translation, summarization, question answering, and more, without needing task-specific fine tuning for every scenario.</p>
</div>
<div class="paragraph">
<p>LangChain provides a consistent interface for working with <a href="https://python.langchain.com/docs/concepts/chat_models/">chat models</a> from different providers that takes a list of <a href="https://python.langchain.com/docs/messages/">messages</a> as input and returns a <a href="https://python.langchain.com/docs/messages/">message</a> as output while offering additional features for monitoring, debugging, and optimizing the performance of applications that use LLMs.</p>
</div>
<div class="paragraph">
<p>LangChain supports two message formats to interact with chat models:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>LangChain Message Format: LangChain&#8217;s own message format, which is used by default and is used internally by LangChain.</p>
</li>
<li>
<p>OpenAI&#8217;s Message Format: OpenAI&#8217;s message format.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><a href="https://python.langchain.com/docs/messages/">Messages</a> are the unit of communication in <a href="https://python.langchain.com/docs/concepts/chat_models/">chat models</a>, which are used to represent the input and output of a chat model, as well as any additional context or metadata that may be associated with a conversation.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Each message has a role (e.g., "user", "assistant") and content (e.g., text, multimodal data) with additional metadata that varies depending on the chat model provider.</p>
</li>
<li>
<p>LangChain provides a unified message format that can be used across chat models, allowing users to work with different chat models without worrying about the specific details of the message format used by each model provider.</p>
</li>
<li>
<p>LangChain messages are Python objects that subclass from a <code>BaseMessage</code>.</p>
<div class="ulist">
<ul>
<li>
<p><code>SystemMessage</code>: corresponds to <code>system</code> role</p>
</li>
<li>
<p><code>HumanMessage</code>: corresponds to <code>user</code> role</p>
</li>
<li>
<p><code>AIMessage</code>: corresponds to <code>assistant</code> role</p>
</li>
<li>
<p><code>AIMessageChunk</code>: corresponds to <code>assistant</code> role, used for streaming responses</p>
</li>
<li>
<p><code>ToolMessage</code>: corresponds to <code>tool</code> role</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>When invoking a chat model with a string as input, LangChain will automatically convert the string into a <code>HumanMessage</code> object.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">model</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello, how are you?</span><span class="sh">"</span><span class="p">)</span></code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_openai</span> <span class="kn">import</span> <span class="n">ChatOpenAI</span>

<span class="n">llm</span> <span class="o">=</span> <span class="nc">ChatOpenAI</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">temperature</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
    <span class="n">max_tokens</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>
    <span class="n">timeout</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span>
    <span class="n">max_retries</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">llm</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="sh">'</span><span class="s">What is LangChain?</span><span class="sh">'</span><span class="p">)</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="prompt-templates">7.A.2. Prompt Templates</h4>
<div class="paragraph">
<p><a href="https://python.langchain.com/docs/concepts/prompt_templates">Prompt Templates</a> are responsible for formatting user input into a format that can be passed to a language model, take as input a dictionary, where each key represents a variable in the prompt template to fill in, and output a PromptValue.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">PromptTemplate</span>

<span class="n">prompt_template</span> <span class="o">=</span> <span class="n">PromptTemplate</span><span class="p">.</span><span class="nf">from_template</span><span class="p">(</span><span class="sh">"</span><span class="s">Tell me a joke about {topic}</span><span class="sh">"</span><span class="p">)</span>
<span class="n">prompt</span> <span class="o">=</span> <span class="n">prompt_template</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="o">**</span><span class="p">{</span><span class="sh">"</span><span class="s">topic</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">cats</span><span class="sh">"</span><span class="p">})</span>
<span class="nf">print</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
<span class="c1"># Tell me a joke about cats</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">ChatPromptTemplate</span>

<span class="n">prompt_template</span> <span class="o">=</span> <span class="nc">ChatPromptTemplate</span><span class="p">([</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">You are a helpful assistant</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Tell me a joke about {topic}</span><span class="sh">"</span><span class="p">)</span>
<span class="p">])</span>
<span class="n">prompt</span> <span class="o">=</span> <span class="n">prompt_template</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="o">**</span><span class="p">{</span><span class="sh">"</span><span class="s">topic</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">cats</span><span class="sh">"</span><span class="p">})</span>
<span class="nf">print</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
<span class="c1"># System: You are a helpful assistant
# Human: Tell me a joke about cats</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">ChatPromptTemplate</span><span class="p">,</span> <span class="n">MessagesPlaceholder</span>
<span class="kn">from</span> <span class="n">langchain_core.messages</span> <span class="kn">import</span> <span class="n">HumanMessage</span>

<span class="n">prompt_template</span> <span class="o">=</span> <span class="nc">ChatPromptTemplate</span><span class="p">([</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">You are a helpful assistant</span><span class="sh">"</span><span class="p">),</span>
    <span class="nc">MessagesPlaceholder</span><span class="p">(</span><span class="sh">"</span><span class="s">msgs</span><span class="sh">"</span><span class="p">)</span>
<span class="p">])</span>
<span class="n">prompt</span> <span class="o">=</span> <span class="n">prompt_template</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="o">**</span><span class="p">{</span><span class="sh">"</span><span class="s">msgs</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="nc">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="sh">"</span><span class="s">hi!</span><span class="sh">"</span><span class="p">)]})</span>
<span class="nf">print</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
<span class="c1"># System: You are a helpful assistant
# Human: hi!
</span>
<span class="c1"># alternatively
</span><span class="n">prompt_template</span> <span class="o">=</span> <span class="nc">ChatPromptTemplate</span><span class="p">([</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">You are a helpful assistant</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">placeholder</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">{msgs}</span><span class="sh">"</span><span class="p">)</span> <span class="c1"># &lt;-- This is the changed part
</span><span class="p">])</span>
<span class="n">prompt</span> <span class="o">=</span> <span class="n">prompt_template</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="o">**</span><span class="p">{</span><span class="sh">"</span><span class="s">msgs</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="nc">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="sh">"</span><span class="s">hi!</span><span class="sh">"</span><span class="p">)]})</span>
<span class="nf">print</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
<span class="c1"># System: You are a helpful assistant
# Human: hi!</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="structured-outputs">7.A.3. Structured Outputs</h4>
<div class="paragraph">
<p>Structured outputs are a concept where language models are instructed to respond in a structured format, rather than in direct natural language, which is useful in scenarios where the output needs to be machine-readable, such as storing output in a database and ensure that the output conforms to the database schema.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://python.langchain.com/assets/images/structured_output-2c42953cee807dedd6e96f3e1db17f69.png" alt="Structured output" width="45%" height="45%">
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>LangChain provides a method, <code>with_structured_output()</code>, that automates the process of binding the schema to the model and parsing the output.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span><span class="p">,</span> <span class="n">Field</span>

<span class="k">class</span> <span class="nc">ResponseFormatter</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Always use this tool to structure your response to the user.</span><span class="sh">"""</span>
    <span class="n">answer</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">The answer to the user</span><span class="sh">'</span><span class="s">s question</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">followup_question</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">A followup question the user could ask</span><span class="sh">"</span><span class="p">)</span>

<span class="n">llm_with_structure</span> <span class="o">=</span> <span class="n">llm</span><span class="p">.</span><span class="nf">with_structured_output</span><span class="p">(</span><span class="n">ResponseFormatter</span><span class="p">)</span>
<span class="n">structured_output</span> <span class="o">=</span> <span class="n">llm_with_structure</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span>
    <span class="sh">"</span><span class="s">What is the powerhouse of the cell?</span><span class="sh">"</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span>
<span class="p">)</span>
<span class="n">structured_output</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">ResponseFormatter(answer='The powerhouse of the cell is the mitochondria.', followup_question='What is the organelle that powers the cell?')</span></code></pre>
</div>
</div>
</li>
<li>
<p>While one approach is to include defined schema in the prompt and ask nicely for the model to use it, it is not recommended.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain.output_parsers.structured</span> <span class="kn">import</span> <span class="n">ResponseSchema</span><span class="p">,</span> <span class="n">StructuredOutputParser</span>

<span class="n">response_schemas</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nc">ResponseSchema</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">answer</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">The answer to the user</span><span class="sh">'</span><span class="s">s question</span><span class="sh">"</span><span class="p">,</span>
        <span class="nb">type</span><span class="o">=</span><span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">),</span>
    <span class="nc">ResponseSchema</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">followup_question</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">A followup question the user could ask</span><span class="sh">"</span><span class="p">,</span>
        <span class="nb">type</span><span class="o">=</span><span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">),</span>
<span class="p">]</span>

<span class="n">parser</span> <span class="o">=</span> <span class="n">StructuredOutputParser</span><span class="p">.</span><span class="nf">from_response_schemas</span><span class="p">(</span><span class="n">response_schemas</span><span class="p">)</span>
<span class="n">format_instructions</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">get_format_instructions</span><span class="p">()</span>

<span class="kn">from</span> <span class="n">langchain.prompts</span> <span class="kn">import</span> <span class="n">PromptTemplate</span>

<span class="n">prompt</span> <span class="o">=</span> <span class="nc">PromptTemplate</span><span class="p">(</span>
    <span class="n">template</span><span class="o">=</span><span class="sh">"</span><span class="s">{query}</span><span class="se">\n</span><span class="s">{format_instructions}</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">input_variables</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">],</span>
    <span class="n">partial_variables</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">format_instructions</span><span class="sh">"</span><span class="p">:</span> <span class="n">format_instructions</span><span class="p">},</span>
<span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="nf">print</span><span class="p">(</span><span class="n">prompt</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="o">**</span><span class="p">{</span><span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">What is the powerhouse of the cell?</span><span class="sh">"</span><span class="p">}))</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">What is the powerhouse of the cell?
The output should be a markdown code snippet formatted in the following schema, including the leading and trailing "```json" and "```":

```json
{
	"answer": string  // The answer to the user's question
	"followup_question": string  // A followup question the user could ask
}
```</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">chain</span> <span class="o">=</span> <span class="n">prompt</span> <span class="o">|</span> <span class="n">llm</span> <span class="o">|</span> <span class="n">parser</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">({</span><span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">What is the powerhouse of the cell?</span><span class="sh">"</span><span class="p">})</span>
<span class="n">output</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">{'answer': 'The powerhouse of the cell is the nucleus.',
 'followup_question': 'What does the nucleus play a crucial role in?'}</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="output-parsers">7.A.4. Output Parsers</h4>
<div class="paragraph">
<p><a href="https://python.langchain.com/docs/concepts/output_parsers/">Output Parsers</a> are responsible for taking the output of a model and transforming it to a more suitable format for downstream tasks, which are useful when using LLMs to generate structured data, or to normalize output from chat models and LLMs.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># parse text from message objects
</span><span class="kn">from</span> <span class="n">langchain_core.output_parsers</span> <span class="kn">import</span> <span class="n">StrOutputParser</span>

<span class="n">chain</span> <span class="o">=</span> <span class="n">llm</span> <span class="o">|</span> <span class="nc">StrOutputParser</span><span class="p">()</span>

<span class="n">output</span> <span class="o">=</span> <span class="n">chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="sh">'</span><span class="s">What is 2 + 2 ?</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>

<span class="c1"># 2 + 2 equals 4.</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># use output parsers to parse an LLM response into structured format
</span><span class="kn">from</span> <span class="n">langchain_core.output_parsers</span> <span class="kn">import</span> <span class="n">PydanticOutputParser</span>
<span class="kn">from</span> <span class="n">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">PromptTemplate</span>
<span class="kn">from</span> <span class="n">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span><span class="p">,</span> <span class="n">Field</span><span class="p">,</span> <span class="n">model_validator</span>

<span class="k">class</span> <span class="nc">Joke</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">setup</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">question to set up a joke</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">punchline</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">answer to resolve the joke</span><span class="sh">"</span><span class="p">)</span>

<span class="n">parser</span> <span class="o">=</span> <span class="nc">PydanticOutputParser</span><span class="p">(</span><span class="n">pydantic_object</span><span class="o">=</span><span class="n">Joke</span><span class="p">)</span>

<span class="n">prompt</span> <span class="o">=</span> <span class="nc">PromptTemplate</span><span class="p">(</span>
    <span class="n">template</span><span class="o">=</span><span class="sh">"</span><span class="s">Answer the user query.</span><span class="se">\n</span><span class="s">{format_instructions}</span><span class="se">\n</span><span class="s">{query}</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">input_variables</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">],</span>
    <span class="n">partial_variables</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">format_instructions</span><span class="sh">"</span><span class="p">:</span> <span class="n">parser</span><span class="p">.</span><span class="nf">get_format_instructions</span><span class="p">()},</span>
<span class="p">)</span>

<span class="n">chain</span> <span class="o">=</span> <span class="n">prompt</span> <span class="o">|</span> <span class="n">llm</span> <span class="o">|</span> <span class="n">parser</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">({</span><span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Tell me a joke.</span><span class="sh">"</span><span class="p">})</span>
<span class="nf">print</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">(</span><span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>

<span class="c1"># {
#   "setup": "Why did the tomato turn red?",
#   "punchline": "Because it saw the salad dressing!"
# }</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># parse JSON output
</span><span class="kn">from</span> <span class="n">langchain_core.output_parsers</span> <span class="kn">import</span> <span class="n">JsonOutputParser</span>
<span class="kn">from</span> <span class="n">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">PromptTemplate</span>
<span class="kn">from</span> <span class="n">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span><span class="p">,</span> <span class="n">Field</span>

<span class="k">class</span> <span class="nc">Joke</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">setup</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">question to set up a joke</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">punchline</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">answer to resolve the joke</span><span class="sh">"</span><span class="p">)</span>

<span class="n">parser</span> <span class="o">=</span> <span class="nc">JsonOutputParser</span><span class="p">(</span><span class="n">pydantic_object</span><span class="o">=</span><span class="n">Joke</span><span class="p">)</span>

<span class="n">instructions</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">get_format_instructions</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="se">\n</span><span class="si">{</span><span class="n">instructions</span><span class="si">}</span><span class="se">\n</span><span class="s">---------------</span><span class="sh">'</span><span class="p">)</span>

<span class="n">prompt</span> <span class="o">=</span> <span class="nc">PromptTemplate</span><span class="p">(</span>
    <span class="n">template</span><span class="o">=</span><span class="sh">"</span><span class="s">Answer the user query.</span><span class="se">\n</span><span class="s">{format_instructions}</span><span class="se">\n</span><span class="s">{query}</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">input_variables</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">],</span>
    <span class="n">partial_variables</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">format_instructions</span><span class="sh">"</span><span class="p">:</span> <span class="n">parser</span><span class="p">.</span><span class="nf">get_format_instructions</span><span class="p">()},</span>
<span class="p">)</span>

<span class="n">chain</span> <span class="o">=</span> <span class="n">prompt</span> <span class="o">|</span> <span class="n">llm</span> <span class="o">|</span> <span class="n">parser</span>

<span class="n">output</span> <span class="o">=</span> <span class="n">chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">({</span><span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Tell me a joke.</span><span class="sh">"</span><span class="p">})</span>
<span class="nf">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>

<span class="c1"># The output should be formatted as a JSON instance that conforms to the JSON schema below.
#
# As an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}
# the object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.
#
# Here is the output schema:
# ```
# {"properties": {"setup": {"description": "question to set up a joke", "title": "Setup", "type": "string"}, "punchline": {"description": "answer to resolve the joke", "title": "Punchline", "type": "string"}}, "required": ["setup", "punchline"]}
# ```
# ---------------
# {'setup': 'Why did the tomato turn red?', 'punchline': 'Because it saw the salad dressing!'}</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="embedding-vector-stores-and-retrievers">7.A.5. Embedding, Vector Stores, and Retrievers</h4>
<div class="paragraph">
<p><a href="https://python.langchain.com/docs/embedding_models/">Embedding models</a> are machine learning models that transform human language or multimodal data (text, audio, images, video - not currently fully supported by Langchain) into numerical vector representations (embeddings), which are fixed-length arrays capturing the semantic meaning of the input, enabling machines to understand and compare data based on conceptual similarity, not just keywords.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://python.langchain.com/assets/images/embeddings_concept-975a9aaba52de05b457a1aeff9a7393a.png" alt="Embedding Model Conceptual Overview" width="55%" height="55%">
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>(1) Embed text as a vector: Embeddings transform text into a numerical vector representation.</p>
</li>
<li>
<p>(2) Measure similarity: Embedding vectors can be compared using simple mathematical operations.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>LangChain provides a universal interface for working with embedding models, providing standard methods for common operations, and simplifies interaction with various embedding providers through two central methods:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>embed_documents</code>: For embedding multiple texts (documents)</p>
</li>
<li>
<p><code>embed_query</code>: For embedding a single text (query)</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># for embedding multiple texts (documents)
</span><span class="kn">from</span> <span class="n">langchain_openai</span> <span class="kn">import</span> <span class="n">OpenAIEmbeddings</span>
<span class="n">embeddings_model</span> <span class="o">=</span> <span class="nc">OpenAIEmbeddings</span><span class="p">()</span>
<span class="n">embeddings</span> <span class="o">=</span> <span class="n">embeddings_model</span><span class="p">.</span><span class="nf">embed_documents</span><span class="p">(</span>
    <span class="p">[</span>
        <span class="sh">"</span><span class="s">Hi there!</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">Oh, hello!</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">What</span><span class="sh">'</span><span class="s">s your name?</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">My friends call me World</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">Hello World!</span><span class="sh">"</span>
    <span class="p">]</span>
<span class="p">)</span>
<span class="nf">len</span><span class="p">(</span><span class="n">embeddings</span><span class="p">),</span> <span class="nf">len</span><span class="p">(</span><span class="n">embeddings</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1536</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># for embedding a single text (query)
</span><span class="n">query_embedding</span> <span class="o">=</span> <span class="n">embeddings_model</span><span class="p">.</span><span class="nf">embed_query</span><span class="p">(</span><span class="sh">"</span><span class="s">What is the meaning of life?</span><span class="sh">"</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># measure similarity
</span><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="k">def</span> <span class="nf">cosine_similarity</span><span class="p">(</span><span class="n">vec1</span><span class="p">,</span> <span class="n">vec2</span><span class="p">):</span>
    <span class="n">dot_product</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">vec1</span><span class="p">,</span> <span class="n">vec2</span><span class="p">)</span>
    <span class="n">norm_vec1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">norm</span><span class="p">(</span><span class="n">vec1</span><span class="p">)</span>
    <span class="n">norm_vec2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">norm</span><span class="p">(</span><span class="n">vec2</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">dot_product</span> <span class="o">/</span> <span class="p">(</span><span class="n">norm_vec1</span> <span class="o">*</span> <span class="n">norm_vec2</span><span class="p">)</span>

<span class="n">similarity</span> <span class="o">=</span> <span class="nf">cosine_similarity</span><span class="p">(</span><span class="n">query_result</span><span class="p">,</span> <span class="n">document_result</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Cosine Similarity:</span><span class="sh">"</span><span class="p">,</span> <span class="n">similarity</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># hugging face embeddings
</span><span class="kn">from</span> <span class="n">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEmbeddings</span>

<span class="n">embeddings</span> <span class="o">=</span> <span class="nc">HuggingFaceEmbeddings</span><span class="p">(</span><span class="n">model_name</span><span class="o">=</span><span class="sh">"</span><span class="s">sentence-transformers/all-MiniLM-L6-v2</span><span class="sh">"</span><span class="p">)</span>

<span class="n">query_embedding</span> <span class="o">=</span> <span class="n">embeddings</span><span class="p">.</span><span class="nf">embed_query</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello, world!</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">query_embedding</span><span class="p">))</span> <span class="c1"># 384</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p><a href="https://python.langchain.com/docs/concepts/vectorstores/">Vector stores</a> are databases that can efficiently store and retrieve embeddings, which are frequently used to search over unstructured data, such as text, images, and audio, to retrieve relevant information based on semantic similarity rather than exact keyword matches.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://python.langchain.com/assets/images/vectorstores-2540b4bc355b966c99b0f02cfdddb273.png" alt="Vector stores" width="45%" height="45%">
</div>
</div>
<div class="paragraph">
<p>LangChain provides a standard interface for working with vector stores, allowing users to easily switch between different vectorstore implementations. The key methods are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>add_documents</code>: Add a list of texts to the vector store.</p>
</li>
<li>
<p><code>delete</code>: Delete a list of documents from the vector store.</p>
</li>
<li>
<p><code>similarity_search</code>: Search for similar documents to a given query.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEmbeddings</span>

<span class="n">embeddings</span> <span class="o">=</span> <span class="nc">HuggingFaceEmbeddings</span><span class="p">(</span><span class="n">model_name</span><span class="o">=</span><span class="sh">"</span><span class="s">sentence-transformers/all-MiniLM-L6-v2</span><span class="sh">"</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">langchain_core.vectorstores</span> <span class="kn">import</span> <span class="n">InMemoryVectorStore</span>

<span class="c1"># initialize with an embedding model
</span><span class="n">vector_store</span> <span class="o">=</span> <span class="nc">InMemoryVectorStore</span><span class="p">(</span><span class="n">embedding</span><span class="o">=</span><span class="n">embeddings</span><span class="p">)</span>

<span class="c1"># add documents
</span><span class="kn">from</span> <span class="n">langchain_core.documents</span> <span class="kn">import</span> <span class="n">Document</span>

<span class="n">document_1</span> <span class="o">=</span> <span class="nc">Document</span><span class="p">(</span>
    <span class="n">page_content</span><span class="o">=</span><span class="sh">"</span><span class="s">I had chocalate chip pancakes and scrambled eggs for breakfast this morning.</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">metadata</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">source</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tweet</span><span class="sh">"</span><span class="p">},</span>
<span class="p">)</span>

<span class="n">document_2</span> <span class="o">=</span> <span class="nc">Document</span><span class="p">(</span>
    <span class="n">page_content</span><span class="o">=</span><span class="sh">"</span><span class="s">The weather forecast for tomorrow is cloudy and overcast, with a high of 62 degrees.</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">metadata</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">source</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">news</span><span class="sh">"</span><span class="p">},</span>
<span class="p">)</span>

<span class="n">documents</span> <span class="o">=</span> <span class="p">[</span><span class="n">document_1</span><span class="p">,</span> <span class="n">document_2</span><span class="p">]</span>

<span class="n">vector_store</span><span class="p">.</span><span class="nf">add_documents</span><span class="p">(</span><span class="n">documents</span><span class="o">=</span><span class="n">documents</span><span class="p">)</span>
<span class="c1"># ['df0f6926-c824-4114-a2c5-2b19d9d8740c', 'fa105761-9dd6-4c1c-860a-28e3e4ba181a']
</span>
<span class="c1"># provide IDs for the documents to the vector store
</span><span class="n">vector_store</span><span class="p">.</span><span class="nf">add_documents</span><span class="p">(</span><span class="n">documents</span><span class="o">=</span><span class="n">documents</span><span class="p">,</span> <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">doc1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">doc2</span><span class="sh">"</span><span class="p">])</span>
<span class="c1"># ['doc1', 'doc2']
</span>
<span class="c1"># delete documents
</span><span class="n">vector_store</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">doc1</span><span class="sh">"</span><span class="p">])</span>

<span class="c1"># similarity search
</span><span class="n">query</span> <span class="o">=</span> <span class="sh">"</span><span class="s">my query</span><span class="sh">"</span>
<span class="n">docs</span> <span class="o">=</span> <span class="n">vectorstore</span><span class="p">.</span><span class="nf">similarity_search</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">docs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">page_content</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><a href="https://python.langchain.com/docs/concepts/retrievers/">Retrievers</a> in Langchain are components that provide a unified way to interact with various retrieval systems, including vector stores, graph databases, and relational databases, and take a natural language query as input to return a list of relevant documents.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>LangChain provides a uniform interface for interacting with different types of retrieval systems that accepts a query and return documents.</p>
</li>
<li>
<p>A Langchain retriever is a <code>runnable</code>, which is a standard interface for Langchain components, and it has a few common methods, including <code>invoke</code>, that are used to interact with it.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">docs</span> <span class="o">=</span> <span class="n">retriever</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="n">query</span><span class="p">)</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>Lost in the Middle is the phenomenon where Large Language Models (LLMs) have difficulty effectively using information located in the middle of a long input context, often performing better when relevant details are at the beginning or end.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Documents retrieved from vector stores are typically returned in descending order of relevance, often measured by cosine similarity of embeddings.</p>
</li>
<li>
<p>To mitigate the "lost in the middle" effect, re-order documents after retrieval such that the most relevant documents are positioned at extrema (e.g., the first and last pieces of context), and the least relevant documents are positioned in the middle.</p>
</li>
<li>
<p>The <code>LongContextReorder</code> document transformer implements the re-ordering procedure.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEmbeddings</span>

<span class="n">embeddings</span> <span class="o">=</span> <span class="nc">HuggingFaceEmbeddings</span><span class="p">(</span>
    <span class="n">model_name</span><span class="o">=</span><span class="sh">"</span><span class="s">sentence-transformers/all-MiniLM-L6-v2</span><span class="sh">"</span>
<span class="p">)</span>

<span class="kn">from</span> <span class="n">langchain_core.vectorstores</span> <span class="kn">import</span> <span class="n">InMemoryVectorStore</span>

<span class="n">texts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="sh">"</span><span class="s">Basquetball is a great sport.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">Fly me to the moon is one of my favourite songs.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">The Celtics are my favourite team.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">This is a document about the Boston Celtics</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">I simply love going to the movies</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">The Boston Celtics won the game by 20 points</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">This is just a random text.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">Elden Ring is one of the best games in the last 15 years.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">L. Kornet is one of the best Celtics players.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">Larry Bird was an iconic NBA player.</span><span class="sh">"</span><span class="p">,</span>
<span class="p">]</span>

<span class="n">vector_store</span> <span class="o">=</span> <span class="n">InMemoryVectorStore</span><span class="p">.</span><span class="nf">from_texts</span><span class="p">(</span><span class="n">texts</span><span class="p">,</span> <span class="n">embedding</span><span class="o">=</span><span class="n">embeddings</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">langchain_core.runnables</span> <span class="kn">import</span> <span class="n">chain</span>
<span class="kn">from</span> <span class="n">langchain_core.documents</span> <span class="kn">import</span> <span class="n">Document</span>

<span class="c1"># create a retriever
</span><span class="nd">@chain</span>
<span class="k">def</span> <span class="nf">retriever</span><span class="p">(</span><span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="n">Document</span><span class="p">]:</span>
    <span class="n">docs</span><span class="p">,</span> <span class="n">scores</span> <span class="o">=</span> <span class="nf">zip</span><span class="p">(</span><span class="o">*</span><span class="n">vector_store</span><span class="p">.</span><span class="nf">similarity_search_with_score</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="mi">10</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">doc</span><span class="p">,</span> <span class="n">score</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">docs</span><span class="p">,</span> <span class="n">scores</span><span class="p">):</span>
        <span class="n">doc</span><span class="p">.</span><span class="n">metadata</span><span class="p">[</span><span class="sh">"</span><span class="s">score</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">score</span>

    <span class="k">return</span> <span class="n">docs</span>

<span class="n">docs</span> <span class="o">=</span> <span class="n">retriever</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
<span class="n">max_score_length</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">doc</span><span class="p">.</span><span class="n">metadata</span><span class="p">[</span><span class="sh">'</span><span class="s">score</span><span class="sh">'</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">6</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span> <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">docs</span><span class="p">)</span>

<span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">docs</span><span class="p">:</span>
    <span class="n">score_str</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">doc</span><span class="p">.</span><span class="n">metadata</span><span class="p">[</span><span class="sh">'</span><span class="s">score</span><span class="sh">'</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">6</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">.</span><span class="nf">rjust</span><span class="p">(</span><span class="n">max_score_length</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">- </span><span class="si">{</span><span class="n">score_str</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">doc</span><span class="p">.</span><span class="n">page_content</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">- 0.675469: This is a document about the Boston Celtics
- 0.638917: The Celtics are my favourite team.
- 0.552694: L. Kornet is one of the best Celtics players.
- 0.460651: The Boston Celtics won the game by 20 points
- 0.320224: Larry Bird was an iconic NBA player.
- 0.244521: Elden Ring is one of the best games in the last 15 years.
- 0.231564: Basquetball is a great sport.
- 0.106447: I simply love going to the movies
- 0.059917: Fly me to the moon is one of my favourite songs.
- 0.034081: This is just a random text.</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_community.document_transformers</span> <span class="kn">import</span> <span class="n">LongContextReorder</span>

<span class="c1"># Reorder the documents:
# Less relevant document will be at the middle of the list and more
# relevant elements at beginning / end.
</span><span class="n">reordering</span> <span class="o">=</span> <span class="nc">LongContextReorder</span><span class="p">()</span>
<span class="n">reordered_docs</span> <span class="o">=</span> <span class="n">reordering</span><span class="p">.</span><span class="nf">transform_documents</span><span class="p">(</span><span class="n">docs</span><span class="p">)</span>

<span class="c1"># Confirm that the 4 relevant documents are at beginning and end.
</span><span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">reordered_docs</span><span class="p">:</span>
    <span class="n">score_str</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">doc</span><span class="p">.</span><span class="n">metadata</span><span class="p">[</span><span class="sh">'</span><span class="s">score</span><span class="sh">'</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">6</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">.</span><span class="nf">rjust</span><span class="p">(</span><span class="n">max_score_length</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">- </span><span class="si">{</span><span class="n">score_str</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">doc</span><span class="p">.</span><span class="n">page_content</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">- 0.638917: The Celtics are my favourite team.
- 0.460651: The Boston Celtics won the game by 20 points
- 0.244521: Elden Ring is one of the best games in the last 15 years.
- 0.106447: I simply love going to the movies
- 0.034081: This is just a random text.
- 0.059917: Fly me to the moon is one of my favourite songs.
- 0.231564: Basquetball is a great sport.
- 0.320224: Larry Bird was an iconic NBA player.
- 0.552694: L. Kornet is one of the best Celtics players.
- 0.675469: This is a document about the Boston Celtics</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="document-loaders">7.A.6. Document Loaders</h4>
<div class="paragraph">
<p><a href="https://python.langchain.com/docs/concepts/document_loaders/">Document Loaders</a> are responsible for loading documents from a variety of sources.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># simple and fast text extraction
</span>
<span class="kn">from</span> <span class="n">langchain_community.document_loaders</span> <span class="kn">import</span> <span class="n">PyPDFLoader</span>

<span class="n">file_path</span> <span class="o">=</span> <span class="sh">"</span><span class="s">./books/llm-book.pdf</span><span class="sh">"</span>

<span class="n">loader</span> <span class="o">=</span> <span class="nc">PyPDFLoader</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
<span class="n">pages</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">page</span> <span class="ow">in</span> <span class="n">loader</span><span class="p">.</span><span class="nf">lazy_load</span><span class="p">():</span>
    <span class="n">pages</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">page</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">pages</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">metadata</span><span class="si">}</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">pages</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">page_content</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">{'source': './books/llm-book.pdf', 'page': 0, 'page_label': 'Cover'}

Hands-On
Large Language
Models
Language Understanding
and Generation
Jay Alammar &amp;
Maarten Grootendorst</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># vector search over PDFs
</span><span class="kn">from</span> <span class="n">langchain_core.vectorstores</span> <span class="kn">import</span> <span class="n">InMemoryVectorStore</span>
<span class="kn">from</span> <span class="n">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEmbeddings</span>

<span class="n">embeddings</span> <span class="o">=</span> <span class="nc">HuggingFaceEmbeddings</span><span class="p">(</span>
    <span class="n">model_name</span><span class="o">=</span><span class="sh">"</span><span class="s">sentence-transformers/all-MiniLM-L6-v2</span><span class="sh">"</span>
<span class="p">)</span>

<span class="n">vector_store</span> <span class="o">=</span> <span class="n">InMemoryVectorStore</span><span class="p">.</span><span class="nf">from_documents</span><span class="p">(</span><span class="n">pages</span><span class="p">,</span> <span class="n">embeddings</span><span class="p">)</span>
<span class="n">docs</span> <span class="o">=</span> <span class="n">vector_store</span><span class="p">.</span><span class="nf">similarity_search</span><span class="p">(</span><span class="sh">"</span><span class="s">What is Prompt Engineering?</span><span class="sh">"</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">docs</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">Page </span><span class="si">{</span><span class="n">doc</span><span class="p">.</span><span class="n">metadata</span><span class="p">[</span><span class="sh">"</span><span class="s">page</span><span class="sh">"</span><span class="p">]</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">doc</span><span class="p">.</span><span class="n">page_content</span><span class="p">[</span><span class="si">:</span><span class="mi">300</span><span class="p">]</span><span class="si">}</span><span class="se">\n</span><span class="sh">'</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Page 194: Intro to Prompt Engineering
An essential part of working with text-generative LLMs is prompt engineering. By
carefully designing our prompts we can guide the LLM to generate desired responses.
Whether the prompts are questions, statements, or instructions, the main goal of
prompt engineering is to e

Page 219: Summary
In this chapter, we explored the basics of using generative models through prompt
engineering and output verification. We focused on the creativity and potential com‐
plexity that comes with prompt engineering. These components of a prompt are key
in generating and optimizing output appropri</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="text-splitters">7.A.7. Text Splitters</h4>
<div class="paragraph">
<p><a href="https://python.langchain.com/docs/concepts/text_splitters/">Text splitters</a> split documents into smaller, manageable chunks for use in downstream applications, particularly retrieval systems, to handle non-uniform document lengths, overcome model limitations, improve representation quality, enhance retrieval precision, and optimize computational resources.</p>
</div>
<div class="paragraph">
<p>Text splitting approaches include length-based methods (token or character), text-structure based methods (like recursive splitting that respects paragraphs and sentences), document-structure based methods (leveraging formats like Markdown or HTML), and semantic meaning based methods (analyzing content for significant meaning shifts).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_text_splitters</span> <span class="kn">import</span> <span class="n">RecursiveCharacterTextSplitter</span>

<span class="n">text_splitter</span> <span class="o">=</span> <span class="nc">RecursiveCharacterTextSplitter</span><span class="p">(</span>
    <span class="n">chunk_size</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>
    <span class="n">chunk_overlap</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span>
    <span class="n">length_function</span><span class="o">=</span><span class="nb">len</span><span class="p">,</span>
    <span class="n">is_separator_regex</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
<span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">state_of_the_union.txt</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">state_of_the_union</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>

<span class="n">texts</span> <span class="o">=</span> <span class="n">text_splitter</span><span class="p">.</span><span class="nf">split_text</span><span class="p">(</span><span class="n">state_of_the_union</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">texts</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">texts</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and
of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_community.document_loaders.text</span> <span class="kn">import</span> <span class="n">TextLoader</span>

<span class="n">loader</span> <span class="o">=</span> <span class="nc">TextLoader</span><span class="p">(</span><span class="sh">"</span><span class="s">state_of_the_union.txt</span><span class="sh">"</span><span class="p">)</span>
<span class="n">documents</span> <span class="o">=</span> <span class="n">loader</span><span class="p">.</span><span class="nf">load</span><span class="p">()</span>
<span class="n">split_documents</span> <span class="o">=</span> <span class="n">text_splitter</span><span class="p">.</span><span class="nf">split_documents</span><span class="p">(</span><span class="n">documents</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">split_documents</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">split_documents</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">page_content='Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and' metadata={'source': 'state_of_the_union.txt'}
page_content='of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.' metadata={'source': 'state_of_the_union.txt'}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_community.document_loaders</span> <span class="kn">import</span> <span class="n">PyPDFLoader</span>

<span class="n">loader</span> <span class="o">=</span> <span class="nc">PyPDFLoader</span><span class="p">(</span><span class="sh">"</span><span class="s">./books/llm-book.pdf</span><span class="sh">"</span><span class="p">)</span>
<span class="n">documents</span> <span class="o">=</span> <span class="n">loader</span><span class="p">.</span><span class="nf">load</span><span class="p">()</span>
<span class="n">split_documents</span> <span class="o">=</span> <span class="n">text_splitter</span><span class="p">.</span><span class="nf">split_documents</span><span class="p">(</span><span class="n">documents</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">split_documents</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">split_documents</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">page_content='Hands-On
Large Language
Models
Language Understanding
and Generation
Jay Alammar &amp;' metadata={'source': './books/llm-book.pdf', 'page': 0, 'page_label': 'Cover'}
page_content='Jay Alammar &amp;
Maarten Grootendorst' metadata={'source': './books/llm-book.pdf', 'page': 0, 'page_label': 'Cover'}</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="tools">7.A.8. Tools</h4>
<div class="paragraph">
<p>LangChain&#8217;s <a href="https://python.langchain.com/docs/concepts/tools/">tool</a> abstraction links a Python <em>function</em> to a <em>schema</em> defining its <em>name</em>, <em>description</em>, and <em>expected arguments</em>, which <a href="https://python.langchain.com/docs/concepts/chat_models/">chat models</a> that support <a href="https://python.langchain.com/docs/concepts/tool_calling/">tool calling</a> (or <a href="https://platform.openai.com/docs/guides/function-calling">function calling</a>) can use to request the execution of a specific function with specific inputs</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://python.langchain.com/assets/images/tool_calling_components-bef9d2bcb9d3706c2fe58b57bf8ccb60.png" alt="Conceptual parts of tool calling" width="55%" height="55%">
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>A key principle of tool calling is that the model decides when to use a tool based on the input&#8217;s relevance.</p>
<div class="imageblock">
<div class="content">
<img src="https://python.langchain.com/assets/images/tool_call_example-2348b869f9a5d0d2a45dfbe614c177a4.png" alt="Diagram of a tool call by a model" width="45%" height="45%">
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># tool creation
</span><span class="nd">@tool</span>
<span class="k">def</span> <span class="nf">multiply</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Multiply a and b.</span><span class="sh">"""</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>

<span class="n">tools</span> <span class="o">=</span> <span class="p">[</span><span class="n">multiply</span><span class="p">]</span>

<span class="c1"># tool binding
</span><span class="n">llm_with_tools</span> <span class="o">=</span> <span class="n">llm</span><span class="p">.</span><span class="nf">bind_tools</span><span class="p">(</span><span class="n">tools</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># tool calling
</span><span class="n">output</span> <span class="o">=</span> <span class="n">llm_with_tools</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="sh">"</span><span class="s">What is 2 multiplied by 3?</span><span class="sh">"</span><span class="p">)</span>
<span class="n">output</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="n">output</span><span class="p">.</span><span class="n">tool_calls</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">('',
 [{'name': 'multiply',
   'args': {'a': 2, 'b': 3},
   'id': 'call_zerallda',
   'type': 'tool_call'}])</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># model doesn't always need to call a tool
</span><span class="n">output</span> <span class="o">=</span> <span class="n">llm_with_tools</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello world!</span><span class="sh">"</span><span class="p">)</span>
<span class="n">output</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="n">output</span><span class="p">.</span><span class="n">tool_calls</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">('Hello! How can I assist you today?', [])</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="chat-history">7.A.9. Chat History</h4>
<div class="paragraph">
<p><a href="https://python.langchain.com/docs/concepts/chat_history/">Chat history</a> is sequence of messages, each of which is associated with a specific role, such as <code>user</code>, <code>assistant</code>, <code>system</code>, or <code>tool</code>, a record of the conversation between the user and the chat model, which is used to maintain context and state throughout the conversation.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://python.langchain.com/assets/images/conversation_patterns-0e4c2311b54fae7412f74b1408615432.png" alt="Conversation patterns" width="45%" height="45%">
</div>
</div>
<div class="paragraph">
<p>A full conversation often starts with a system message that sets the context for the conversation, and follows a combination of two alternating message patterns: user and assistant, representing a back-and-forth conversation, or assistant and tool, representing an "agentic" workflow where the assistant invokes tools for specific tasks.</p>
</div>
<div class="paragraph">
<p>All models have finite context windows, and <code>trim_messages</code> can be used to reduce the size of a chat history to a specified token count or specified message count.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_core.messages</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">AIMessage</span><span class="p">,</span>
    <span class="n">HumanMessage</span><span class="p">,</span>
    <span class="n">SystemMessage</span><span class="p">,</span>
    <span class="n">trim_messages</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nc">SystemMessage</span><span class="p">(</span><span class="sh">"</span><span class="s">you</span><span class="sh">'</span><span class="s">re a good assistant, you always respond with a joke.</span><span class="sh">"</span><span class="p">),</span>
    <span class="nc">HumanMessage</span><span class="p">(</span><span class="sh">"</span><span class="s">i wonder why it</span><span class="sh">'</span><span class="s">s called langchain</span><span class="sh">"</span><span class="p">),</span>
    <span class="nc">AIMessage</span><span class="p">(</span>
        <span class="sh">'</span><span class="s">Well, I guess they thought </span><span class="sh">"</span><span class="s">WordRope</span><span class="sh">"</span><span class="s"> and </span><span class="sh">"</span><span class="s">SentenceString</span><span class="sh">"</span><span class="s"> just didn</span><span class="se">\'</span><span class="s">t have the same ring to it!</span><span class="sh">'</span>
    <span class="p">),</span>
    <span class="nc">HumanMessage</span><span class="p">(</span><span class="sh">"</span><span class="s">and who is harrison chasing anyways</span><span class="sh">"</span><span class="p">),</span>
    <span class="nc">AIMessage</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">Hmmm let me think.</span><span class="se">\n\n</span><span class="s">Why, he</span><span class="sh">'</span><span class="s">s probably chasing after the last cup of coffee in the office!</span><span class="sh">"</span>
    <span class="p">),</span>
    <span class="nc">HumanMessage</span><span class="p">(</span><span class="sh">"</span><span class="s">what do you call a speechless parrot</span><span class="sh">"</span><span class="p">),</span>
<span class="p">]</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># trimming based on token count
</span><span class="kn">from</span> <span class="n">langchain_core.messages.utils</span> <span class="kn">import</span> <span class="n">count_tokens_approximately</span>

<span class="nf">trim_messages</span><span class="p">(</span>
    <span class="n">messages</span><span class="p">,</span>
    <span class="n">strategy</span><span class="o">=</span><span class="sh">"</span><span class="s">last</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">token_counter</span><span class="o">=</span><span class="n">count_tokens_approximately</span><span class="p">,</span>
    <span class="n">max_tokens</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span>
    <span class="n">start_on</span><span class="o">=</span><span class="sh">"</span><span class="s">human</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">end_on</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">human</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">),</span>
    <span class="n">include_system</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">allow_partial</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
<span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">SystemMessage(content="you're a good assistant, you always respond with a joke.", additional_kwargs={}, response_metadata={}),
 HumanMessage(content='what do you call a speechless parrot', additional_kwargs={}, response_metadata={})]</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># trimming based on message count
</span><span class="nf">trim_messages</span><span class="p">(</span>
    <span class="n">messages</span><span class="p">,</span>
    <span class="n">strategy</span><span class="o">=</span><span class="sh">"</span><span class="s">last</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">token_counter</span><span class="o">=</span><span class="nb">len</span><span class="p">,</span>
    <span class="n">max_tokens</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>  <span class="c1"># message count
</span>    <span class="n">start_on</span><span class="o">=</span><span class="sh">"</span><span class="s">human</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">end_on</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">human</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">),</span>
    <span class="n">include_system</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">[SystemMessage(content="you're a good assistant, you always respond with a joke.", additional_kwargs={}, response_metadata={}),
 HumanMessage(content='and who is harrison chasing anyways', additional_kwargs={}, response_metadata={}),
 AIMessage(content="Hmmm let me think.\n\nWhy, he's probably chasing after the last cup of coffee in the office!", additional_kwargs={}, response_metadata={}),
 HumanMessage(content='what do you call a speechless parrot', additional_kwargs={}, response_metadata={})]</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># using a chat model as a token counter
</span><span class="kn">from</span> <span class="n">langchain_openai</span> <span class="kn">import</span> <span class="n">ChatOpenAI</span>

<span class="nf">trim_messages</span><span class="p">(</span>
    <span class="n">messages</span><span class="p">,</span>
    <span class="n">max_tokens</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span>
    <span class="n">strategy</span><span class="o">=</span><span class="sh">"</span><span class="s">first</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">token_counter</span><span class="o">=</span><span class="nc">ChatOpenAI</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o</span><span class="sh">"</span><span class="p">),</span>
<span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># chaining
</span><span class="kn">from</span> <span class="n">langchain_openai</span> <span class="kn">import</span> <span class="n">ChatOpenAI</span>

<span class="n">llm</span> <span class="o">=</span> <span class="nc">ChatOpenAI</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o</span><span class="sh">"</span><span class="p">)</span>

<span class="n">trimmer</span> <span class="o">=</span> <span class="nf">trim_messages</span><span class="p">(</span>
    <span class="n">token_counter</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>
    <span class="n">strategy</span><span class="o">=</span><span class="sh">"</span><span class="s">last</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">max_tokens</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span>
    <span class="n">start_on</span><span class="o">=</span><span class="sh">"</span><span class="s">human</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">end_on</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">human</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">),</span>
    <span class="n">include_system</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">chain</span> <span class="o">=</span> <span class="n">trimmer</span> <span class="o">|</span> <span class="n">llm</span>
<span class="n">chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="n">messages</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_core.chat_history</span> <span class="kn">import</span> <span class="n">InMemoryChatMessageHistory</span>
<span class="kn">from</span> <span class="n">langchain_core.runnables.history</span> <span class="kn">import</span> <span class="n">RunnableWithMessageHistory</span>

<span class="n">chat_history</span> <span class="o">=</span> <span class="nc">InMemoryChatMessageHistory</span><span class="p">(</span><span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>


<span class="k">def</span> <span class="nf">dummy_get_session_history</span><span class="p">(</span><span class="n">session_id</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">session_id</span> <span class="o">!=</span> <span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nc">InMemoryChatMessageHistory</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">chat_history</span>


<span class="n">trimmer</span> <span class="o">=</span> <span class="nf">trim_messages</span><span class="p">(</span>
    <span class="n">max_tokens</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span>
    <span class="n">strategy</span><span class="o">=</span><span class="sh">"</span><span class="s">last</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">token_counter</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>
    <span class="n">include_system</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">start_on</span><span class="o">=</span><span class="sh">"</span><span class="s">human</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">chain</span> <span class="o">=</span> <span class="n">trimmer</span> <span class="o">|</span> <span class="n">llm</span>
<span class="n">chain_with_history</span> <span class="o">=</span> <span class="nc">RunnableWithMessageHistory</span><span class="p">(</span>
    <span class="n">chain</span><span class="p">,</span> <span class="n">dummy_get_session_history</span>
<span class="p">)</span>
<span class="n">chain_with_history</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span>
    <span class="p">[</span><span class="nc">HumanMessage</span><span class="p">(</span><span class="sh">"</span><span class="s">what do you call a speechless parrot</span><span class="sh">"</span><span class="p">)],</span>
    <span class="n">config</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">configurable</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">session_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">}},</span>
<span class="p">)</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="memory">7.A.10. Memory</h4>
<div class="paragraph">
<p><a href="https://python.langchain.com/docs/concepts/memory/">Memory</a> is a cognitive function that allows people to store, retrieve, and use information to understand their present and future. <em>Short-term memory</em>, or <em>thread-scoped memory</em>, can be recalled at any time from within a single conversational thread with a user. <em>Long-term memory</em> is shared across conversational threads, and can be recalled at any time and in any thread.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://langchain-ai.github.io/langgraph/concepts/img/memory/short-vs-long.png" alt="Memory in LLM" width="45%" height="45%">
</div>
</div>
</div>
<div class="sect3">
<h4 id="langchain-expression-language-lcel">7.A.11. LangChain Expression Language (LCEL)</h4>
<div class="paragraph">
<p>The <strong>L</strong>ang<strong>C</strong>hain <strong>E</strong>xpression Language (LCEL) uses a declarative approach, similar to a Unix pipe, to build new <code>Runnable</code> components from existing ones, where a <code>Runnable</code> created with LCEL is often referred to as a "chain" and fully implements the <code>Runnable</code> interface.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_core.vectorstores</span> <span class="kn">import</span> <span class="n">InMemoryVectorStore</span>
<span class="kn">from</span> <span class="n">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEmbeddings</span>

<span class="n">embeddings</span> <span class="o">=</span> <span class="nc">HuggingFaceEmbeddings</span><span class="p">(</span>
    <span class="n">model_name</span><span class="o">=</span><span class="sh">"</span><span class="s">sentence-transformers/all-MiniLM-L6-v2</span><span class="sh">"</span>
<span class="p">)</span>
<span class="n">vectorstore</span> <span class="o">=</span> <span class="n">InMemoryVectorStore</span><span class="p">.</span><span class="nf">from_texts</span><span class="p">(</span>
    <span class="p">[</span><span class="sh">"</span><span class="s">harrison worked at kensho</span><span class="sh">"</span><span class="p">],</span>
    <span class="n">embedding</span><span class="o">=</span><span class="n">embeddings</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">retriever</span> <span class="o">=</span> <span class="n">vectorstore</span><span class="p">.</span><span class="nf">as_retriever</span><span class="p">()</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">ChatPromptTemplate</span>

<span class="n">template</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">Answer the question based only on the following context:
{context}

Question: {question}
</span><span class="sh">"""</span>

<span class="n">prompt</span> <span class="o">=</span> <span class="n">ChatPromptTemplate</span><span class="p">.</span><span class="nf">from_template</span><span class="p">(</span><span class="n">template</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_core.runnables</span> <span class="kn">import</span> <span class="n">RunnablePassthrough</span>

<span class="n">prompt_chain</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">context</span><span class="sh">"</span><span class="p">:</span> <span class="n">retriever</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">question</span><span class="sh">"</span><span class="p">:</span> <span class="nc">RunnablePassthrough</span><span class="p">(),</span>
<span class="p">}</span> <span class="o">|</span> <span class="n">prompt</span>
<span class="n">prompt_text</span> <span class="o">=</span> <span class="n">prompt_chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="sh">"</span><span class="s">where did harrison work?</span><span class="sh">"</span><span class="p">).</span><span class="nf">to_string</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="n">prompt_text</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Human: Answer the question based only on the following context:
[Document(id='d03a67c7-a031-43aa-a27c-6411f9dd0dba', metadata={}, page_content='harrison worked at kensho')]

Question: where did harrison work?</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_core.output_parsers</span> <span class="kn">import</span> <span class="n">StrOutputParser</span>
<span class="kn">from</span> <span class="n">langchain_openai</span> <span class="kn">import</span> <span class="n">ChatOpenAI</span>

<span class="n">llm</span> <span class="o">=</span> <span class="nc">ChatOpenAI</span><span class="p">()</span>

<span class="n">retrieval_chain</span> <span class="o">=</span> <span class="p">(</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">context</span><span class="sh">"</span><span class="p">:</span> <span class="n">retriever</span><span class="p">,</span> <span class="sh">"</span><span class="s">question</span><span class="sh">"</span><span class="p">:</span> <span class="nc">RunnablePassthrough</span><span class="p">()}</span>
    <span class="o">|</span> <span class="n">prompt</span>
    <span class="o">|</span> <span class="n">llm</span>
    <span class="o">|</span> <span class="nc">StrOutputParser</span><span class="p">()</span>
<span class="p">)</span>

<span class="n">output</span> <span class="o">=</span> <span class="n">retrieval_chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="sh">"</span><span class="s">where did harrison work?</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Harrison worked at Kensho.</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In LCEL chains, the two main composition primitives are <code>RunnableSequence</code> and <code>RunnableParallel</code>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>RunnableSequence</code> is a composition primitive to chain multiple runnables sequentially, with the output of one runnable serving as the input to the next.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_core.runnables</span> <span class="kn">import</span> <span class="n">RunnableSequence</span>
<span class="n">chain</span> <span class="o">=</span> <span class="nc">RunnableSequence</span><span class="p">([</span><span class="n">runnable1</span><span class="p">,</span> <span class="n">runnable2</span><span class="p">])</span>
<span class="n">final_output</span> <span class="o">=</span> <span class="n">chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="n">some_input</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>corresponds to the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">output1</span> <span class="o">=</span> <span class="n">runnable1</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="n">some_input</span><span class="p">)</span>
<span class="n">final_output</span> <span class="o">=</span> <span class="n">runnable2</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="n">output1</span><span class="p">)</span></code></pre>
</div>
</div>
</li>
<li>
<p><code>RunnableParallel</code> is a composition primitive to run multiple runnables concurrently, with the same input provided to each.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_core.runnables</span> <span class="kn">import</span> <span class="n">RunnableParallel</span>
<span class="n">chain</span> <span class="o">=</span> <span class="nc">RunnableParallel</span><span class="p">({</span>
    <span class="sh">"</span><span class="s">key1</span><span class="sh">"</span><span class="p">:</span> <span class="n">runnable1</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">key2</span><span class="sh">"</span><span class="p">:</span> <span class="n">runnable2</span><span class="p">,</span>
<span class="p">})</span>
<span class="n">final_output</span> <span class="o">=</span> <span class="n">chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="n">some_input</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="p">{</span>
    <span class="sh">"</span><span class="s">key1</span><span class="sh">"</span><span class="p">:</span> <span class="n">runnable1</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="n">some_input</span><span class="p">),</span>
    <span class="sh">"</span><span class="s">key2</span><span class="sh">"</span><span class="p">:</span> <span class="n">runnable2</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="n">some_input</span><span class="p">),</span>
<span class="p">}</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <code>|</code> (pipe) operator have been overloaded to create a <code>RunnableSequence</code> from two <code>Runnables</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">chain</span> <span class="o">=</span> <span class="n">runnable1</span> <span class="o">|</span> <span class="n">runnable2</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>is Equivalent to:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">chain</span> <span class="o">=</span> <span class="nc">RunnableSequence</span><span class="p">([</span><span class="n">runnable1</span><span class="p">,</span> <span class="n">runnable2</span><span class="p">])</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>is Equivalent to:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">chain</span> <span class="o">=</span> <span class="n">runnable1</span><span class="p">.</span><span class="nf">pipe</span><span class="p">(</span><span class="n">runnable2</span><span class="p">)</span></code></pre>
</div>
</div>
</li>
<li>
<p>LCEL applies automatic type coercion to make it easier to compose chains.</p>
<div class="ulist">
<ul>
<li>
<p>Inside an LCEL expression, a dictionary is automatically converted to a <code>RunnableParallel</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">mapping</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">key1</span><span class="sh">"</span><span class="p">:</span> <span class="n">runnable1</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">key2</span><span class="sh">"</span><span class="p">:</span> <span class="n">runnable2</span><span class="p">,</span>
<span class="p">}</span>

<span class="n">chain</span> <span class="o">=</span> <span class="n">mapping</span> <span class="o">|</span> <span class="n">runnable3</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>is automatically converted to the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">chain</span> <span class="o">=</span> <span class="nc">RunnableSequence</span><span class="p">([</span><span class="nc">RunnableParallel</span><span class="p">(</span><span class="n">mapping</span><span class="p">),</span> <span class="n">runnable3</span><span class="p">])</span></code></pre>
</div>
</div>
</li>
<li>
<p>Inside an LCEL expression, a function is automatically converted to a <code>RunnableLambda</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="k">def</span> <span class="nf">some_func</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span>

<span class="n">chain</span> <span class="o">=</span> <span class="n">some_func</span> <span class="o">|</span> <span class="n">runnable1</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>is automatically converted to the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">chain</span> <span class="o">=</span> <span class="nc">RunnableSequence</span><span class="p">([</span><span class="nc">RunnableLambda</span><span class="p">(</span><span class="n">some_func</span><span class="p">),</span> <span class="n">runnable1</span><span class="p">])</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>A <code>dict</code> object defines data routing in LCEL by mapping keys to Runnables, functions, or static values, while <code>RunnablePassthrough</code> duplicates data across the pipeline as a data conduit to orchestrate chain flow.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">chain</span> <span class="o">=</span> <span class="p">(</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="nc">RunnablePassthrough</span><span class="p">()}</span>    <span class="c1"># capture initial input
</span>    <span class="o">|</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">llm_chain</span><span class="p">,</span>            <span class="c1"># generate LLM output
</span>        <span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="nc">RunnablePassthrough</span><span class="p">()</span>  <span class="c1"># maintain original input
</span>    <span class="p">}</span>
<span class="p">)</span>
<span class="c1"># output: {"output": "LLM's answer", "input": "user's question"}</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="semantic-search-and-retrieval-augmented-generation">8. Semantic Search and Retrieval-Augmented Generation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dense retrieval, reranking, and Retrieval-Augmented Generation (RAG) represent three significant strategies for enhancing search using language models.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><em>Dense retrieval</em> systems rely on the concept of embeddings, and turn the search problem into retrieving the nearest neighbors of the search query (after both the query and the documents are converted into embeddings).</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/dense-retrieval.png" alt="Dense retrieval" width="35%" height="35%">
</div>
<div class="title">Figure 89. Dense retrieval is one of the key types of semantic search, relying on the similarity of text embeddings to retrieve relevant results.</div>
</div>
</li>
<li>
<p>A <em>reranking</em> language model is one of multiple steps in search system pipelines and is tasked with scoring the relevance of a subset of results against the query; the order of results is then changed based on these scores.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/reranking.png" alt="Rerankers" width="35%" height="35%">
</div>
<div class="title">Figure 90. Rerankers, the second key type of semantic search, take a search query and a collection of results, and reorder them by relevance, often resulting in vastly improved results.</div>
</div>
</li>
<li>
<p>An <em>RAG</em> (Retrieval-Augmented Generation) system is a text generation system that incorporates search capabilities to reduce hallucinations, increase factuality, and/or ground the generation model on a specific dataset.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/rag.png" alt="RAG" width="35%" height="35%">
</div>
<div class="title">Figure 91. A RAG system formulates an answer to a question and (preferably) cites its information sources.</div>
</div>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="semantic-search-with-language-models">8.1. Semantic Search with Language Models</h3>
<div class="paragraph">
<p>An embedding is a numeric representation of text, where each text is intuitively represented as a point (or a vector), and texts with similar meaning are close to each other in the high multi-dimensional embedding space.</p>
</div>
<div class="sect3">
<h4 id="dense-retrieval">8.1.1. Dense Retrieval</h4>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/dense-retrieval-query.png" alt="Dense retrieval" width="25%" height="25%">
</div>
<div class="title">Figure 92. Dense retrieval relies on the property that search queries will be close to their relevant results.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># dense retrieval with FAISS
</span><span class="kn">from</span> <span class="n">sentence_transformers</span> <span class="kn">import</span> <span class="n">SentenceTransformer</span>
<span class="kn">import</span> <span class="n">faiss</span>

<span class="n">text</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">
Artificial intelligence was founded as an academic discipline in 1956.
Alan Turing was the first person to conduct substantial research in AI.
Born in Maida Vale, London, Turing was raised in southern England.
</span><span class="sh">"""</span>
<span class="n">sentences</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>
<span class="n">sentences</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">sentences</span> <span class="k">if</span> <span class="n">s</span><span class="p">.</span><span class="nf">strip</span><span class="p">()]</span>

<span class="n">model</span> <span class="o">=</span> <span class="nc">SentenceTransformer</span><span class="p">(</span><span class="sh">"</span><span class="s">sentence-transformers/all-MiniLM-L6-v2</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># embedding the text chunks.
</span><span class="n">xb</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="n">sentences</span><span class="p">)</span>

<span class="c1"># building the search index.
</span><span class="n">d</span> <span class="o">=</span> <span class="n">xb</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">index</span> <span class="o">=</span> <span class="n">faiss</span><span class="p">.</span><span class="nc">IndexFlatL2</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
<span class="n">index</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">xb</span><span class="p">)</span>

<span class="c1"># search the index
</span><span class="n">q</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Who is Alan Turing?</span><span class="sh">"</span>
<span class="n">xq</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">encode</span><span class="p">([</span><span class="n">q</span><span class="p">])</span>
<span class="n">distances</span><span class="p">,</span> <span class="n">indices</span> <span class="o">=</span> <span class="n">index</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">xq</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Q: </span><span class="si">{</span><span class="n">q</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">indices</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
    <span class="n">sentence</span> <span class="o">=</span> <span class="n">sentences</span><span class="p">[</span><span class="n">indices</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]]</span>
    <span class="n">distance</span> <span class="o">=</span> <span class="n">distances</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">  Sentence: </span><span class="si">{</span><span class="n">sentence</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">  Distance: </span><span class="si">{</span><span class="n">distance</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Q: Who is Alan Turing?
  Sentence: Alan Turing was the first person to conduct substantial research in AI
  Distance: 0.4903
  Sentence: Born in Maida Vale, London, Turing was raised in southern England
  Distance: 1.0674
  Sentence: Artificial intelligence was founded as an academic discipline in 1956
  Distance: 1.4276</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># keyword search with BM25
</span><span class="kn">import</span> <span class="n">string</span>

<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">rank_bm25</span> <span class="kn">import</span> <span class="n">BM25Okapi</span>
<span class="kn">from</span> <span class="n">sklearn.feature_extraction</span> <span class="kn">import</span> <span class="n">_stop_words</span>
<span class="kn">from</span> <span class="n">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>


<span class="k">def</span> <span class="nf">bm25_tokenizer</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">tokenized_doc</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">text</span><span class="p">.</span><span class="nf">lower</span><span class="p">().</span><span class="nf">split</span><span class="p">():</span>
        <span class="n">token</span> <span class="o">=</span> <span class="n">token</span><span class="p">.</span><span class="nf">strip</span><span class="p">(</span><span class="n">string</span><span class="p">.</span><span class="n">punctuation</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">token</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">token</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">_stop_words</span><span class="p">.</span><span class="n">ENGLISH_STOP_WORDS</span><span class="p">:</span>
            <span class="n">tokenized_doc</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">tokenized_doc</span>


<span class="n">tokenized_corpus</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">text</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">
Artificial intelligence was founded as an academic discipline in 1956.
Alan Turing was the first person to conduct substantial research in AI.
Born in Maida Vale, London, Turing was raised in southern England.
</span><span class="sh">"""</span>
<span class="n">texts</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)</span>

<span class="k">for</span> <span class="n">passage</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="n">texts</span><span class="p">):</span>
    <span class="n">tokenized_corpus</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">bm25_tokenizer</span><span class="p">(</span><span class="n">passage</span><span class="p">))</span>

<span class="n">bm25</span> <span class="o">=</span> <span class="nc">BM25Okapi</span><span class="p">(</span><span class="n">tokenized_corpus</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">keyword_search</span><span class="p">(</span><span class="n">q</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">3</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Input question:</span><span class="sh">"</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span>
    <span class="n">bm25_scores</span> <span class="o">=</span> <span class="n">bm25</span><span class="p">.</span><span class="nf">get_scores</span><span class="p">(</span><span class="nf">bm25_tokenizer</span><span class="p">(</span><span class="n">q</span><span class="p">))</span>
    <span class="n">top_n</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">argpartition</span><span class="p">(</span><span class="n">bm25_scores</span><span class="p">,</span> <span class="o">-</span><span class="n">n</span><span class="p">)[</span><span class="o">-</span><span class="n">n</span><span class="p">:]</span>
    <span class="n">bm25_hits</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">'</span><span class="s">corpus_id</span><span class="sh">'</span><span class="p">:</span> <span class="n">idx</span><span class="p">,</span> <span class="sh">'</span><span class="s">score</span><span class="sh">'</span><span class="p">:</span> <span class="n">bm25_scores</span><span class="p">[</span><span class="n">idx</span><span class="p">]}</span> <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="n">top_n</span>
    <span class="p">]</span>
    <span class="n">bm25_hits</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">bm25_hits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="sh">'</span><span class="s">score</span><span class="sh">'</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Top-3 lexical search (BM25) hits</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">hit</span> <span class="ow">in</span> <span class="n">bm25_hits</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">k</span><span class="p">]:</span>
        <span class="nf">print</span><span class="p">(</span>
            <span class="sh">"</span><span class="se">\t</span><span class="s">{:.3f}</span><span class="se">\t</span><span class="s">{}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span>
                <span class="n">hit</span><span class="p">[</span><span class="sh">'</span><span class="s">score</span><span class="sh">'</span><span class="p">],</span> <span class="n">texts</span><span class="p">[</span><span class="n">hit</span><span class="p">[</span><span class="sh">'</span><span class="s">corpus_id</span><span class="sh">'</span><span class="p">]].</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
            <span class="p">)</span>
        <span class="p">)</span>


<span class="n">q</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Who is Alan Turing?</span><span class="sh">"</span>
<span class="nf">keyword_search</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="n">q</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">texts</span><span class="p">))</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Input question: Who is Alan Turing?
Top-3 lexical search (BM25) hits
	0.737	 Alan Turing was the first person to conduct substantial research in AI
	0.000	 Artificial intelligence was founded as an academic discipline in 1956
	0.000	 Born in Maida Vale, London, Turing was raised in southern England</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>It’s useful to be aware of some of the drawbacks of dense retrieval and how to address them.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Lack of Answer in Retrieved Texts</p>
<div class="paragraph">
<p>Dense retrieval always returns results based on semantic similarity, even if none of the texts actually contain the answer to the query. A potential solution is to implement a distance threshold to filter out results that are not sufficiently relevant. User feedback (click-through rates and satisfaction) can also help improve the system over time.</p>
</div>
</li>
<li>
<p>Difficulty with Exact Phrase Matches</p>
<div class="paragraph">
<p>Dense retrieval, relying on semantic similarity, may not perform well when a user is looking for an exact match of a specific phrase. In such cases, traditional keyword matching is more effective, suggesting the use of hybrid search systems that combine both approaches.</p>
</div>
</li>
<li>
<p>Domain Specificity</p>
<div class="paragraph">
<p>Dense retrieval models trained on data from one domain (e.g., internet and Wikipedia) may not generalize well to other, unseen domains (e.g., legal texts) without sufficient training data from that new domain.</p>
</div>
</li>
<li>
<p>Handling Multi-Sentence Answers</p>
<div class="paragraph">
<p>Dense retrieval systems face the challenge of how to best chunk long texts into embeddings. A key design parameter is deciding the optimal way to divide documents, as answers to some questions may span multiple sentences, and models have context size limitations. Chunking strategies include embedding per document (which can lose information) or embedding multiple chunks per document (which offers better coverage). Various chunking methods exist, such as by sentence, paragraph, or overlapping segments to retain context, with the best approach depending on the text and query types.</p>
</div>
</li>
<li>
<p>Scalability and Efficiency</p>
<div class="paragraph">
<p>While simple nearest neighbor search with tools like NumPy works for smaller datasets, for millions of vectors, optimized approximate nearest neighbor (ANN) search libraries like FAISS or Annoy are necessary for efficient retrieval. Vector databases like Weaviate or Pinecone offer additional functionalities like adding/deleting vectors without rebuilding the index and advanced filtering options.</p>
</div>
</li>
<li>
<p>Need for Fine-Tuning</p>
<div class="paragraph">
<p>To optimize dense retrieval for specific tasks, fine-tuning the embedding models with relevant query-result pairs (including negative examples) is crucial. This process aims to bring embeddings of relevant queries and results closer together in the vector space while pushing irrelevant ones further apart.</p>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="reranking">8.1.2. Reranking</h4>
<div class="paragraph">
<p>A reranker takes in the search query and a number of search results, and returns the optimal ordering of these documents so the most relevant ones to the query are higher in ranking.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/search-reranker.png" alt="LLM rerankers operate on shortlisted search results by relevance." width="35%" height="35%">
</div>
<div class="title">Figure 93. LLM rerankers operate as part of a search pipeline with the goal of reordering a number of shortlisted search results by relevance.</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/reranker-model-work.png" alt="How reranking models work" width="35%" height="35%">
</div>
<div class="title">Figure 94. A reranker assigns a relevance score to each document by looking at the document and the query at the same time.</div>
</div>
<div class="paragraph">
<p>For the retrieval, either lexical search, e.g. with a vector engine like Elasticsearch, or dense retrieval with a <a href="https://huggingface.co/models?library=sentence-transformers&amp;author=sentence-transformers"><code>SentenceTransformer</code></a> (a.k.a. bi-encoder) can be used. However, the retrieval system might retrieve documents that are not that relevant for the search query. Hence, in a second stage, a re-ranker based on a <a href="https://huggingface.co/models?library=sentence-transformers&amp;author=cross-encoder"><code>CrossEncoder</code></a> that scores the relevancy of all shortlisted candidates for the given search query can be used to output a ranked list.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/bi-cross-encoder.png" alt="Bi vs Cross Encoder" width="30%" height="30%">
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">sentence_transformers</span> <span class="kn">import</span> <span class="n">SentenceTransformer</span>

<span class="n">bi_encoder</span> <span class="o">=</span> <span class="nc">SentenceTransformer</span><span class="p">(</span><span class="sh">"</span><span class="s">all-MiniLM-L6-v2</span><span class="sh">"</span><span class="p">)</span>

<span class="n">corpus</span> <span class="o">=</span> <span class="p">[</span>
    <span class="sh">"</span><span class="s">A man is eating food.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">A man is eating a piece of bread.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">The girl is carrying a baby.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">A man is riding a horse.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">A woman is playing violin.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">Two men pushed carts through the woods.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">A man is riding a white horse on an enclosed ground.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">A monkey is playing drums.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">A cheetah is running behind its prey.</span><span class="sh">"</span><span class="p">,</span>
<span class="p">]</span>

<span class="n">corpus_embeddings</span> <span class="o">=</span> <span class="n">bi_encoder</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="n">corpus</span><span class="p">,</span> <span class="n">convert_to_tensor</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">query</span> <span class="o">=</span> <span class="sh">"</span><span class="s">A man is eating pasta.</span><span class="sh">"</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">query_embedding</span> <span class="o">=</span> <span class="n">bi_encoder</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">convert_to_tensor</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">top_N</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">corpus</span><span class="p">))</span>
<span class="n">similarity_scores</span> <span class="o">=</span> <span class="n">bi_encoder</span><span class="p">.</span><span class="nf">similarity</span><span class="p">(</span><span class="n">query_embedding</span><span class="p">,</span> <span class="n">corpus_embeddings</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

<span class="kn">import</span> <span class="n">torch</span>

<span class="n">scores</span><span class="p">,</span> <span class="n">indices</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">topk</span><span class="p">(</span><span class="n">similarity_scores</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="n">top_N</span><span class="p">)</span>

<span class="n">documents</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">score</span><span class="p">,</span> <span class="n">index</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">indices</span><span class="p">):</span>
    <span class="n">document</span> <span class="o">=</span> <span class="n">corpus</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">(</span><span class="si">{</span><span class="n">score</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">,</span> <span class="n">document</span><span class="p">)</span>
    <span class="n">documents</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">document</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">(0.7035) A man is eating food.
(0.5272) A man is eating a piece of bread.
(0.1889) A man is riding a horse.
(0.1047) A man is riding a white horse on an enclosed ground.
(0.0980) A cheetah is running behind its prey.
(0.0819) A monkey is playing drums.
(0.0336) A woman is playing violin.
(-0.0594) Two men pushed carts through the woods.
(-0.0898) The girl is carrying a baby.</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">sentence_transformers</span> <span class="kn">import</span> <span class="n">CrossEncoder</span>

<span class="n">cross_encoder</span> <span class="o">=</span> <span class="nc">CrossEncoder</span><span class="p">(</span><span class="sh">"</span><span class="s">cross-encoder/ms-marco-MiniLM-L-6-v2</span><span class="sh">"</span><span class="p">)</span>
<span class="n">top_K</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">top_N</span><span class="p">)</span>
<span class="n">ranking</span> <span class="o">=</span> <span class="n">cross_encoder</span><span class="p">.</span><span class="nf">rank</span><span class="p">(</span>
    <span class="n">query</span><span class="p">,</span>
    <span class="n">documents</span><span class="p">,</span>
    <span class="n">top_k</span><span class="o">=</span><span class="n">top_K</span><span class="p">,</span>
    <span class="n">return_documents</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>

<span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">ranking</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">(</span><span class="si">{</span><span class="n">r</span><span class="p">[</span><span class="sh">'</span><span class="s">score</span><span class="sh">'</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">,</span> <span class="n">r</span><span class="p">[</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">])</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">(1.9005) A man is eating food.
(1.4804) A man is eating a piece of bread.
(-7.0890) A man is riding a horse.
(-8.9042) A man is riding a white horse on an enclosed ground.
(-10.7628) A monkey is playing drums.</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="retrieval-augmented-generation-rag">8.2. Retrieval-Augmented Generation (RAG)</h3>
<div class="paragraph">
<p>RAG systems incorporate search capabilities in addition to generation capabilities to enhance factuality and reduce hallucinations.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/basic-rag-pipeline.png" alt="A basic RAG pipeline" width="35%" height="35%">
</div>
<div class="title">Figure 95. A basic RAG pipeline is made up of a search step followed by a grounded generation step where the LLM is prompted with the question and the information retrieved from the search step.</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/generative-search-rag-pipeline.png" alt="Generative search" width="35%" height="35%">
</div>
<div class="title">Figure 96. Generative search formulates answers and summaries at the end of a search pipeline while citing its sources (returned by the previous steps in the search system).</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/rag-prompt-flow.png" alt="RAG prompt flow" width="35%" height="35%">
</div>
<div class="title">Figure 97. Find the most relevant information to an input prompt by comparing the similarities between embeddings. The most relevant information is added to the prompt before giving it to the LLM.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_openai</span> <span class="kn">import</span> <span class="n">ChatOpenAI</span>

<span class="n">llm</span> <span class="o">=</span> <span class="nc">ChatOpenAI</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">mistral:7b-instruct</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">api_key</span><span class="o">=</span><span class="sh">'</span><span class="s">APK-KEY</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">base_url</span><span class="o">=</span><span class="sh">"</span><span class="s">http://localhost:11434/v1</span><span class="sh">"</span><span class="p">,</span>  <span class="c1"># Ollama
</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_text_splitters</span> <span class="kn">import</span> <span class="n">HTMLHeaderTextSplitter</span>

<span class="n">headers_to_split_on</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">h1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Header 1</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">h2</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Header 2</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">h3</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Header 3</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">h4</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Header 4</span><span class="sh">"</span><span class="p">),</span>
<span class="p">]</span>

<span class="n">html_splitter</span> <span class="o">=</span> <span class="nc">HTMLHeaderTextSplitter</span><span class="p">(</span><span class="n">headers_to_split_on</span><span class="p">)</span>
<span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://plato.stanford.edu/entries/goedel/</span><span class="sh">"</span>
<span class="n">documents</span> <span class="o">=</span> <span class="n">html_splitter</span><span class="p">.</span><span class="nf">split_text_from_url</span><span class="p">(</span><span class="n">url</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_community.vectorstores</span> <span class="kn">import</span> <span class="n">FAISS</span>
<span class="kn">from</span> <span class="n">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEmbeddings</span>

<span class="n">embeddings</span> <span class="o">=</span> <span class="nc">HuggingFaceEmbeddings</span><span class="p">(</span>
    <span class="n">model_name</span><span class="o">=</span><span class="sh">"</span><span class="s">sentence-transformers/all-MiniLM-L6-v2</span><span class="sh">"</span>
<span class="p">)</span>

<span class="n">db</span> <span class="o">=</span> <span class="n">FAISS</span><span class="p">.</span><span class="nf">from_documents</span><span class="p">(</span><span class="n">documents</span><span class="p">,</span> <span class="n">embeddings</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">PromptTemplate</span>

<span class="n">template</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">
Relevant information:
{context}
Provide a concise answer the following question using the relevant information
provided above:
{question}
</span><span class="sh">"""</span>
<span class="n">prompt</span> <span class="o">=</span> <span class="n">PromptTemplate</span><span class="p">.</span><span class="nf">from_template</span><span class="p">(</span><span class="n">template</span><span class="o">=</span><span class="n">template</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">langchain.chains.retrieval_qa.base</span> <span class="kn">import</span> <span class="n">RetrievalQA</span>

<span class="n">rag</span> <span class="o">=</span> <span class="n">RetrievalQA</span><span class="p">.</span><span class="nf">from_chain_type</span><span class="p">(</span>
    <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>
    <span class="n">chain_type</span><span class="o">=</span><span class="sh">"</span><span class="s">stuff</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">retriever</span><span class="o">=</span><span class="n">db</span><span class="p">.</span><span class="nf">as_retriever</span><span class="p">(),</span>
    <span class="n">chain_type_kwargs</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">prompt</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">},</span>
    <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">rag</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="sh">"</span><span class="s">Who is Kurt Gödel?</span><span class="sh">"</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">{'query': 'Who is Kurt Gödel?',
 'result': " Kurt Gödel was an Austrian mathematician and logician. He is best known for his work on the incompleteness theorems, which were established in 1930 and prove that any sufficiently rich formal axiomatic system contains either statements that cannot be proven or disproven within the system itself. Some of Gödel's other notable contributions include his proof of the consistency of the continuum hypothesis using large cardinals, and his work on undecidable propositions in number theory, which led to the concept of Gödel numbers for representing mathematical statements in a formal system. Throughout his life, Gödel also explored philosophical questions related to logic, mathematics, and metaphysics, including questions about realism, the foundations of mathematics, set theory, and the nature of time and truth."}</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="multimodal-large-language-models">9. Multimodal Large Language Models</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A multimodal model is a type of artificial intelligence model capable of processing and reasoning across different modalities, where a modality refers to a distinct type of data such as text, images, audio, video, or sensor data.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/multimodal-language-model.png" alt="Multimodal Large Language Models" width="35%" height="35%">
</div>
<div class="title">Figure 98. Models that are able to deal with different types (or modalities) of data, such as images, audio, video, or sensors, are said to be multimodal. It’s possible for a model to accept a modality as input yet not be able to generate in that modality.</div>
</div>
<div class="sect2">
<h3 id="vision-transformer-vit">9.1. Vision Transformer (ViT)</h3>
<div class="paragraph">
<p>Vision Transformer (ViT) is a method that adapts the Transformer architecture to the field of computer vision, particularly for image recognition tasks, by treating an image as a sequence of flattened image patches which are then linearly embedded and processed by the Transformer encoder in a manner similar to textual tokens, allowing it to capture global relationships in the image more directly than the local receptive fields of convolutional neural networks (CNNs).</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/vit-image-patch-embedding-encoder.png" alt="The main algorithm behind ViT" width="30%" height="30%">
</div>
<div class="title">Figure 99. The main algorithm behind ViT. After patching the images and linearly projecting them, the patch embeddings are passed to the encoder and treated as if they were textual tokens.</div>
</div>
</div>
<div class="sect2">
<h3 id="multimodal-embedding-models">9.2. Multimodal Embedding Models</h3>
<div class="paragraph">
<p>A multimodal embedding model is a type of model that can create numerical representations (embeddings) for multiple modalities, such as text and imagery, within the same vector space, allowing for direct comparison of representations from different modalities based on their semantic content.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/multimodal-vector-space.png" alt="Multimodal Embedding Models Space" width="30%" height="30%">
</div>
<div class="title">Figure 100. Despite having coming from different modalities, embeddings with similar meaning will be close to each other in vector space.</div>
</div>
<div class="paragraph">
<p>Contrastive Language-Image Pre-training (CLIP) is an embedding model to compute embeddings of both images and texts.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/first-step-of-traning-clip.png" alt="First step of traning CLIP" width="30%" height="30%">
</div>
<div class="title">Figure 101. In the first step of training CLIP, both images and text are embedded using an image and text encoder, respectively.</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/second-step-of-traning-clip.png" alt="Second step of training CLIP" width="30%" height="30%">
</div>
<div class="title">Figure 102. In the second step of training CLIP, the similarity between the sentence and image embedding is calculated using cosine similarity.</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/third-step-of-traning-clip.png" alt="Third step of training CLIP" width="30%" height="30%">
</div>
<div class="title">Figure 103. In the third step of training CLIP, the text and image encoders are updated to match what the intended similarity should be (called contrastive learning). This updates the embeddings such that they are closer in vector space if the inputs are similar.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">urllib.request</span> <span class="kn">import</span> <span class="n">urlopen</span>
<span class="kn">from</span> <span class="n">PIL</span> <span class="kn">import</span> <span class="n">Image</span>

<span class="c1"># load an AI-generated image of a puppy playing in the snow from a URL
</span><span class="n">puppy_path</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">https://raw.githubusercontent.com/</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">HandsOnLLM/Hands-On-Large-Language-Models/main/</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">chapter09/images/puppy.png</span><span class="sh">"</span>
<span class="p">)</span>
<span class="c1"># open the image from the URL and convert it to RGB format
</span><span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="nf">urlopen</span><span class="p">(</span><span class="n">puppy_path</span><span class="p">)).</span><span class="nf">convert</span><span class="p">(</span><span class="sh">"</span><span class="s">RGB</span><span class="sh">"</span><span class="p">)</span>
<span class="c1"># define a text caption for the image
</span><span class="n">caption</span> <span class="o">=</span> <span class="sh">"</span><span class="s">a puppy playing in the snow</span><span class="sh">"</span></code></pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/puppy-snow.png" alt="puppy snow" width="20%" height="20%">
</div>
<div class="title">Figure 104. An AI-generated image of a puppy playing in the snow.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">transformers</span> <span class="kn">import</span> <span class="n">CLIPTokenizer</span><span class="p">,</span> <span class="n">CLIPProcessor</span><span class="p">,</span> <span class="n">CLIPModel</span>

<span class="n">model_id</span> <span class="o">=</span> <span class="sh">"</span><span class="s">openai/clip-vit-base-patch32</span><span class="sh">"</span>

<span class="c1"># load the tokenizer associated with the CLIP model to preprocess text
</span><span class="n">clip_tokenizer</span> <span class="o">=</span> <span class="n">CLIPTokenizer</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">use_fast</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># load the processor associated with the CLIP model to preprocess images and text
</span><span class="n">clip_processor</span> <span class="o">=</span> <span class="n">CLIPProcessor</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">use_fast</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># load the main CLIP model for generating text and image embeddings
</span><span class="n">model</span> <span class="o">=</span> <span class="n">CLIPModel</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># tokenize the input caption into numerical representations
</span><span class="n">inputs</span> <span class="o">=</span> <span class="nf">clip_tokenizer</span><span class="p">(</span><span class="n">caption</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="sh">"</span><span class="s">pt</span><span class="sh">"</span><span class="p">)</span>
<span class="n">inputs</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">{'input_ids': tensor([[49406,   320,  6829,  1629,   530,   518,  2583, 49407]]), 'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1]])}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># convert the token IDs back to the corresponding text tokens
</span><span class="n">clip_tokenizer</span><span class="p">.</span><span class="nf">convert_ids_to_tokens</span><span class="p">(</span><span class="n">inputs</span><span class="p">[</span><span class="sh">"</span><span class="s">input_ids</span><span class="sh">"</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">['&lt;|startoftext|&gt;</span><span class="s1">',
</span><span class="gp"> 'a&lt;/w&gt;</span><span class="s1">'</span>,
<span class="gp"> 'puppy&lt;/w&gt;</span><span class="s1">',
</span><span class="gp"> 'playing&lt;/w&gt;</span><span class="s1">'</span>,
<span class="gp"> 'in&lt;/w&gt;</span><span class="s1">',
</span><span class="gp"> 'the&lt;/w&gt;</span><span class="s1">'</span>,
<span class="gp"> 'snow&lt;/w&gt;</span><span class="s1">',
</span><span class="gp"> '&lt;|endoftext|&gt;</span><span class="s1">'</span><span class="o">]</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># create a text embedding vector representing the semantic meaning of the caption
</span><span class="n">text_embedding</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">get_text_features</span><span class="p">(</span><span class="o">**</span><span class="n">inputs</span><span class="p">)</span>
<span class="n">text_embedding</span><span class="p">.</span><span class="n">shape</span>  <span class="c1"># (batch_size, embedding_dimension)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">torch.Size([1, 512])</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># preprocess the image to match the input requirements of the CLIP model
</span><span class="n">image_inputs</span> <span class="o">=</span> <span class="nf">clip_processor</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">images</span><span class="o">=</span><span class="n">image</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="sh">"</span><span class="s">pt</span><span class="sh">"</span><span class="p">)</span>
<span class="n">image_pixel_values</span> <span class="o">=</span> <span class="n">image_inputs</span><span class="p">[</span><span class="sh">"</span><span class="s">pixel_values</span><span class="sh">"</span><span class="p">]</span>
<span class="n">image_pixel_values</span><span class="p">.</span><span class="n">shape</span>  <span class="c1"># (batch_size, num_channels, height, width)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">torch.Size([1, 3, 224, 224])</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="c1"># prepare the preprocessed image tensor for visualization
</span><span class="n">img</span> <span class="o">=</span> <span class="n">image_pixel_values</span><span class="p">.</span><span class="nf">squeeze</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="c1"># remove the batch dimension
</span><span class="n">img</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="nf">permute</span><span class="p">(</span><span class="o">*</span><span class="n">torch</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">ndim</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span>
<span class="c1"># transpose dimensions for correct visualization order (C, H, W -&gt; H, W, C)
</span><span class="n">img</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">einsum</span><span class="p">(</span><span class="sh">"</span><span class="s">ijk-&gt;jik</span><span class="sh">"</span><span class="p">,</span> <span class="n">img</span><span class="p">)</span>
<span class="c1"># visualize the preprocessed image
</span><span class="n">plt</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
<span class="c1"># turn off axis labels and ticks
</span><span class="n">plt</span><span class="p">.</span><span class="nf">axis</span><span class="p">(</span><span class="sh">"</span><span class="s">off</span><span class="sh">"</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/puppy-snow-processed-by-clip.png" alt="puppy snow processed by clip" width="20%" height="20%">
</div>
<div class="title">Figure 105. The preprocessed input image by CLIP.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># create the image embedding vector representing the visual content of the image
</span><span class="n">image_embedding</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">get_image_features</span><span class="p">(</span><span class="n">image_pixel_values</span><span class="p">)</span>
<span class="n">image_embedding</span><span class="p">.</span><span class="n">shape</span>  <span class="c1"># (batch_size, embedding_dimension): same as that of the text embedding</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">torch.Size([1, 512])</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># normalize the text and image embeddings
</span><span class="n">text_embedding</span> <span class="o">/=</span> <span class="n">text_embedding</span><span class="p">.</span><span class="nf">norm</span><span class="p">(</span><span class="n">dim</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdim</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">image_embedding</span> <span class="o">/=</span> <span class="n">image_embedding</span><span class="p">.</span><span class="nf">norm</span><span class="p">(</span><span class="n">dim</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdim</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="c1"># calculate the cosine similarity score
</span><span class="n">text_embedding</span> <span class="o">=</span> <span class="n">text_embedding</span><span class="p">.</span><span class="nf">detach</span><span class="p">().</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">()</span>
<span class="c1"># move the text embedding to CPU and convert to NumPy array
</span><span class="n">image_embedding</span> <span class="o">=</span> <span class="n">image_embedding</span><span class="p">.</span><span class="nf">detach</span><span class="p">().</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">()</span>
<span class="c1"># move the image embedding to CPU and convert to NumPy array
</span><span class="n">score</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">text_embedding</span><span class="p">,</span> <span class="n">image_embedding</span><span class="p">.</span><span class="n">T</span><span class="p">)</span>
<span class="n">score</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">array([[0.33146894]], dtype=float32)</span></code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p><code>sentence-transformers</code> implements a few CLIP-based models that make it much easier to create embeddings. It only takes a few lines of code:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">urllib.request</span> <span class="kn">import</span> <span class="n">urlopen</span>
<span class="kn">from</span> <span class="n">PIL</span> <span class="kn">import</span> <span class="n">Image</span>

<span class="n">puppy_path</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">https://raw.githubusercontent.com/</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">HandsOnLLM/Hands-On-Large-Language-Models/main/</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">chapter09/images/puppy.png</span><span class="sh">"</span>
<span class="p">)</span>
<span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="nf">urlopen</span><span class="p">(</span><span class="n">puppy_path</span><span class="p">)).</span><span class="nf">convert</span><span class="p">(</span><span class="sh">"</span><span class="s">RGB</span><span class="sh">"</span><span class="p">)</span>
<span class="n">caption</span> <span class="o">=</span> <span class="sh">"</span><span class="s">a puppy playing in the snow</span><span class="sh">"</span>

<span class="kn">from</span> <span class="n">sentence_transformers</span> <span class="kn">import</span> <span class="n">SentenceTransformer</span><span class="p">,</span> <span class="n">util</span>

<span class="n">model</span> <span class="o">=</span> <span class="nc">SentenceTransformer</span><span class="p">(</span><span class="sh">"</span><span class="s">sentence-transformers/clip-ViT-B-32</span><span class="sh">"</span><span class="p">)</span>

<span class="n">image_embeddings</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">encode</span><span class="p">([</span><span class="n">image</span><span class="p">])</span>
<span class="n">text_embeddings</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">encode</span><span class="p">([</span><span class="n">caption</span><span class="p">])</span>

<span class="n">sim_matrix</span> <span class="o">=</span> <span class="n">util</span><span class="p">.</span><span class="nf">cos_sim</span><span class="p">(</span><span class="n">image_embeddings</span><span class="p">,</span> <span class="n">text_embeddings</span><span class="p">)</span>
<span class="n">sim_matrix</span>  <span class="c1"># tensor([[0.3315]])</span></code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="multimodal-text-generation-models">9.3. Multimodal Text Generation Models</h3>
<div class="paragraph">
<p>BLIP-2 (Bootstrapping Language-Image Pre-training for Unified Vision-Language Understanding and Generation 2) is a multimodal text generation model designed to introduce vision capabilities to existing, pre-trained language models (LLMs) without requiring end-to-end training from scratch.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/q-former-vit-llm-bridge.png" alt="The Querying Transformer is the bridge between vision (ViT) and text (LLM)" width="35%" height="35%">
</div>
<div class="title">Figure 106. The Querying Transformer is the bridge between vision (ViT) and text (LLM) that is the only trainable component of the pipeline.</div>
</div>
<div class="sect3">
<h4 id="blip-2-bridging-the-modality-gap">9.3.1. BLIP-2: Bridging the Modality Gap</h4>
<div class="paragraph">
<p>BLIP-2 bridges the vision-language gap by building a bridge, named the Querying Transformer (Q-Former), connecting a frozen (non-trainable) pre-trained image encoder like a Vision Transformer and a frozen pre-trained LLM.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The Q-Former is trained in two stages, one for each modality to make it possible for the Q-Former to learn visual and textual representations in the same dimensional space, which can be used as a soft prompt to the LLM to give information about the image in a similar manner to the context providing an LLM when prompting.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/the-full-blip-2.png" alt="The full BLIP-2 procedure." width="35%" height="35%">
</div>
<div class="title">Figure 107. In step 1, representation learning is applied to learn representations for vision and language simultaneously. In step 2, these representations are converted to soft visual prompts to feed the LLM.</div>
</div>
<div class="ulist">
<ul>
<li>
<p>In step 1, image-document pairs are used to train the Q-Former to represent both images and text, which are generally captions of images similar tranning CLIP.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/q-former-1-step-traning.png" alt="Q-Former three contrastive-like tasks to learn visual-text representations." width="35%" height="35%">
</div>
<div class="title">Figure 108. In step 1, the output of the frozen ViT is used together with its caption and trained on three contrastive-like tasks to learn visual-text representations.</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The images are fed to the frozen ViT to extract vision embeddings, which are used as the input of Q-Former’s ViT, and the captions are used as the input of Q-Former’s Text Transformer.</p>
</li>
<li>
<p>The Q-Former is then trained on three tasks: image-text contrastive learning that attempts to align pairs of image and text embeddings such that they maximize their mutual information, image-text matching that predicts whether an image and text pair is positive (matched) or negative (unmatched), and image-grounded text generation that generates text based on information extracted from the input image.</p>
</li>
</ul>
</div>
</li>
<li>
<p>In step 2, the learnable embeddings containing aligned visual and textual information in the same dimensional space from the Q-Former are projected to match the LLM&#8217;s input format and then serve as soft visual prompts, conditioning the LLM on the visual representations.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/q-former-2-step-traning.png" alt="In step 2, the learned embeddings from the Q-Former are passed to the LLM through a projection layer" width="35%" height="35%">
</div>
<div class="title">Figure 109. In step 2, the learned embeddings from the Q-Former are passed to the LLM through a projection layer. The projected embeddings serve as a soft visual prompt.</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="preprocessing-multimodal-inputs">9.3.2. Preprocessing Multimodal Inputs</h4>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">urllib.request</span> <span class="kn">import</span> <span class="n">urlopen</span>

<span class="kn">from</span> <span class="n">PIL</span> <span class="kn">import</span> <span class="n">Image</span>

<span class="c1"># load image of a supercar
</span><span class="n">car_path</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">https://raw.githubusercontent.com/</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">HandsOnLLM/Hands-On-Large-Language-Models/main/</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">chapter09/images/car.png</span><span class="sh">"</span>
<span class="p">)</span>
<span class="k">with</span> <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="nf">urlopen</span><span class="p">(</span><span class="n">car_path</span><span class="p">))</span> <span class="k">as</span> <span class="n">i</span><span class="p">:</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">i</span><span class="p">.</span><span class="nf">convert</span><span class="p">(</span><span class="sh">"</span><span class="s">RGB</span><span class="sh">"</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/orange-supercar.png" alt="An orange supercar driving on the road at sunset." width="10%" height="10%">
</div>
<div class="title">Figure 110. An orange supercar driving on the road at sunset.</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">from</span> <span class="n">transformers</span> <span class="kn">import</span> <span class="n">AutoProcessor</span><span class="p">,</span> <span class="n">Blip2ForConditionalGeneration</span>

<span class="c1"># load processor and main model
</span><span class="n">dev</span> <span class="o">=</span> <span class="sh">"</span><span class="s">cuda</span><span class="sh">"</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="sh">"</span><span class="s">cpu</span><span class="sh">"</span>
<span class="n">model_id</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Salesforce/blip2-opt-2.7b</span><span class="sh">"</span>
<span class="n">blip_processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">use_fast</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">Blip2ForConditionalGeneration</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span>
    <span class="n">model_id</span><span class="p">,</span>
    <span class="n">torch_dtype</span><span class="o">=</span><span class="n">torch</span><span class="p">.</span><span class="n">float16</span><span class="p">,</span>
    <span class="n">device_map</span><span class="o">=</span><span class="n">dev</span><span class="p">,</span>
<span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">model</span><span class="p">.</span><span class="n">vision_model</span>  <span class="c1"># vision transformer in the loaded BLIP-2 model.</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Blip2VisionModel(
  (embeddings): Blip2VisionEmbeddings(
    (patch_embedding): Conv2d(3, 1408, kernel_size=(14, 14), stride=(14, 14))
  )
  (encoder): Blip2Encoder(
    (layers): ModuleList(
      (0-38): 39 x Blip2EncoderLayer(
        (self_attn): Blip2Attention(
          (dropout): Dropout(p=0.0, inplace=False)
          (qkv): Linear(in_features=1408, out_features=4224, bias=True)
          (projection): Linear(in_features=1408, out_features=1408, bias=True)
        )
        (layer_norm1): LayerNorm((1408,), eps=1e-06, elementwise_affine=True)
        (mlp): Blip2MLP(
          (activation_fn): GELUActivation()
          (fc1): Linear(in_features=1408, out_features=6144, bias=True)
          (fc2): Linear(in_features=6144, out_features=1408, bias=True)
        )
        (layer_norm2): LayerNorm((1408,), eps=1e-06, elementwise_affine=True)
      )
    )
  )
  (post_layernorm): LayerNorm((1408,), eps=1e-06, elementwise_affine=True)
)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">model</span><span class="p">.</span><span class="n">language_model</span>  <span class="c1"># text generative model in the loaded BLIP-2 model.</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">OPTForCausalLM(
  (model): OPTModel(
    (decoder): OPTDecoder(
      (embed_tokens): Embedding(50304, 2560, padding_idx=1)
      (embed_positions): OPTLearnedPositionalEmbedding(2050, 2560)
      (final_layer_norm): LayerNorm((2560,), eps=1e-05, elementwise_affine=True)
      (layers): ModuleList(
        (0-31): 32 x OPTDecoderLayer(
          (self_attn): OPTSdpaAttention(
            (k_proj): Linear(in_features=2560, out_features=2560, bias=True)
            (v_proj): Linear(in_features=2560, out_features=2560, bias=True)
            (q_proj): Linear(in_features=2560, out_features=2560, bias=True)
            (out_proj): Linear(in_features=2560, out_features=2560, bias=True)
          )
          (activation_fn): ReLU()
          (self_attn_layer_norm): LayerNorm((2560,), eps=1e-05, elementwise_affine=True)
          (fc1): Linear(in_features=2560, out_features=10240, bias=True)
          (fc2): Linear(in_features=10240, out_features=2560, bias=True)
          (final_layer_norm): LayerNorm((2560,), eps=1e-05, elementwise_affine=True)
        )
      )
    )
  )
  (lm_head): Linear(in_features=2560, out_features=50304, bias=False)
)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># preprocess the image
</span><span class="n">image_inputs</span> <span class="o">=</span> <span class="nf">blip_processor</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="sh">"</span><span class="s">pt</span><span class="sh">"</span><span class="p">).</span><span class="nf">to</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">torch</span><span class="p">.</span><span class="n">float16</span><span class="p">)</span>
<span class="n">image_pixel_values</span> <span class="o">=</span> <span class="n">image_inputs</span><span class="p">[</span><span class="sh">"</span><span class="s">pixel_values</span><span class="sh">"</span><span class="p">]</span>
<span class="n">image_pixel_values</span><span class="p">.</span><span class="n">shape</span>  <span class="c1"># a 224 × 224-sized image</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">torch.Size([1, 3, 224, 224])</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># tokenizer used to tokenize the input text
</span><span class="n">blip_processor</span><span class="p">.</span><span class="n">tokenizer</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">GPT2TokenizerFast(name_or_path='Salesforce/blip2-opt-2.7b', vocab_size=50265, model_max_length=1000000000000000019884624838656, is_fast=True, padding_side='right', truncation_side='right', special_tokens={'bos_token': '&lt;/s&gt;</span><span class="s1">', '</span>eos_token<span class="s1">': '</span>&lt;/s&gt;<span class="s1">', '</span>unk_token<span class="s1">': '</span>&lt;/s&gt;<span class="s1">', '</span>pad_token<span class="s1">': '</span>&lt;pad&gt;<span class="s1">'}, clean_up_tokenization_spaces=False, added_tokens_decoder={
</span><span class="gp">	1: AddedToken("&lt;pad&gt;</span><span class="s1">", rstrip=False, lstrip=False, single_word=False, normalized=True, special=True),
</span><span class="gp">	2: AddedToken("&lt;/s&gt;</span><span class="s1">", rstrip=False, lstrip=False, single_word=False, normalized=True, special=True),
</span><span class="gp">	50265: AddedToken("&lt;image&gt;</span><span class="s1">", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),
</span><span class="go">}
)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># preprocess the text
</span><span class="n">text</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Her vocalization was remarkably melodic</span><span class="sh">"</span>
<span class="n">token_ids</span> <span class="o">=</span> <span class="nf">blip_processor</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="sh">"</span><span class="s">pt</span><span class="sh">"</span><span class="p">)</span>
<span class="n">token_ids</span> <span class="o">=</span> <span class="n">token_ids</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">torch</span><span class="p">.</span><span class="n">float16</span><span class="p">)[</span><span class="sh">"</span><span class="s">input_ids</span><span class="sh">"</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>

<span class="c1"># convert input ids back to tokens
</span><span class="n">tokens</span> <span class="o">=</span> <span class="n">blip_processor</span><span class="p">.</span><span class="n">tokenizer</span><span class="p">.</span><span class="nf">convert_ids_to_tokens</span><span class="p">(</span><span class="n">token_ids</span><span class="p">)</span>
<span class="n">tokens</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">['&lt;/s&gt;</span><span class="s1">', '</span>Her<span class="s1">', '</span>Ġvocal<span class="s1">', '</span>ization<span class="s1">', '</span>Ġwas<span class="s1">', '</span>Ġremarkably<span class="s1">', '</span>Ġmel<span class="s1">', '</span>odic<span class="s1">']</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># replace the space token with an underscore
</span><span class="n">tokens</span> <span class="o">=</span> <span class="p">[</span><span class="n">token</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">Ġ</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">tokens</span><span class="p">]</span>
<span class="n">tokens</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">['&lt;/s&gt;</span><span class="s1">', '</span>Her<span class="s1">', '</span>_vocal<span class="s1">', '</span>ization<span class="s1">', '</span>_was<span class="s1">', '</span>_remarkably<span class="s1">', '</span>_mel<span class="s1">', '</span>odic<span class="s1">']</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="use-case-1-image-captioning">9.3.3. Use Case 1: Image Captioning</h4>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">urllib.request</span> <span class="kn">import</span> <span class="n">urlopen</span>

<span class="kn">import</span> <span class="n">torch</span>
<span class="kn">from</span> <span class="n">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">from</span> <span class="n">transformers</span> <span class="kn">import</span> <span class="n">AutoProcessor</span><span class="p">,</span> <span class="n">Blip2ForConditionalGeneration</span>

<span class="c1"># load processor and main model
</span><span class="n">dev</span> <span class="o">=</span> <span class="sh">"</span><span class="s">cuda</span><span class="sh">"</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="sh">"</span><span class="s">cpu</span><span class="sh">"</span>
<span class="n">dtype</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">float16</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="n">torch</span><span class="p">.</span><span class="n">float32</span>

<span class="n">model_id</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Salesforce/blip2-opt-2.7b</span><span class="sh">"</span>
<span class="n">blip_processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">use_fast</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">Blip2ForConditionalGeneration</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span>
    <span class="n">model_id</span><span class="p">,</span>
    <span class="n">torch_dtype</span><span class="o">=</span><span class="n">dtype</span><span class="p">,</span>
    <span class="n">device_map</span><span class="o">=</span><span class="n">dev</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># load an AI-generated image of a supercar
</span><span class="n">car_path</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">https://raw.githubusercontent.com/</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">HandsOnLLM/Hands-On-Large-Language-Models/main/</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">chapter09/images/car.png</span><span class="sh">"</span>
<span class="p">)</span>
<span class="k">with</span> <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="nf">urlopen</span><span class="p">(</span><span class="n">car_path</span><span class="p">))</span> <span class="k">as</span> <span class="n">i</span><span class="p">:</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">i</span><span class="p">.</span><span class="nf">convert</span><span class="p">(</span><span class="sh">"</span><span class="s">RGB</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># convert an image into inputs and preprocess it
</span><span class="n">inputs</span> <span class="o">=</span> <span class="nf">blip_processor</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="sh">"</span><span class="s">pt</span><span class="sh">"</span><span class="p">).</span><span class="nf">to</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">dtype</span><span class="p">)</span>
<span class="c1"># {'pixel_values': tensor([[[[-1.0039, -1.0039, -0.9893,  ..., -0.0842, -0.0988, -0.0842],
</span>
<span class="c1"># generate image ids to be passed to the decoder (LLM)
</span><span class="n">generated_ids</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">generate</span><span class="p">(</span><span class="o">**</span><span class="n">inputs</span><span class="p">,</span> <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>

<span class="c1"># generate text from the image ids
</span><span class="n">generated_text</span> <span class="o">=</span> <span class="n">blip_processor</span><span class="p">.</span><span class="nf">batch_decode</span><span class="p">(</span>
    <span class="n">generated_ids</span><span class="p">,</span> <span class="n">skip_special_tokens</span><span class="o">=</span><span class="bp">True</span>
<span class="p">)</span>
<span class="n">generated_text</span> <span class="o">=</span> <span class="n">generated_text</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">strip</span><span class="p">()</span>
<span class="n">generated_text</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">an orange supercar driving on the road at sunset</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="use-case-2-multimodal-chat-based-prompting">9.3.4. Use Case 2: Multimodal Chat-Based Prompting</h4>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">urllib.request</span> <span class="kn">import</span> <span class="n">urlopen</span>

<span class="kn">import</span> <span class="n">torch</span>
<span class="kn">from</span> <span class="n">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">from</span> <span class="n">transformers</span> <span class="kn">import</span> <span class="n">AutoProcessor</span><span class="p">,</span> <span class="n">Blip2ForConditionalGeneration</span>

<span class="c1"># load processor and main model
</span><span class="n">dev</span> <span class="o">=</span> <span class="sh">"</span><span class="s">cuda</span><span class="sh">"</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="sh">"</span><span class="s">cpu</span><span class="sh">"</span>
<span class="n">dtype</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">float16</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="n">torch</span><span class="p">.</span><span class="n">float32</span>

<span class="n">model_id</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Salesforce/blip2-opt-2.7b</span><span class="sh">"</span>
<span class="n">blip_processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">use_fast</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">Blip2ForConditionalGeneration</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span>
    <span class="n">model_id</span><span class="p">,</span>
    <span class="n">torch_dtype</span><span class="o">=</span><span class="n">dtype</span><span class="p">,</span>
    <span class="n">device_map</span><span class="o">=</span><span class="n">dev</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># load an AI-generated image of a supercar
</span><span class="n">car_path</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">https://raw.githubusercontent.com/</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">HandsOnLLM/Hands-On-Large-Language-Models/main/</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">chapter09/images/car.png</span><span class="sh">"</span>
<span class="p">)</span>
<span class="k">with</span> <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="nf">urlopen</span><span class="p">(</span><span class="n">car_path</span><span class="p">))</span> <span class="k">as</span> <span class="n">i</span><span class="p">:</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">i</span><span class="p">.</span><span class="nf">convert</span><span class="p">(</span><span class="sh">"</span><span class="s">RGB</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># visual question answering
</span><span class="n">prompt</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Question: Write down what you see in this picture. Answer:</span><span class="sh">"</span>

<span class="c1"># process both the image and the prompt
</span><span class="n">inputs</span> <span class="o">=</span> <span class="nf">blip_processor</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="sh">"</span><span class="s">pt</span><span class="sh">"</span><span class="p">).</span><span class="nf">to</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">dtype</span><span class="p">)</span>

<span class="c1"># generate text
</span><span class="n">generated_ids</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">generate</span><span class="p">(</span><span class="o">**</span><span class="n">inputs</span><span class="p">,</span> <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
<span class="n">generated_text</span> <span class="o">=</span> <span class="n">blip_processor</span><span class="p">.</span><span class="nf">batch_decode</span><span class="p">(</span>
    <span class="n">generated_ids</span><span class="p">,</span> <span class="n">skip_special_tokens</span><span class="o">=</span><span class="bp">True</span>
<span class="p">)</span>
<span class="n">generated_text</span> <span class="o">=</span> <span class="n">generated_text</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">strip</span><span class="p">()</span>
<span class="n">generated_text</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Question: Write down what you see in this picture. Answer: A sports car driving on the road at sunset</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># chat-like prompting: a follow-up question
</span><span class="n">prompt</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">Question: Write down what you see in this picture. Answer: A sports </span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">car driving on the road at sunset. Question: What would it cost me to </span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">drive that car? Answer:</span><span class="sh">"</span>
<span class="p">)</span>
<span class="c1"># Generate output
</span><span class="n">inputs</span> <span class="o">=</span> <span class="nf">blip_processor</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="sh">"</span><span class="s">pt</span><span class="sh">"</span><span class="p">).</span><span class="nf">to</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">dtype</span><span class="p">)</span>
<span class="n">generated_ids</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">generate</span><span class="p">(</span><span class="o">**</span><span class="n">inputs</span><span class="p">,</span> <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
<span class="n">generated_text</span> <span class="o">=</span> <span class="n">blip_processor</span><span class="p">.</span><span class="nf">batch_decode</span><span class="p">(</span>
    <span class="n">generated_ids</span><span class="p">,</span> <span class="n">skip_special_tokens</span><span class="o">=</span><span class="bp">True</span>
<span class="p">)</span>
<span class="n">generated_text</span> <span class="o">=</span> <span class="n">generated_text</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">strip</span><span class="p">()</span>
<span class="n">generated_text</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">Question: Write down what you see in this picture. Answer: A sports car driving on the road at sunset. Question: What would it cost me to drive that car? Answer: $</span>1,000,000</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="creating-and-fine-tuning-text-embedding-models">10. Creating and Fine-Tuning Text Embedding Models</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Embedding models are Large Language Models (LLMs) used to convert unstructured textual data (like documents, sentences, or phrases) into dense numerical representations called embeddings.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The primary goal of these models is to accurately capture the semantic meaning of the text, such that texts with similar meanings have embeddings that are close to each other in a high-dimensional vector space, while texts with different meanings have dissimilar embeddings.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/embedding-semantic-similarity-n-d-space.png" alt="Embedding model on semantic similarity" width="35%" height="35%">
</div>
<div class="title">Figure 111. The idea of semantic similarity is that we expect textual data with similar meanings to be closer to each other in n-dimensional space (two dimensions are illustra‐ ted here).</div>
</div>
</li>
<li>
<p>Embedding models can also be trained or fine-tuned for other purposes, such as capturing sentiment similarity, by guiding the model with appropriate training examples.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/embedding-sentiment-similarity-n-d-space.png" alt="Embedding model on sentiment similarity" width="35%" height="35%">
</div>
<div class="title">Figure 112. In addition to semantic similarity, an embedding model can be trained to focus on sentiment similarity. In this figure, negative reviews (red) are close to one another and dissimilar to positive reviews (green).</div>
</div>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="contrastive-learning">10.1. Contrastive Learning</h3>
<div class="paragraph">
<p>Contrastive learning is a self-supervised or supervised machine learning technique that aims to learn representations of data by contrasting similar ("positive") and dissimilar ("negative") examples (Why P and not Q?) to create an embedding space where similar data points are located close to each other, while dissimilar data points are far apart, which is effective in various domains, including computer vision and natural language processing, for tasks like representation learning, similarity search, and few-shot learning.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Reporter: “Why did you rob a bank?”

Robber: “Because that is where the money is.”

Reporter (alternatively): “Why did you rob a bank (P) instead of obeying the law (Q)?”</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="sentence-transformers-sbert">10.2. Sentence Transformers (SBERT)</h3>
<div class="paragraph">
<p>A cross-encoder is a Transformer-based model that processes two sentences together to directly predict their similarity score via a classification head, but it&#8217;s computationally expensive for large-scale pairwise comparisons and doesn&#8217;t typically generate individual sentence embeddings.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/cross-encoder-architecture.png" alt="The architecture of a cross-encoder" width="30%" height="30%">
</div>
<div class="title">Figure 113. The architecture of a cross-encoder. Both sentences are concatenated, separated with a &lt;SEP&gt; token, and fed to the model simultaneously.</div>
</div>
<div class="paragraph">
<p>The authors of <a href="https://github.com/UKPLab/sentence-transformers">sentence-transformers</a> addressed the limitations of cross-encoders (slow speed, no embeddings) by developing a fast alternative that generates semantically comparable, fixed-size embeddings by using a Siamese architecture, also known as a bi-encoder or SBERT, with two identical BERT models (sharing weights) that process sentences independently and then apply mean pooling to the final layer.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/sbert-bi-encoder.png" alt="The architecture of the original sentence-transformers model." width="20%" height="20%">
</div>
<div class="title">Figure 114. The architecture of the original sentence-transformers model, which leverages a Siamese network, also called a bi-encoder.</div>
</div>
</div>
<div class="sect2">
<h3 id="creating-an-embedding-model">10.3. Creating an Embedding Model</h3>
<div class="paragraph">
<p>Natural Language Inference (NLI) datasets, used in pretraining embedding models, classify premise-hypothesis pairs as entailment (similar meaning), contradiction (opposite meaning), or neutral.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/ai/llms/nli-datasets-contrastive-examples.png" alt="NLI datasets for contrastive learning" width="35%" height="35%">
</div>
<div class="title">Figure 115. We can leverage the structure of NLI datasets to generate negative examples (contradiction) and positive examples (entailments) for contrastive learning.</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Entailments serve as positive examples for contrastive learning (similar pairs), while contradictions serve as negative examples (dissimilar pairs).</p>
</li>
<li>
<p>The Multi-Genre Natural Language Inference (MNLI) corpus from the <a href="https://gluebenchmark.com/">General Language Understanding Evaluation (GLUE)</a> benchmark contains annotated sentence pairs with these relationships, and is a common source for generating such contrastive training data.</p>
</li>
<li>
<p>A subset of MNLI is often used for faster experimentation, though larger, quality datasets are generally preferred for stable training.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">datasets</span> <span class="kn">import</span> <span class="n">load_dataset</span>

<span class="c1"># Load MNLI dataset from GLUE
# 0 = entailment, 1 = neutral, 2 = contradiction
</span><span class="n">train_dataset</span> <span class="o">=</span> <span class="nf">load_dataset</span><span class="p">(</span>
    <span class="sh">"</span><span class="s">glue</span><span class="sh">"</span><span class="p">,</span>  <span class="c1"># load a dataset from the GLUE benchmark
</span>    <span class="sh">"</span><span class="s">mnli</span><span class="sh">"</span><span class="p">,</span>  <span class="c1"># load the MNLI dataset
</span>    <span class="n">split</span><span class="o">=</span><span class="sh">"</span><span class="s">train</span><span class="sh">"</span><span class="p">,</span>  <span class="c1"># load the training split
</span><span class="p">).</span><span class="nf">select</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">50_000</span><span class="p">))</span>
<span class="n">train_dataset</span> <span class="o">=</span> <span class="n">train_dataset</span><span class="p">.</span><span class="nf">remove_columns</span><span class="p">(</span><span class="sh">"</span><span class="s">idx</span><span class="sh">"</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">train_dataset</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">{'premise': 'One of our number will carry out your instructions minutely.',
 'hypothesis': 'A member of my team will execute your orders with immense precision.',
 'label': 0}</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># train model
</span><span class="kn">from</span> <span class="n">sentence_transformers</span> <span class="kn">import</span> <span class="n">SentenceTransformer</span>

<span class="c1"># use a base model
</span><span class="n">model</span> <span class="o">=</span> <span class="nc">SentenceTransformer</span><span class="p">(</span><span class="sh">"</span><span class="s">google-bert/bert-base-uncased</span><span class="sh">"</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">sentence_transformers</span> <span class="kn">import</span> <span class="n">losses</span>

<span class="c1"># define the softmax loss function.
</span><span class="n">train_loss</span> <span class="o">=</span> <span class="n">losses</span><span class="p">.</span><span class="nc">SoftmaxLoss</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
    <span class="n">sentence_embedding_dimension</span><span class="o">=</span><span class="n">model</span><span class="p">.</span><span class="nf">get_sentence_embedding_dimension</span><span class="p">(),</span>
    <span class="n">num_labels</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
<span class="p">)</span>

<span class="kn">from</span> <span class="n">sentence_transformers.evaluation</span> <span class="kn">import</span> <span class="n">EmbeddingSimilarityEvaluator</span>

<span class="c1"># create an embedding similarity evaluator for STSB
</span><span class="n">val_sts</span> <span class="o">=</span> <span class="nf">load_dataset</span><span class="p">(</span><span class="sh">"</span><span class="s">glue</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">stsb</span><span class="sh">"</span><span class="p">,</span> <span class="n">split</span><span class="o">=</span><span class="sh">"</span><span class="s">validation</span><span class="sh">"</span><span class="p">)</span>
<span class="n">evaluator</span> <span class="o">=</span> <span class="nc">EmbeddingSimilarityEvaluator</span><span class="p">(</span>
    <span class="n">sentences1</span><span class="o">=</span><span class="n">val_sts</span><span class="p">[</span><span class="sh">"</span><span class="s">sentence1</span><span class="sh">"</span><span class="p">],</span>
    <span class="n">sentences2</span><span class="o">=</span><span class="n">val_sts</span><span class="p">[</span><span class="sh">"</span><span class="s">sentence2</span><span class="sh">"</span><span class="p">],</span>
    <span class="n">scores</span><span class="o">=</span><span class="p">[</span><span class="n">score</span> <span class="o">/</span> <span class="mi">5</span> <span class="k">for</span> <span class="n">score</span> <span class="ow">in</span> <span class="n">val_sts</span><span class="p">[</span><span class="sh">"</span><span class="s">label</span><span class="sh">"</span><span class="p">]],</span>
    <span class="n">main_similarity</span><span class="o">=</span><span class="sh">"</span><span class="s">cosine</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>

<span class="kn">from</span> <span class="n">sentence_transformers.training_args</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">SentenceTransformerTrainingArguments</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">args</span> <span class="o">=</span> <span class="nc">SentenceTransformerTrainingArguments</span><span class="p">(</span>
    <span class="n">output_dir</span><span class="o">=</span><span class="sh">"</span><span class="s">base_embedding_model</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">num_train_epochs</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
    <span class="n">per_device_train_batch_size</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span>
    <span class="n">per_device_eval_batch_size</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span>
    <span class="n">warmup_steps</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>
    <span class="n">fp16</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">eval_steps</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>
    <span class="n">logging_steps</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>
<span class="p">)</span>

<span class="kn">from</span> <span class="n">sentence_transformers.trainer</span> <span class="kn">import</span> <span class="n">SentenceTransformerTrainer</span>

<span class="c1"># train embedding model
</span><span class="n">trainer</span> <span class="o">=</span> <span class="nc">SentenceTransformerTrainer</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
    <span class="n">args</span><span class="o">=</span><span class="n">args</span><span class="p">,</span>
    <span class="n">train_dataset</span><span class="o">=</span><span class="n">train_dataset</span><span class="p">,</span>
    <span class="n">loss</span><span class="o">=</span><span class="n">train_loss</span><span class="p">,</span>
    <span class="n">evaluator</span><span class="o">=</span><span class="n">evaluator</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">trainer</span><span class="p">.</span><span class="nf">train</span><span class="p">()</span>

<span class="c1"># evaluate the trained model
</span><span class="nf">evaluator</span><span class="p">(</span><span class="n">model</span><span class="p">)</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="references">References</h2>
<div class="sectionbody">
<div class="ulist bibliography">
<ul class="bibliography">
<li>
<p><a id="hands-on-llm"></a>[1] Jay Alammar, Maarten Grootendorst <em>Hands-On Large Language Models: Language Understanding and Generation</em>. O&#8217;Reilly Media; 1st edition (October 15, 2024)</p>
</li>
</ul>
</div>
</div>
</div>]]></content><author><name></name></author><category term="ai" /><category term="ai" /><category term="llm" /></entry><entry><title type="html">T-SQL Learning Notes</title><link href="https://blog.codefarm.me/2025/01/07/t-sql-learning-notes/" rel="alternate" type="text/html" title="T-SQL Learning Notes" /><published>2025-01-07T03:12:33+08:00</published><updated>2025-01-07T03:12:33+08:00</updated><id>https://blog.codefarm.me/2025/01/07/t-sql-learning-notes</id><content type="html" xml:base="https://blog.codefarm.me/2025/01/07/t-sql-learning-notes/"><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>SQL (pronounced /ˌɛsˌkjuˈɛl/ S-Q-L; or alternatively as /ˈsiːkwəl/ "sequel") stands for <strong>S</strong>tructured <strong>Q</strong>uery <strong>L</strong>anguage, which is both an ANSI and ISO standard language that was designed to query and manage data in relational database management systems (RDBMSs).</p>
</div>
<div class="paragraph">
<p>An RDBMS is a database management system based on the relational model (a semantic model for representing data), which in turn is based on two mathematical branches: <em>set theory</em> and <em>predicate logic</em>.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
"NULL marker" or just "NULL" (/nʌl/) is not a NULL value but rather a marker for a missing value.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>SQL has several categories of statements, including data definition language (DDL), data manipulation language (DML), and data control language (DCL).</p>
</div>
<div class="ulist">
<ul>
<li>
<p>DDL deals with object definitions and includes statements such as <code>CREATE</code>, <code>ALTER</code>, and <code>DROP</code>.</p>
</li>
<li>
<p>DML allows to query and modify data and includes statements such as <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>TRUNCATE</code>, and <code>MERGE</code>.</p>
</li>
<li>
<p>DCL deals with permissions and includes statements such as <code>GRANT</code> and <code>REVOKE</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Microsoft provides T-SQL as a dialect of, or an extension to, SQL in SQL Server—its on-premises RDBMS flavor, and in Azure SQL and Azure Synapse Analytics—its cloud-based RDBMS flavors.</p>
</div>
<div class="paragraph">
<p>T-SQL is based on standard SQL, but it also provides some nonstandard or proprietary extensions. Moreover, T-SQL does not implement all of standard SQL.</p>
</div>
<div class="paragraph">
<p>To run T-SQL code against a database, a client application needs to connect to a SQL Server instance and be in the context of, or use, the relevant database.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>In both SQL Server and Azure SQL Managed Instance, the application can still access objects from other databases by adding the database name as a prefix.</p>
</li>
<li>
<p>Azure SQL Database does not support cross-database/three-part name queries.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>SQL Server supports a feature called <em>contained databases</em> that breaks the connection between a database user and an instance-level login.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The user (Windows or SQL authenticated) is fully contained within the specific database and is not tied to a login at the instance level.</p>
</li>
<li>
<p>When connecting to SQL Server, the user needs to specify the database to connect, and the user cannot subsequently switch to other user databases.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Unless specified otherwise, all T-SQL references to the name of a database object can be a four-part name in the following form:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="txt">-- Machine -&gt; * Servers (instances) -&gt; * Databases -&gt; * Schemas -&gt; * Tables, * Views

server_name.[database_name].[schema_name].object_name

| database_name.[schema_name].object_name

| schema_name.object_name

| object_name</code></pre>
</div>
</div>
</div>
<div id="toc" class="toc">
<div id="toctitle"></div>
<ul class="sectlevel1">
<li><a href="#data-integrity">1. Data Integrity</a>
<ul class="sectlevel2">
<li><a href="#primary-key">1.1. PRIMARY KEY</a></li>
<li><a href="#unique">1.2. UNIQUE</a></li>
<li><a href="#foreign-key">1.3. FOREIGN KEY</a></li>
<li><a href="#check">1.4. CHECK</a></li>
<li><a href="#default">1.5. DEFAULT</a></li>
</ul>
</li>
<li><a href="#logical-query-processing">2. Logical Query Processing</a>
<ul class="sectlevel2">
<li><a href="#from">2.1. FROM</a></li>
<li><a href="#where">2.2. WHERE</a></li>
<li><a href="#group-by">2.3. GROUP BY</a></li>
<li><a href="#having">2.4. HAVING</a></li>
<li><a href="#select">2.5. SELECT</a></li>
<li><a href="#order-by">2.6. ORDER BY</a></li>
<li><a href="#top">2.7. TOP</a></li>
<li><a href="#offset-fetch">2.8. OFFSET-FETCH</a></li>
<li><a href="#over">2.9. OVER</a></li>
<li><a href="#case">2.10. CASE</a></li>
</ul>
</li>
<li><a href="#predicates-and-operators">3. Predicates and Operators</a>
<ul class="sectlevel2">
<li><a href="#predicates-in-between-and-like">3.1. Predicates: <code>IN</code>, <code>BETWEEN</code>, and <code>LIKE</code></a></li>
<li><a href="#comparison-operators-and">3.2. Comparison Operators: <code>=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code><=</code>, and <code>&lt;&gt;</code></a></li>
<li><a href="#logical-operators-or-and-and-not">3.3. Logical Operators <code>OR</code>, <code>AND</code>, and <code>NOT</code></a></li>
<li><a href="#arithmetic-operators-and">3.4. Arithmetic Operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, and <code>%</code></a></li>
</ul>
</li>
<li><a href="#query-tuning">4. Query Tuning</a>
<ul class="sectlevel2">
<li><a href="#sql-server-internals">4.1. SQL Server Internals</a>
<ul class="sectlevel3">
<li><a href="#indexes">4.1.1. Indexes</a></li>
<li><a href="#execution-plans">4.1.2. Execution Plans</a></li>
<li><a href="#cardinality-estimates">4.1.3. Cardinality Estimates</a></li>
<li><a href="#parallel-query-execution">4.1.4. Parallel Query Execution</a></li>
</ul>
</li>
<li><a href="#access-methods">4.2. Access Methods</a>
<ul class="sectlevel3">
<li><a href="#unordered-clustered-index-scan-or-table-scan">4.2.1. Unordered Clustered Index Scan or Table Scan</a></li>
<li><a href="#unordered-covering-nonclustered-index-scan">4.2.2. Unordered Covering Nonclustered Index Scan</a></li>
<li><a href="#ordered-clustered-index-scan">4.2.3. Ordered Clustered Index Scan</a></li>
<li><a href="#ordered-covering-nonclustered-index-scan">4.2.4. Ordered Covering Nonclustered Index Scan</a></li>
<li><a href="#nonclustered-index-seek-range-scan-lookups">4.2.5. Nonclustered Index Seek + Range Scan + Lookups</a></li>
<li><a href="#unordered-nonclustered-index-scan-lookups">4.2.6. Unordered Nonclustered Index Scan + Lookups</a></li>
<li><a href="#clustered-index-seek-range-scan">4.2.7. Clustered Index Seek + Range Scan</a></li>
<li><a href="#covering-nonclustered-index-seek-range-scan">4.2.8. Covering Nonclustered Index Seek + Range Scan</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#joins">5. Joins</a>
<ul class="sectlevel2">
<li><a href="#cross">5.1. CROSS</a></li>
<li><a href="#inner">5.2. INNER</a></li>
<li><a href="#outer">5.3. OUTER</a></li>
<li><a href="#apply">5.4. APPLY</a></li>
</ul>
</li>
<li><a href="#subqueries">6. Subqueries</a></li>
<li><a href="#table-expressions">7. Table Expressions</a>
<ul class="sectlevel2">
<li><a href="#derived-tables">7.1. Derived Tables</a></li>
<li><a href="#ctes">7.2. CTEs</a></li>
<li><a href="#views-and-tvfs">7.3. Views and TVFs</a></li>
</ul>
</li>
<li><a href="#union-union-all-intersect-and-except">8. UNION, UNION ALL, INTERSECT, and EXCEPT</a></li>
<li><a href="#data-analysis">9. Data Analysis</a>
<ul class="sectlevel2">
<li><a href="#window-functions">9.1. Window Functions</a>
<ul class="sectlevel3">
<li><a href="#ranking">9.1.1. Ranking</a></li>
<li><a href="#offset">9.1.2. Offset</a></li>
<li><a href="#aggregate">9.1.3. Aggregate</a></li>
<li><a href="#window">9.1.4. WINDOW</a></li>
</ul>
</li>
<li><a href="#pivoting">9.2. Pivoting</a>
<ul class="sectlevel3">
<li><a href="#grouped-query">9.2.1. Grouped Query</a></li>
<li><a href="#pivot-operator">9.2.2. PIVOT Operator</a></li>
</ul>
</li>
<li><a href="#unpivoting">9.3. Unpivoting</a>
<ul class="sectlevel3">
<li><a href="#apply-operator">9.3.1. APPLY Operator</a></li>
<li><a href="#unpivot-operator">9.3.2. UNPIVOT Operator</a></li>
</ul>
</li>
<li><a href="#grouping-sets">9.4. Grouping Sets</a></li>
<li><a href="#time-series">9.5. Time Series</a></li>
</ul>
</li>
<li><a href="#insert-delete-truncate-update-and-merge">10. INSERT, DELETE, TRUNCATE, UPDATE, and MERGE</a>
<ul class="sectlevel2">
<li><a href="#insert">10.1. INSERT</a>
<ul class="sectlevel3">
<li><a href="#insert-values">10.1.1. INSERT VALUES</a></li>
<li><a href="#insert-select">10.1.2. INSERT SELECT</a></li>
<li><a href="#insert-exec">10.1.3. INSERT EXEC</a></li>
<li><a href="#select-into">10.1.4. SELECT INTO</a></li>
<li><a href="#bulk-insert">10.1.5. BULK INSERT</a></li>
</ul>
</li>
<li><a href="#delete-and-truncate">10.2. DELETE and TRUNCATE</a></li>
<li><a href="#update">10.3. UPDATE</a></li>
<li><a href="#merge">10.4. MERGE</a></li>
</ul>
</li>
<li><a href="#temporal-tables">11. Temporal Tables</a></li>
<li><a href="#transactions-and-concurrency">12. Transactions and Concurrency</a>
<ul class="sectlevel2">
<li><a href="#locks-and-blocking">12.1. Locks and Blocking</a>
<ul class="sectlevel3">
<li><a href="#locks">12.1.1. Locks</a>
<ul class="sectlevel4">
<li><a href="#lock-modes-and-compatibility">12.1.1.1. Lock Modes and Compatibility</a></li>
<li><a href="#lockable-resource-types">12.1.1.2. Lockable Resource Types</a></li>
</ul>
</li>
<li><a href="#blocking">12.1.2. Blocking</a></li>
</ul>
</li>
<li><a href="#isolation-levels">12.2. Isolation Levels</a>
<ul class="sectlevel3">
<li><a href="#read-uncommitted">12.2.1. READ UNCOMMITTED</a></li>
<li><a href="#read-committed">12.2.2. READ COMMITTED</a></li>
<li><a href="#repeatable-read">12.2.3. REPEATABLE READ</a></li>
<li><a href="#serializable">12.2.4. SERIALIZABLE</a></li>
<li><a href="#multi-version-concurrency-control">12.2.5. Multi-Version Concurrency Control</a>
<ul class="sectlevel4">
<li><a href="#snapshot">12.2.5.1. SNAPSHOT</a></li>
<li><a href="#conflict-detection">12.2.5.2. Conflict Detection</a></li>
<li><a href="#read-committed-snapshot">12.2.5.3. READ COMMITTED SNAPSHOT</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#deadlocks">12.3. Deadlocks</a></li>
</ul>
</li>
<li><a href="#programmable-objects">13. Programmable Objects</a>
<ul class="sectlevel2">
<li><a href="#variables">13.1. Variables</a></li>
<li><a href="#batchs">13.2. Batchs</a></li>
<li><a href="#flow-elements-if-and-while">13.3. Flow Elements: IF and WHILE</a></li>
<li><a href="#cursors">13.4. Cursors</a></li>
<li><a href="#temporary-tables">13.5. Temporary Tables</a>
<ul class="sectlevel3">
<li><a href="#local-temporary-tables">13.5.1. Local Temporary Tables</a></li>
<li><a href="#global-temporary-tables">13.5.2. Global Temporary Tables</a></li>
<li><a href="#table-variables">13.5.3. Table Variables</a></li>
</ul>
</li>
<li><a href="#dynamic-sql">13.6. Dynamic SQL</a></li>
<li><a href="#routines">13.7. Routines</a>
<ul class="sectlevel3">
<li><a href="#user-defined-functions">13.7.1. User-defined Functions</a></li>
<li><a href="#stored-procedures">13.7.2. Stored Procedures</a></li>
<li><a href="#triggers">13.7.3. Triggers</a>
<ul class="sectlevel4">
<li><a href="#dml-triggers">13.7.3.1. DML Triggers</a></li>
<li><a href="#ddl-triggers">13.7.3.2. DDL Triggers</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#error-handling-try-catch">13.8. Error Handling: TRY-CATCH</a></li>
</ul>
</li>
<li><a href="#data-types">Appendix A: Data Types</a>
<ul class="sectlevel2">
<li><a href="#character">A.1. Character</a></li>
<li><a href="#date-and-time">A.2. Date and Time</a></li>
</ul>
</li>
<li><a href="#references">References</a></li>
</ul>
</div>
</div>
<div class="sect1">
<h2 id="data-integrity">1. Data Integrity</h2>
<div class="sectionbody">
<div class="paragraph">
<p>SQL provides several mechanisms for enforcing data integrity:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>PRIMARY KEY</code> constraint</p>
</li>
<li>
<p><code>FOREIGN KEY</code> constraint with actions like <code>CASCADE</code>, <code>SET NULL</code>, <code>RESTRICT</code></p>
</li>
<li>
<p><code>NOT NULL</code> constraint</p>
</li>
<li>
<p><code>CHECK</code> constraint</p>
</li>
<li>
<p><code>UNIQUE</code> constraint</p>
</li>
<li>
<p><code>DEFAULT</code> constraint</p>
</li>
<li>
<p>Triggers</p>
</li>
<li>
<p>Stored procedures</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="n">USE</span> <span class="n">TSQLV6</span><span class="p">;</span>

<span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span> <span class="p">(</span>
    <span class="n">empid</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">firstname</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">lastname</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">hiredate</span> <span class="nb">DATE</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">mgrid</span> <span class="nb">INT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">ssn</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">salary</span> <span class="n">MONEY</span> <span class="k">NOT</span> <span class="k">NULL</span>
<span class="p">);</span></code></pre>
</div>
</div>
<div class="sect2">
<h3 id="primary-key">1.1. PRIMARY KEY</h3>
<div class="paragraph">
<p>A <em>primary key constraint</em> enforces the uniqueness of rows and also disallows NULLs in the constraint attributes.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Each unique combination of values in the constraint attributes can appear only once in the table—in other words, only in one row.</p>
</li>
<li>
<p>An attempt to define a primary key constraint on a column that allows NULLs will be rejected by the RDBMS.</p>
</li>
<li>
<p>Each table can have only one primary key.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span>
  <span class="k">ADD</span> <span class="k">CONSTRAINT</span> <span class="n">PK_Employees</span>
  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="n">empid</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To enforce the uniqueness of the logical primary key constraint, SQL Server will create a <em>unique index</em> behind the scenes.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A unique index is a physical object used by SQL Server to enforce uniqueness.</p>
</li>
<li>
<p>Indexes (not necessarily unique ones) are also used to speed up queries by avoiding sorting and unnecessary full table scans (similar to indexes in books).</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="unique">1.2. UNIQUE</h3>
<div class="paragraph">
<p>A <em>unique constraint</em> enforces the uniqueness of rows, allowing to implement the concept of <em>alternate keys</em> from the relational model in a  database.</p>
</div>
<div class="paragraph">
<p>Unlike with primary keys, multiple unique constraints can be defined within the same table.</p>
</div>
<div class="paragraph">
<p>Also, a unique constraint is not restricted to columns defined as NOT NULL.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sq">ALTER TABLE dbo.Employees
  ADD CONSTRAINT UNQ_Employees_ssn
  UNIQUE(ssn);</code></pre>
</div>
</div>
<div class="paragraph">
<p>For the purpose of enforcing a unique constraint, SQL Server handles NULLs just like non-NULL values.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Consequently, for example, a single-column unique constraint allows only one NULL in the constrained column.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>However, the SQL standard defines NULL-handling by a unique constraint differently, like so: “A unique constraint on T is satisfied if and only if there do not exist two rows R1 and R2 of T such that R1 and R2 have the same non-NULL values in the unique columns.”</p>
</div>
<div class="ulist">
<ul>
<li>
<p>In other words, only the non-NULL values are compared to determine whether duplicates exist.</p>
</li>
<li>
<p>Consequently, a standard single-column unique constraint would allow multiple NULLs in the constrained column.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="foreign-key">1.3. FOREIGN KEY</h3>
<div class="paragraph">
<p>A <em>foreign key</em> enforces referential integrity.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>It is defined on one or more attributes in what’s called the <em>referencing table</em> and points to <em>candidate key</em> (primary key or unique constraint) attributes in what’s called the <em>referenced table</em>.</p>
</li>
<li>
<p>Note that the referencing and referenced tables can be one and the same.</p>
</li>
<li>
<p>The foreign key’s purpose is to restrict the values allowed in the foreign key columns to those that exist in the referenced columns.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span> <span class="p">(</span>
    <span class="n">orderid</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">empid</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">custid</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">orderts</span> <span class="n">DATETIME2</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">qty</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="k">CONSTRAINT</span> <span class="n">PK_Orders</span>
      <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="n">orderid</span><span class="p">)</span>
<span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- enforce an integrity rule that restricts the values supported by the empid column in the Orders table to the values that exist in the empid column in the Employees table.</span>
<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
  <span class="k">ADD</span> <span class="k">CONSTRAINT</span> <span class="n">FK_Orders_Employees</span>
  <span class="k">FOREIGN</span> <span class="k">KEY</span><span class="p">(</span><span class="n">empid</span><span class="p">)</span>
  <span class="k">REFERENCES</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span><span class="p">(</span><span class="n">empid</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- restrict the values supported by the mgrid column in the Employees table to the values that exist in the empid column of the same table.</span>
<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span>
  <span class="k">ADD</span> <span class="k">CONSTRAINT</span> <span class="n">FK_Employees_Employees</span>
  <span class="k">FOREIGN</span> <span class="k">KEY</span><span class="p">(</span><span class="n">mgrid</span><span class="p">)</span>
  <span class="k">REFERENCES</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span><span class="p">(</span><span class="n">empid</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Note that NULLs are allowed in the foreign key columns (mgrid in the last example) even if there are no NULLs in the referenced candidate key columns.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="check">1.4. CHECK</h3>
<div class="paragraph">
<p>A <em>check constraint</em> is used to define a predicate that a row must meet to be entered into the table or to be modified.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span>
  <span class="k">ADD</span> <span class="k">CONSTRAINT</span> <span class="n">CHK_Employees_salary</span>
  <span class="k">CHECK</span><span class="p">(</span><span class="n">salary</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Note that a check constraint rejects an attempt to insert or update a row when the predicate evaluates to FALSE. The modification will be accepted when the predicate evaluates to either <em>TRUE</em> or <em>UNKNOWN</em>.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="default">1.5. DEFAULT</h3>
<div class="paragraph">
<p>A <em>default constraint</em> is associated with a particular attribute.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>It’s <em>an expression</em> that is used as the <em>default value</em> when an explicit value is not specified for the attribute when inserting a row.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
  <span class="k">ADD</span> <span class="k">CONSTRAINT</span> <span class="n">DFT_Orders_orderts</span>
  <span class="k">DEFAULT</span><span class="p">(</span><span class="n">SYSDATETIME</span><span class="p">())</span> <span class="k">FOR</span> <span class="n">orderts</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>When done, run the following code for cleanup:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span><span class="p">,</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span><span class="p">;</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="logical-query-processing">2. Logical Query Processing</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <em>logical query processing</em> in standard SQL defines how a query should be processed and the final result achieved.</p>
</div>
<div class="listingblock">
<div class="title"><em>Logical query-processing step numbers</em></div>
<div class="content">
<pre class="rouge highlight"><code data-lang="txt">(5) SELECT (5-2) DISTINCT (7) TOP(&lt;top_specification&gt;) (5-1) &lt;select_list&gt;
(1) FROM (1-J) &lt;left_table&gt; &lt;join_type&gt; JOIN &lt;right_table&gt; ON &lt;on_predicate&gt;
| (1-A) &lt;left_table&gt; &lt;apply_type&gt; APPLY &lt;right_input_table&gt; AS &lt;alias&gt;
| (1-P) &lt;left_table&gt; PIVOT(&lt;pivot_specification&gt;) AS &lt;alias&gt;
| (1-U) &lt;left_table&gt; UNPIVOT(&lt;unpivot_specification&gt;) AS &lt;alias&gt;
(2) WHERE &lt;where_predicate&gt;
(3) GROUP BY &lt;group_by_specification&gt;
(4) HAVING &lt;having_predicate&gt;
(6) ORDER BY &lt;order_by_list&gt;
(7) OFFSET &lt;offset_specification&gt; ROWS FETCH NEXT &lt;fetch_specification&gt; ROWS ONLY;</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The database engine is free to physically process a query differently by rearranging processing phases, as long as the final result would be the same as that dictated by logical query processing.</p>
</li>
<li>
<p>The database engine’s <em>query optimizer</em> can—and in fact, often does—apply many transformation rules and shortcuts in the physical processing of a query as part of query optimization.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="n">USE</span> <span class="n">TSQLV6</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="nb">YEAR</span> <span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">orderyear</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="n">numorder</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">custid</span> <span class="o">=</span> <span class="mi">71</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">empid</span><span class="p">,</span> <span class="nb">YEAR</span> <span class="p">(</span><span class="n">orderdate</span><span class="p">)</span>
<span class="k">HAVING</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">empid</span><span class="p">,</span> <span class="n">orderyear</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
If an identifier is irregular—for example, if it has embedded spaces or special characters, starts with a digit, or is a reserved keyword—it must be delimited. There are a couple of ways to delimit identifiers in T-SQL. One is the standard SQL form using double quotes—for example, <code>"Order Details"</code>. Another is the T-SQL- specific form using square brackets—for example, <code>[Order Details]</code>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>In most programming languages, the lines of code are processed in the order that they are written. In SQL, things are different. Even though the <code>SELECT</code> clause appears first in the query, it is logically processed almost last. The clauses are logically processed in the following order:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">custid</span> <span class="o">=</span> <span class="mi">71</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">empid</span><span class="p">,</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span>
<span class="k">HAVING</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span>
<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">orderyear</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="n">numorders</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">empid</span><span class="p">,</span> <span class="n">orderyear</span></code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<code>FROM</code> &#8594; <code>WHERE</code> &#8594; <code>GROUP BY</code> &#8594; <code>HAVING</code> &#8594; <code>SELECT</code> &#8594; <code>Expressions</code> &#8594; <code>DISTINCT</code> &#8594; <code>ORDER BY</code> &#8594; <code>TOP/OFFSET-FETCH</code>
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="from">2.1. FROM</h3>
<div class="paragraph">
<p>The <code>FROM</code> clause is the very first query clause that is logically processed, which is used to specify the names of the <em>tables</em> to query and <em>table operators</em> that operate on those tables.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="where">2.2. WHERE</h3>
<div class="paragraph">
<p>In the <code>WHERE</code> clause, a predicate, or logical expression is specified to filter the rows returned by the <code>FROM</code> phase.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">custid</span> <span class="o">=</span> <span class="mi">71</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
T-SQL uses three-valued predicate logic, where logical expressions can evaluate to <code>TRUE</code>, <code>FALSE</code>, or <code>UNKNOWN</code>. With three-valued logic, saying “returns TRUE” is not the same as saying “does not return FALSE.” The <code>WHERE</code> phase returns rows for which the logical expression evaluates to <code>TRUE</code>, and it doesn’t return rows for which the logical expression evaluates to <code>FALSE</code> or <code>UNKNOWN</code>.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="group-by">2.3. GROUP BY</h3>
<div class="paragraph">
<p>The <code>GROUP BY</code> phase is used to arrange the rows returned by the previous logical query processing phase in groups determined by the <em>elements</em>, or <em>expressions</em>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">custid</span> <span class="o">=</span> <span class="mi">71</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">empid</span><span class="p">,</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>If the query is a grouped query, all phases subsequent to the <code>GROUP BY</code> phase— including <code>HAVING</code>, <code>SELECT</code>, and <code>ORDER BY</code>—operate on groups as opposed to operating on individual rows.</p>
</li>
<li>
<p>Each group is ultimately represented by a single row in the final result of the query.</p>
</li>
<li>
<p>All expressions specified in clauses that are processed in phases subsequent to the <code>GROUP BY</code> phase are required to guarantee returning a scalar (single value) per group.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">orderyear</span><span class="p">,</span> <span class="n">freight</span> <span class="c1">-- sum(freight) AS totalfreight</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">custid</span> <span class="o">=</span> <span class="mi">71</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">empid</span><span class="p">,</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Msg 8120, Level 16, State 1, Line 1
Column 'Sales.Orders.freight' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.
Total execution time: 00:00:00.016</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Expressions based on elements that participate in the <code>GROUP BY</code> clause meet the requirement because, by definition, each such element represents a distinct value per group.</p>
</li>
<li>
<p>Elements that do not participate in the <code>GROUP BY</code> clause are allowed only as inputs to an aggregate function such as <code>COUNT</code>, <code>SUM</code>, <code>AVG</code>, <code>MIN</code>, or <code>MAX</code>.</p>
<div class="ulist">
<ul>
<li>
<p>Note that all aggregate functions that are applied to an input expression ignore NULLs.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>The <code>COUNT(*)</code> function isn’t applied to any input expression; it just counts rows irrespective of what those rows contain.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>For example, consider a group of five rows with the values <code>30, 10, NULL, 10, 10</code> in a column called <code>qty</code>.</p>
</li>
<li>
<p>The expression <code>COUNT(*)</code> returns <code>5</code> because there are five rows in the group, whereas <code>COUNT(qty)</code> returns <code>4</code> because there are four known (non-NULL) values.</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>To handle only distinct (unique) occurrences of known values, specify the <code>DISTINCT</code> keyword before the input expression to the aggregate function, like <code>COUNT(DISTINCT qty)</code>, <code>AVG(DISTINCT qty)</code> and so on.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="having">2.4. HAVING</h3>
<div class="paragraph">
<p>Whereas the <code>WHERE</code> clause is a row filter, the <code>HAVING</code> clause is a group filter.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Only groups for which the <code>HAVING</code> predicate evaluates to <code>TRUE</code> are returned by the <code>HAVING</code> phase to the next logical query processing phase.</p>
</li>
<li>
<p>Groups for which the predicate evaluates to <code>FALSE</code> or <code>UNKNOWN</code> are discarded.</p>
</li>
<li>
<p>The <code>HAVING</code> clause is processed after the rows have been grouped, so aggregate functions can be referred to in the <code>HAVING</code> filter predicate.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">orderyear</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">freight</span><span class="p">)</span> <span class="k">AS</span> <span class="n">totalfreight</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">custid</span> <span class="o">=</span> <span class="mi">71</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">empid</span><span class="p">,</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span>
<span class="c1">-- filters only groups (employee and order year) with more than one row, and total freight with more than 500.0</span>
<span class="k">HAVING</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="k">AND</span> <span class="k">SUM</span><span class="p">(</span><span class="n">freight</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">500</span><span class="p">.</span><span class="mi">0</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">empid</span><span class="p">,</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">1	2021	711.13
2	2022	672.16
4	2022	651.83
6	2021	628.31
7	2022	1231.56</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="select">2.5. SELECT</h3>
<div class="paragraph">
<p>The <code>SELECT</code> clause is where to specify the attributes (columns) to return in the result table of the query.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">orderyear</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="n">numorders</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">custid</span> <span class="o">=</span> <span class="mi">71</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">empid</span><span class="p">,</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span>
<span class="k">HAVING</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>SELECT</code> clause is processed after the <code>FROM</code>, <code>WHERE</code>, <code>GROUP BY</code>, and <code>HAVING</code> clauses, which means that aliases assigned to expressions in the <code>SELECT</code> clause do not exist as far as clauses that are processed before the <code>SELECT</code> clause are concerned.</p>
<div class="paragraph">
<p>It’s a typical mistake to try and refer to expression aliases in clauses that are processed before the SELECT clause, such as in the following example in which the attempt is made in the WHERE clause:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">orderyear</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">orderyear</span> <span class="o">&gt;</span> <span class="mi">2021</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Msg 207, Level 16, State 1, Line 3
Invalid column name 'orderyear'.</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>One way around this problem is to repeat the expression <code>YEAR(orderdate)</code> in both the <code>WHERE</code> and <code>SELECT</code> clauses:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">orderyear</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">2021</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
In addition to supporting the AS clause, T-SQL supports the form <code>&lt;expression&gt; AS &lt;alias&gt;</code>, and also supports the forms <code>&lt;alias&gt; = &lt;expression&gt;</code> (“alias equals expression”) and <code>&lt;expression&gt; &lt;alias&gt;</code> (“expression space alias”).
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>In relational theory, a relational expression is applied to one or more input relations using operators from relational algebra, and returns a relation as output, that is, a relation in SQL is a table, and a relational expression in SQL is a <em>table expression</em>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Recall that a relation’s body is a set of tuples, and a set has no duplicates. Unlike relational theory, which is based on mathematical set theory, SQL is based on <em>multiset</em> theory.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The mathematical term <code>multiset</code>, or <code>bag</code>, is similar in some aspects to a set, but it does allow duplicates.</p>
</li>
<li>
<p>A table in SQL isn’t required to have a key.</p>
<div class="ulist">
<ul>
<li>
<p>Without a key, the table can have duplicate rows and therefore isn’t relational.</p>
</li>
<li>
<p>Even if the table does have a key, a SELECT query against the table can still return duplicate rows. SQL query results do not have keys.</p>
</li>
</ul>
</div>
</li>
<li>
<p>SQL provides the means to remove duplicates using the <code>DISTINCT</code> clause to return a relational result.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">empid</span><span class="p">,</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">orderyear</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">custid</span> <span class="o">=</span> <span class="mi">71</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="order-by">2.6. ORDER BY</h3>
<div class="paragraph">
<p>In terms of logical query processing, <code>ORDER BY</code> comes after <code>SELECT</code>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>With T-SQL, elements can also be specified in the <code>ORDER BY</code> clause that do not appear in the <code>SELECT</code> clause, meaning to sort by something that don’t necessarily want to be returned.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">,</span> <span class="n">country</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">hiredate</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>However, when the <code>DISTINCT</code> clause is specified, the <code>ORDER BY</code> are restricted to list only elements that appear in the <code>SELECT</code> list.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">,</span> <span class="n">country</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">hiredate</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Msg 145, Level 15, State 1, Line 1
ORDER BY items must appear in the select list if SELECT DISTINCT is specified.</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>One of the most important points to understand about SQL is that a table—be it an existing table in the database or a table result returned by a query—has no guaranteed order. That’s because a table is supposed to represent a set of rows (or multiset, if it has duplicates), and a set has no order.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>It means that when querying a table without specifying an <code>ORDER BY</code> clause, SQL Server is free to return the rows in the output in any order.</p>
</li>
<li>
<p>The only way to guarantee the presentation order in the result is with an <code>ORDER BY</code> clause.</p>
</li>
<li>
<p>However, realizing that if specifying an <code>ORDER BY</code> clause, the result can’t qualify as a <em>table</em>, because it is ordered. Standard SQL calls such a result a <em>cursor</em>.</p>
</li>
</ul>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="top">2.7. TOP</h3>
<div class="paragraph">
<p>The <code>TOP</code> filter is a proprietary T-SQL feature that can be used to limit the number or percentage of rows queried returns. It relies on two elements as part of its specification: one is the number or percent of rows to return, and the other is the ordering.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">TOP</span> <span class="p">(</span><span class="mi">5</span><span class="p">)</span>
  <span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">empid</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">orderdate</span> <span class="k">DESC</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Note that the <code>TOP</code> filter is handled after <code>DISTINCT</code>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The <code>TOP</code> can use option with the <code>PERCENT</code> keyword, in which case SQL Server calculates the number of rows to return based on a percentage of the number of qualifying rows, rounded up.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">TOP</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="n">PERCENT</span>
  <span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">empid</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">orderdate</span> <span class="k">DESC</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The query returns nine rows because the <code>Orders</code> table has 830 rows, and 1 percent of 830, rounded up, is 9.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">11074	2022-05-06	73	7
11075	2022-05-06	68	8
11076	2022-05-06	9	4
11077	2022-05-06	65	1
11070	2022-05-05	44	2
11071	2022-05-05	46	1
11072	2022-05-05	20	4
11073	2022-05-05	58	2
11067	2022-05-04	17	1</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In the above query, notice that the <code>ORDER BY</code> list is not unique (because no primary key or unique constraint is defined on the orderdate column).</p>
</div>
<div class="ulist">
<ul>
<li>
<p>In other words, the ordering is not strict total ordering. Multiple rows can have the same order date.</p>
</li>
<li>
<p>In such a case, the ordering among rows with the same order date is undefined, which makes the query nondeterministic—more than one result can be considered correct.</p>
</li>
<li>
<p>In case of ties, SQL Server filters rows based on optimization choices and physical access order.</p>
</li>
<li>
<p>Note that when using the TOP filter in a query without an <code>ORDER BY</code> clause, the ordering is completely undefined—SQL Server returns whichever <code>n</code> rows it happens to physically access first, where <code>n</code> is the requested number of rows.</p>
</li>
<li>
<p>To make the query be deterministic, a strict total ordering is needed; in other words, add a tiebreaker.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">TOP</span> <span class="p">(</span><span class="mi">5</span><span class="p">)</span>
  <span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">empid</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">orderdate</span> <span class="k">DESC</span><span class="p">,</span> <span class="n">orderid</span> <span class="k">DESC</span><span class="p">;</span> <span class="c1">-- the row with the greater order ID value will be preferred.</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">11077	2022-05-06	65	1
11076	2022-05-06	9	4
11075	2022-05-06	68	8
11074	2022-05-06	73	7
11073	2022-05-05	58	2</span></code></pre>
</div>
</div>
</li>
<li>
<p>Instead of adding a tiebreaker to the <code>ORDER BY</code> list, a request can be made to return all ties by adding the <code>WITH TIES</code> option.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">TOP</span> <span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="k">WITH</span> <span class="n">TIES</span>
  <span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">empid</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">orderdate</span> <span class="k">DESC</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>SQL Server first returned the <code>TOP (5)</code> rows based on <code>orderdate</code> <code>DESC</code> ordering, and it also returned all other rows from the table that had the same orderdate value as in the last of the five rows that were accessed.</p>
</li>
<li>
<p>Using the <code>WITH TIES</code> option, the selection of rows is deterministic, but the presentation order among rows with the same order date isn’t.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">11077	2022-05-06	65	1
11076	2022-05-06	9	4
11075	2022-05-06	68	8
11074	2022-05-06	73	7
11073	2022-05-05	58	2
11072	2022-05-05	20	4
11071	2022-05-05	46	1
11070	2022-05-05	44	2</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The <code>TOP</code> filter is very useful, but it has two shortcomings—it’s not standard, and it doesn’t support a skipping capability.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="offset-fetch">2.8. OFFSET-FETCH</h3>
<div class="paragraph">
<p>T-SQL also supports a standard, TOP-like filter, called OFFSET-FETCH, which does support a skipping option, which makes it very useful for paging purposes.</p>
</div>
<div class="paragraph">
<p>According to the SQL standard, the OFFSET-FETCH filter is considered an extension to the <code>ORDER BY</code> clause. With the <code>OFFSET</code> clause indicates how many rows to skip, and with the <code>FETCH</code> clause indicates how many rows to filter after the skipped rows.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">empid</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">orderid</span>
  <span class="k">OFFSET</span> <span class="mi">50</span> <span class="k">ROWS</span> <span class="k">FETCH</span> <span class="k">NEXT</span> <span class="mi">25</span> <span class="k">ROWS</span> <span class="k">ONLY</span><span class="p">;</span>
  <span class="c1">-- OFFSET 50 ROWS;</span>
  <span class="c1">-- OFFSET 0 ROWS FETCH NEXT 25 ROWS ONLY;</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Note that a query that uses OFFSET-FETCH must have an <code>ORDER BY</code> clause. Also, contrary to the SQL standard, T-SQL doesn’t support the <code>FETCH</code> clause without the <code>OFFSET</code> clause. However, <code>OFFSET</code> without <code>FETCH</code> is allowed to skip the indicated number of rows and returns all remaining rows in the result.
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
In the syntax for the OFFSET- FETCH filter, the singular and plural forms <code>ROW</code> and <code>ROWS</code>, and the forms <code>FIRST</code> and <code>NEXT</code> are interchangeable to phrase the filter in an intuitive, English-like manner.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="over">2.9. OVER</h3>
<div class="paragraph">
<p>A window function is a function that, for each row in the underlying query, operates on a window (set) defined with an <code>OVER</code> clause of rows that is derived from the underlying query result, and computes a scalar (single) result value.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">freight</span><span class="p">,</span>
  <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">custid</span>
                     <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">freight</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rownum</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">custid</span><span class="p">,</span> <span class="n">freight</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>For each row in the underlying query, the <code>OVER</code> clause exposes to the function a subset of the rows from the underlying query’s result set.</p>
</li>
<li>
<p>The <code>OVER</code> clause can restrict the rows in the window by using an optional window partition clause (<code>PARTITION BY</code>).</p>
</li>
<li>
<p>It can define ordering for the calculation (if relevant) using a window order clause (<code>ORDER BY</code>)—not to be confused with the query’s presentation <code>ORDER BY</code> clause.</p>
</li>
</ul>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
Window functions are defined by the SQL standard, and T-SQL supports a subset of the features from the standard.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="case">2.10. CASE</h3>
<div class="paragraph">
<p>A <code>CASE</code> expression, based on the SQL standard, is a scalar expression that returns a value based on conditional logic.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Note that <code>CASE</code> is an (scalar) expression and not a statement; that is, it returns a value and it is allowed wherever scalar expressions are allowed, such as in the <code>SELECT</code>, <code>WHERE</code>, <code>HAVING</code>, and <code>ORDER BY</code> clauses and in <code>CHECK</code> constraints.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>There are two forms of CASE expressions: <em>simple</em> and <em>searched</em>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <em>simple CASE expression</em> has a single test value or expression right after the <code>CASE</code> keyword that is compared with a list of possible values or expressions, in the <code>WHEN</code> clauses.</p>
<div class="ulist">
<ul>
<li>
<p>If no value in the list is equal to the tested value, the <code>CASE</code> expression returns the value that appears in the <code>ELSE</code> clause (or <code>NULL</code> if an <code>ELSE</code> clause is not present).</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">supplierid</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="n">numproducts</span><span class="p">,</span>
  <span class="k">CASE</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span>
     <span class="k">WHEN</span> <span class="mi">0</span> <span class="k">THEN</span> <span class="s1">'Even'</span>
     <span class="k">WHEN</span> <span class="mi">1</span> <span class="k">THEN</span> <span class="s1">'Odd'</span>
     <span class="k">ELSE</span> <span class="s1">'Unknown'</span>
   <span class="k">END</span> <span class="k">AS</span> <span class="n">countparity</span>
<span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">supplierid</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>The <em>searched CASE expression</em> returns the value in the <code>THEN</code> clause that is associated with the first <code>WHEN</code> predicate that evaluates to <code>TRUE</code>.</p>
<div class="ulist">
<ul>
<li>
<p>If none of the <code>WHEN</code> predicates evaluates to <code>TRUE</code>, the <code>CASE</code> expression returns the value that appears in the <code>ELSE</code> clause (or <code>NULL</code> if an <code>ELSE</code> clause is not present).</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">freight</span><span class="p">,</span>
  <span class="k">CASE</span>
     <span class="k">WHEN</span> <span class="n">freight</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">.</span><span class="mi">00</span>  <span class="k">THEN</span> <span class="s1">'Less than 1000'</span>
     <span class="k">WHEN</span> <span class="n">freight</span> <span class="o">&lt;=</span> <span class="mi">3000</span><span class="p">.</span><span class="mi">00</span> <span class="k">THEN</span> <span class="s1">'Between 1000 and 3000'</span>
     <span class="k">WHEN</span> <span class="n">freight</span> <span class="o">&gt;</span> <span class="mi">3000</span><span class="p">.</span><span class="mi">00</span>  <span class="k">THEN</span> <span class="s1">'More than 3000'</span>
     <span class="k">ELSE</span> <span class="s1">'Unknown'</span>
   <span class="k">END</span> <span class="k">AS</span> <span class="n">valuecategory</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="predicates-and-operators">3. Predicates and Operators</h2>
<div class="sectionbody">
<div class="paragraph">
<p>T-SQL has language elements in which predicates can be specified—for example, query filters such as <code>WHERE</code> and <code>HAVING</code>, the <code>JOIN</code> operator’s <code>ON</code> clause, <code>CHECK</code> constraints, and others.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
T-SQL uses three-valued predicate logic, where logical expressions can evaluate to <code>TRUE</code>, <code>FALSE</code>, or <code>UNKNOWN</code>.
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="predicates-in-between-and-like">3.1. Predicates: <code>IN</code>, <code>BETWEEN</code>, and <code>LIKE</code></h3>
<div class="ulist">
<ul>
<li>
<p>The <code>IN</code> predicate is used to check whether a value, or scalar expression, is equal to at least one of the elements in a set.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">orderdate</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">orderid</span> <span class="k">IN</span><span class="p">(</span><span class="mi">10248</span><span class="p">,</span> <span class="mi">10249</span><span class="p">,</span> <span class="mi">10250</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <code>BETWEEN</code> predicate is used to to check whether a value falls within a specified range, INCLUSIVE of the two delimiters of the range.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">orderdate</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">orderid</span> <span class="k">BETWEEN</span> <span class="mi">10300</span> <span class="k">AND</span> <span class="mi">10310</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <code>LIKE</code> predicate is used to check whether a character string value meets a specified pattern.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span>
<span class="k">WHERE</span> <span class="n">lastname</span> <span class="k">LIKE</span> <span class="n">N</span><span class="s1">'D%'</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Notice the use of the letter <code>N</code> to prefix the string <code>'D%';</code> it stands for National and is used to denote that a character string is of a Unicode data type (<code>NCHAR</code> or <code>NVARCHAR</code>), as opposed to a regular character data type (<code>CHAR</code> or <code>VARCHAR</code>).
</td>
</tr>
</table>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="comparison-operators-and">3.2. Comparison Operators: <code>=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code><=</code>, and <code>&lt;&gt;</code></h3>
<div class="ulist">
<ul>
<li>
<p>T-SQL supports the following comparison operators: <code>=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code><=</code>, <code>&lt;&gt;</code>, <code>!=</code> (same as <code>&lt;&gt;</code>, but not SQL standard), <code>!&gt;</code> (equivalent to <code><=</code>), and <code>!&lt;</code> (equivalent to <code>&gt;=</code>), of which the last three are not standard and should be avoided using.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">orderdate</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">orderdate</span> <span class="o">&gt;=</span> <span class="s1">'20220101'</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="logical-operators-or-and-and-not">3.3. Logical Operators <code>OR</code>, <code>AND</code>, and <code>NOT</code></h3>
<div class="ulist">
<ul>
<li>
<p>The logical operators <code>OR</code>, <code>AND</code>, and <code>NOT</code> are used to combine logical expressions.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">orderdate</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">orderdate</span> <span class="o">&gt;=</span> <span class="s1">'20220101'</span>
  <span class="k">AND</span> <span class="n">empid</span> <span class="k">NOT</span> <span class="k">IN</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="arithmetic-operators-and">3.4. Arithmetic Operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, and <code>%</code></h3>
<div class="ulist">
<ul>
<li>
<p>T-SQL supports the four obvious arithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, and <code>/</code>, and also supports the <code>%</code> operator (modulo), which returns the remainder of integer division.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">productid</span><span class="p">,</span> <span class="n">qty</span><span class="p">,</span> <span class="n">unitprice</span><span class="p">,</span> <span class="n">discount</span><span class="p">,</span>
  <span class="n">qty</span> <span class="o">*</span> <span class="n">unitprice</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">discount</span><span class="p">)</span> <span class="k">AS</span> <span class="n">val</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">OrderDetails</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Note that the data type of a scalar expression involving two operands is determined in T-SQL by the operand with the higher data-type precedence.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>If both operands are of the same data type, the result of the expression is of the same data type as well.</p>
</li>
<li>
<p>If the two operands are of different types, the one with the lower precedence is promoted to the one that is higher.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">WITH</span> <span class="n">Numbers</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span> <span class="mi">5</span> <span class="k">AS</span> <span class="n">IntValue</span><span class="p">,</span> <span class="mi">2</span> <span class="k">AS</span> <span class="n">IntDivisor</span><span class="p">,</span> <span class="mi">5</span><span class="p">.</span><span class="mi">0</span> <span class="k">AS</span> <span class="n">FloatValue</span>
<span class="p">)</span>
<span class="k">SELECT</span>
  <span class="n">IntValue</span> <span class="o">/</span> <span class="n">IntDivisor</span> <span class="k">AS</span> <span class="n">IntegerDivisionResult</span><span class="p">,</span> <span class="c1">-- Integer division</span>
  <span class="k">CAST</span><span class="p">(</span><span class="n">IntValue</span> <span class="k">AS</span> <span class="nb">NUMERIC</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="o">/</span> <span class="k">CAST</span><span class="p">(</span><span class="n">IntDivisor</span> <span class="k">AS</span> <span class="nb">NUMERIC</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="k">AS</span> <span class="n">DecimalDivisionResult</span><span class="p">,</span> <span class="c1">-- Decimal division with casting</span>
  <span class="n">FloatValue</span> <span class="o">/</span> <span class="n">IntDivisor</span> <span class="k">AS</span> <span class="n">DecimalDivisionFromFloatResult</span> <span class="c1">-- Division with a float</span>
<span class="k">FROM</span> <span class="n">Numbers</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</td>
</tr>
</table>
</div>
</li>
</ul>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The <code>NUMERIC(12, 2)</code> data type in T-SQL (SQL Server) defines a <em>fixed-precision decimal number</em>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>12</code> (Precision) → The total number of <strong>digits</strong> that can be stored (both before and after the decimal point).</p>
</li>
<li>
<p><code>2</code> (Scale) → The number of <strong>digits after the decimal point</strong>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="mi">1234567890</span><span class="p">.</span><span class="mi">12</span>   <span class="c1">-- Valid    (12 digits total: 10 before the decimal, 2 after) |</span>
<span class="mi">999999999999</span><span class="p">.</span><span class="mi">99</span> <span class="c1">-- Valid    (max possible value) |</span>
<span class="mi">100000000000</span><span class="p">.</span><span class="mi">00</span> <span class="c1">-- Invalid  (13 digits, exceeds precision) |</span>
<span class="mi">12345</span><span class="p">.</span><span class="mi">678</span>       <span class="c1">-- Invalid  (more than 2 decimal places) |</span></code></pre>
</div>
</div>
</li>
<li>
<p><code>NUMERIC(p, s)</code> and <code>DECIMAL(p, s)</code> are functionally <strong>identical</strong> in SQL Server.</p>
</li>
<li>
<p>Both store <em>exact</em> numbers (unlike <code>FLOAT</code> or <code>REAL</code>, which are approximate).</p>
</li>
</ul>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="query-tuning">4. Query Tuning</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>To simulate a cold cache scenario for query performance measurement, run a manual checkpoint to write dirty buffers to disk and then drop all clean buffers from cache.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">CHECKPOINT</span><span class="p">;</span>
<span class="n">DBCC</span> <span class="n">DROPCLEANBUFFERS</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="admonitionblock warning">
<table>
<tr>
<td class="icon">
<i class="fa icon-warning" title="Warning"></i>
</td>
<td class="content">
<code>DBCC DROPCLEANBUFFERS</code> should only be used isolated test environments as it can severely impact server performance.
</td>
</tr>
</table>
</div>
</li>
<li>
<p>To see the estimated plan in SSMS/ADS by highlighting the query and clicking the Display Estimated Execution Plan (Ctrl+L) button on the SQL Editor toolbar.</p>
<div class="ulist">
<ul>
<li>
<p>To see the actual plan by enabling the Include Actual Execution Plan (Ctrl+M) button and executing the query.</p>
</li>
<li>
<p>Actual execution plans are generated after the T-SQL queries or batches execute that includes run-time information like the actual number of rows returned by, and the actual number of executions of, each operator.</p>
</li>
</ul>
</div>
</li>
<li>
<p>To enable measuring query performance with the session options STATISTICS IO (for I/O information) and STATISTICS TIME (for time information):</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SET</span> <span class="k">STATISTICS</span> <span class="n">IO</span><span class="p">,</span> <span class="nb">TIME</span> <span class="k">ON</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="sql-server-internals">4.1. SQL Server Internals</h3>
<div class="paragraph">
<p>A <em>page</em> is an 8-KB unit where SQL Server stores data. With disk-based tables, the page is the smallest I/O unit that SQL Server can read or write. An <em>extent</em> is a unit that contains eight contiguous pages.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A <em>table</em> can be organized in one of two ways—either as a <em>heap</em> or as a <em>B- tree</em> (HOBT), technically as a B-tree when it has a clustered index defined on it and as a heap when it doesn’t.</p>
</li>
<li>
<p>A <em>heap</em> is a table that has no clustered index, which means that the data is laid out as a bunch of pages and extents without any order.</p>
<div class="ulist">
<ul>
<li>
<p>SQL Server maps the data that belongs to a heap using one or more bitmap pages called <em>index allocation maps (IAMs)</em>.</p>
</li>
<li>
<p>An <em>allocation order scan</em> is a heap scan that uses IAM pages to determine which pages and extents belong to the heap and reads them in physical file order, typically resulting in sequential reads when data is not cached.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="indexes">4.1.1. Indexes</h4>
<div class="ulist">
<ul>
<li>
<p>All indexes in SQL Server on disk-based tables are structured as <em>B-trees</em>, which are a special case of balanced trees.</p>
<div class="ulist">
<ul>
<li>
<p>An index on disk-based tables has a doubly linked list in their leaf level, so SQL Server can scan the rows in the leaf in forward and backward order.</p>
</li>
<li>
<p>A <em>clustered index</em> is structured as a B-tree, and it maintains the entire table’s data, not a copy, in its leaf level.</p>
<div class="ulist">
<ul>
<li>
<p>At the leaf level of the clustered index, the order in which data pages are stored on disk may not correspond to the sorted order of the index keys due to page splits.</p>
</li>
<li>
<p>If page <code>x</code> points to next page <code>y</code>, and page <code>y</code> appears before page <code>x</code> in the file, page <code>y</code> is considered an out-of- order page.</p>
</li>
</ul>
</div>
</li>
<li>
<p>A <em>nonclustered index</em> is also structured as a B-tree, in contrast to a clustered index, a leaf row in a nonclustered index contains only the index key columns and a row locator value representing a particular data row.</p>
<div class="ulist">
<ul>
<li>
<p>With the nonclustered index seek or range scan, it is more efficient because with fewer columns in the leaf row to fit more rows per leaf page.</p>
</li>
<li>
<p>When using multiple predicates, the order of key columns in a nonclustered index is crucial for performance, as it determines whether qualifying rows are stored contiguously in the index leaf, maximizing seeks and minimizing scans.</p>
<div class="ulist">
<ul>
<li>
<p>When have multiple equality predicates, place the columns from the predicates in any order in the index key list.</p>
</li>
<li>
<p>When have at most one range predicate, place the columns from the equality predicates first in the key list and the column from the range predicate last.</p>
</li>
<li>
<p>When have multiple range predicates, place the column from the most selective range predicate before the columns from the remaining range predicates.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>An <em>index order scan</em> is a scan performed on the leaf level of a B-tree index in the sorted order of the index key, using a doubly linked list for inter-page navigation and a row-offset array for intra-page order, supporting both full ordered scans and range scans.</p>
<div class="ulist">
<ul>
<li>
<p>An index scan is necessary when the query filters on a non-leading column of the index key to scan a larger portion of the index (or even the entire index) to find the matching entries.</p>
</li>
</ul>
</div>
</li>
<li>
<p>An <em>index seek</em> is performed when SQL Server needs to find a certain key or range of keys at the leaf level of the index.</p>
<div class="ulist">
<ul>
<li>
<p>An index seek is possible when the query filters on the leading column (or a prefix of the leading columns) of the index key to navigate the B-tree from the root node down to the specific leaf page(s) containing the matching values.</p>
</li>
</ul>
</div>
</li>
<li>
<p>In SQL Server, the direction of key columns can be indicated in an index definition (ascending by default).</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">CREATE</span> <span class="k">UNIQUE</span> <span class="n">NONCLUSTERED</span> <span class="k">INDEX</span> <span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="k">ON</span> <span class="p">[</span><span class="n">schema1</span><span class="p">].[</span><span class="n">Table1</span><span class="p">]</span>
<span class="p">(</span>
  <span class="p">[</span><span class="n">col1</span><span class="p">],</span> <span class="c1">-- same as [col1] ASC</span>
  <span class="p">[</span><span class="n">col2</span><span class="p">]</span> <span class="k">DESC</span>
<span class="p">)</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The storage engine currently processes parallel scans only in the forward direction; backward scans are processed serially.</p>
</li>
<li>
<p>If parallelism is a critical factor in the performance of the query, arrange a descending index.</p>
</li>
</ul>
</div>
</li>
<li>
<p>A <em>filtered index</em> is an index on a subset of rows from the underlying table defined based on a predicate.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">CREATE</span> <span class="n">NONCLUSTERED</span> <span class="k">INDEX</span> <span class="n">idx_USA_orderdate</span>
  <span class="k">ON</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span>
  <span class="n">INCLUDE</span><span class="p">(</span><span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">requireddate</span><span class="p">)</span>
  <span class="k">WHERE</span> <span class="n">shipcountry</span> <span class="o">=</span> <span class="n">N</span><span class="s1">'USA'</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>A <em>covering index</em> is an index that contains all the columns required by the query, avoiding lookups to the base table.</p>
<div class="ulist">
<ul>
<li>
<p>A clustered index is a covering index because the leaf row is the complete data row.</p>
</li>
<li>
<p>A nonclustered index can be a covering index with an <code>INCLUDE</code> clause listing all non-key columns required by the query.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">idx_nc_cid_i_oid_eid_sid_od_flr</span>
  <span class="k">ON</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span><span class="p">(</span><span class="n">custid</span><span class="p">)</span>
  <span class="n">INCLUDE</span><span class="p">(</span><span class="n">orderid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">shipperid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">filler</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>A <em>columnstore index</em> stores data by columns rather than by rows, which leads to substantial performance advantages for analytical queries.</p>
<div class="ulist">
<ul>
<li>
<p>A nonclustered columnstore index is a secondary index created on an existing table that is stored in the traditional rowstore format.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">CREATE</span> <span class="n">NONCLUSTERED</span> <span class="n">COLUMNSTORE</span> <span class="k">INDEX</span> <span class="n">idx_nc_cs</span>
    <span class="k">ON</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Fact</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">key2</span><span class="p">,</span> <span class="n">key3</span><span class="p">,</span> <span class="n">measure1</span><span class="p">,</span> <span class="n">measure2</span><span class="p">,</span> <span class="n">measure3</span><span class="p">,</span> <span class="n">measure4</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
<li>
<p>A clustered columnstore index is the primary storage for the table, with data physically stored in columnstore format.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">CREATE</span> <span class="n">CLUSTERED</span> <span class="n">COLUMNSTORE</span> <span class="k">INDEX</span> <span class="n">idx_cl_cs</span> <span class="k">ON</span> <span class="n">dbo</span><span class="p">.</span><span class="n">FactCS</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="execution-plans">4.1.2. Execution Plans</h4>
<div class="paragraph">
<p>In SQL Server, the <em>relational engine</em>, like a brain including the optimizer, produces execution plans for queries, while the <em>storage engine</em>, like muscles, carries out these instructions, sometimes choosing the best of several options based on performance and consistency.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>When the plan shows a table scan operator, the storage engine has only one option: to use an allocation order scan.</p>
</li>
<li>
<p>When the plan shows an ordered index scan operator (clustered or nonclustered), the storage engine can use only an index order scan.</p>
</li>
<li>
<p>When the plan shows an unordered index scan operator, the storage engine has two options to scan the data: allocation order scan and index order scan.</p>
<div class="ulist">
<ul>
<li>
<p>An allocation order scan can return multiple occurrences of rows and skip rows resulting from splits that take place during the scan.</p>
<div class="ulist">
<ul>
<li>
<p>The storage engine opts for this option when the index size is greater than 64 pages and the request is running under the Read Uncommitted isolation level.</p>
</li>
<li>
<p>When the query is running under the default Read Committed isolation level or higher, the storage engine will opt for an index order scan to prevent such phenomena from happening because of splits.</p>
</li>
</ul>
</div>
</li>
<li>
<p>An index order scan is safer in the sense that it won’t read multiple occurrences of the same row or skip rows because of splits.</p>
<div class="ulist">
<ul>
<li>
<p>If an index key is modified after the row was read by an index order scan and the row is moved to a point in the leaf that the scan hasn’t reached yet, the scan will read the row a second time or never reach that row.</p>
</li>
<li>
<p>It can happen in Read Uncommitted, Read Committed, and even Repeatable Read because the update was done to a row that was not yet read, but cannot happen under the isolation levels Serializable, Read Committed Snapshot, and Snapshot.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="cardinality-estimates">4.1.3. Cardinality Estimates</h4>
<div class="paragraph">
<p>A <em>query optimizer</em>, the main component in the <em>relational engine</em> (also known as the <em>query processor</em>), is responsible for generating physical execution plans for the queries.</p>
</div>
<div class="paragraph">
<p>A <em>cardinality estimator</em>, that makes cardinality estimates of the number of rows returned by each operator, is employed by the optimizer to make decisions about access methods, join and aggregation algorithms, and memory allocation for sort and hash operations.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>It is not a simple task to make accurate cardinality estimations without actually running the query and without a time machine.</p>
<div class="ulist">
<ul>
<li>
<p>Underestimations will tend to result in the following (not an exhaustive list):</p>
<div class="ulist">
<ul>
<li>
<p>For filters, preferring an index seek and lookups to a scan.</p>
</li>
<li>
<p>For aggregates, joins, and distinct, preferring order-based algorithms to hash-based ones.</p>
</li>
<li>
<p>For sort and hash operations, there might be spills to tempdb as a result of an insufficient memory grant.</p>
</li>
<li>
<p>Preferring a serial plan over a parallel one.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Overestimations will tend to result in pretty much the inverse of underestimations (again, not an exhaustive list):</p>
<div class="ulist">
<ul>
<li>
<p>For filters, preferring a scan to an index seek and lookups.</p>
</li>
<li>
<p>For aggregates, joins, and distinct, preferring hash-based algorithms to order-based ones.</p>
</li>
<li>
<p>For sort and hash operations, there won’t be spills, but very likely there will be a larger memory grant than needed, resulting in wasting memory.</p>
</li>
<li>
<p>Preferring a parallel plan over a serial one.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>SQL Server relies on statistics about the data in its cardinality estimates.</p>
<div class="ulist">
<ul>
<li>
<p>Whenever creating an index, SQL Server creates statistics using a full scan of the data.</p>
</li>
<li>
<p>When additional statistics are needed, SQL Server might create them automatically using a sampled percentage of the data.</p>
</li>
<li>
<p>SQL Server creates three main types of statistics: header, density vectors, and a histogram.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">idx_nc_cid_eid</span> <span class="k">ON</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span><span class="p">(</span><span class="n">custid</span><span class="p">,</span> <span class="n">empid</span><span class="p">);</span>
<span class="n">DBCC</span> <span class="n">SHOW_STATISTICS</span><span class="p">(</span><span class="n">N</span><span class="s1">'dbo.Orders'</span><span class="p">,</span> <span class="n">N</span><span class="s1">'idx_nc_cid_eid'</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="parallel-query-execution">4.1.4. Parallel Query Execution</h4>
<div class="paragraph">
<p><em>Parallel query execution</em> (<em>intraquery parallelism</em> or <em>parallelism</em>) uses multiple processor cores to simultaneously process smaller chunks of data, leveraging modern hardware&#8217;s increased computing power for efficient large-data processing.</p>
</div>
<div class="paragraph">
<p>Parallel processing, splitting work across multiple processor cores, can be implemented using two main models:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>a factory-line model (where each core performs a single action on data passed between cores) and</p>
</li>
<li>
<p>a stream-based model (where each core processes a subset of data through all required operations).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>While the factory-line model might seem intuitively better for human tasks, database systems like SQL Server use stream-based models.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Processors can efficiently switch between tasks as long as data is in local cache, and minimizing data movement between memory and storage is crucial for performance.</p>
</li>
<li>
<p>Stream-based models can scale much better than factory-line models with large datasets, distributing rows across cores as evenly as possible using various algorithms for parallel execution of all operations on each subset of data.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>A query plan will be either entirely serial—processed using a single worker thread—or it will include one or more parallel branches, which are areas of the plan that are processed using multiple threads.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The query processor can merge parallel streams into a single stream or create parallel streams from a single stream, resulting in plans with interleaved serial and parallel zones.</p>
</li>
<li>
<p>All parallel zones in a plan use the same number of threads, known as the <em>degree of parallelism</em> (DOP), determined by server settings, hints, and runtime conditions.</p>
</li>
<li>
<p>A given set of threads might be reused by multiple zones over the course of the plan.</p>
</li>
<li>
<p>Parallel operators in the execution plan are marked with a circle icon with two arrows.</p>
</li>
<li>
<p>Within a parallel zone, each thread processes a unique stream of rows before passing them to the next zone (serial or parallel).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Parallel query plans rely on the <em>Exchange</em> (displayed as <em>Parallelism</em>) operator, which manages worker threads and data streams.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Each SQL Server query plan operator has, internally, two logical interfaces: a consumer interface, which takes rows from upstream, and a producer interface, which passes rows downstream.</p>
</li>
<li>
<p>While most operators handle their consumer and producer interfaces on the same thread and process single row streams, Exchange operators involve multiple threads and handle multiple streams, keeping other operators unaware of the parallelism.</p>
</li>
<li>
<p>The number of threads on each side of the exchange depends on the type of exchange:</p>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
A query plan can be read right-to-left (data flow) or left-to-right (operator logic).
</td>
</tr>
</table>
</div>
<div class="ulist">
<ul>
<li>
<p>Gather Streams operators will have DOP threads on the consumer side and one thread on the producer side.</p>
<div class="ulist">
<ul>
<li>
<p>From a data-flow perspective, it merges multiple parallel streams into a single serial stream, marking the end of a parallel zone.</p>
</li>
<li>
<p>From an operator-logic perspective, it starts a parallel zone by invoking parallel worker threads.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Distribute Streams operators will have one thread on the consumer side and DOP threads on the producer side.</p>
<div class="ulist">
<ul>
<li>
<p>From a data-flow perspective, it splits a serial stream into multiple parallel streams, marking the start of a parallel zone.</p>
</li>
<li>
<p>From an operator-logic perspective, it marks the end of a parallel zone.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Repartition Streams operators will have DOP threads on each side of the exchange.</p>
<div class="ulist">
<ul>
<li>
<p>From both data-flow and operator-logic perspectives, it redistributes rows from multiple parallel streams onto different threads based on a new scheme, effectively joining two adjacent parallel zones.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>Parallel query plans use five row distribution strategies across threads on the producer side of Distribute or Repartition exchanges:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Hash: Assigns rows to threads based on a hash function, grouping rows with the same hashed value on the same thread (e.g., grouping by ProductID for aggregation).</p>
</li>
<li>
<p>Round Robin: Distributes rows sequentially to each thread in a rotating fashion, often used outside Nested Loops where each row represents independent work.</p>
</li>
<li>
<p>Broadcast: Sends all rows to all threads, used for small row counts when all threads need the complete dataset (e.g., building a hash table).</p>
</li>
<li>
<p>Demand: Producer-side threads receive rows on request, currently used only with aligned partitioned tables.</p>
</li>
<li>
<p>Range: Assigns unique, non-overlapping key ranges to each thread, used only for index building.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="access-methods">4.2. Access Methods</h3>
<div class="sect3">
<h4 id="unordered-clustered-index-scan-or-table-scan">4.2.1. Unordered Clustered Index Scan or Table Scan</h4>
<div class="paragraph">
<p>A <em>table scan</em> or an <em>unordered clustered index scan</em> involves a scan of all data pages that belong to the table.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Full table scans occur primarily in two cases: when all rows are required or when need only a subset of the rows but don’t have a good index to support the filter.</p>
</li>
<li>
<p>When the underlying table is a heap, the plan will show an operator called <em>Table Scan</em>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders2</span> <span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span><span class="p">;</span>
<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders2</span> <span class="k">ADD</span> <span class="k">CONSTRAINT</span> <span class="n">PK_Orders2</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">NONCLUSTERED</span> <span class="p">(</span><span class="n">orderid</span><span class="p">);</span>
<span class="k">GO</span>

<span class="c1">-- table scan</span>
<span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">shipperid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">filler</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orderss</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>When the underlying table is a B- tree, the plan will show an operator called <em>Clustered Index Scan</em> with an <em>Ordered: False</em> property.</p>
<div class="ulist">
<ul>
<li>
<p>The fact that the <code>Ordered</code> property of the Clustered Index Scan operator indicates <code>False</code> means that as far as the relational engine is concerned, the data does not need to be returned from the operator in key order.</p>
</li>
<li>
<p>It is up to the storage engine to determine to employ allocation order scan or index order scan.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- clustered index scan</span>
<span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">shipperid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">filler</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="unordered-covering-nonclustered-index-scan">4.2.2. Unordered Covering Nonclustered Index Scan</h4>
<div class="paragraph">
<p>An <em>unordered covering nonclustered index scan</em> is a query access method to retrieve all necessary data for a query solely from the leaf level of a nonclustered index, without accessing the base table&#8217;s data rows.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>An <em>unordered covering nonclustered index scan</em> is similar to an unordered clustered index scan.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- unordered covering nonclustered index scan</span>
<span class="k">SELECT</span> <span class="n">orderid</span> <span class="c1">-- PRIMARY KEY NONCLUSTERED (orderid)</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="ordered-clustered-index-scan">4.2.3. Ordered Clustered Index Scan</h4>
<div class="paragraph">
<p>An <em>ordered clustered index scan</em> is a full scan of the leaf level of the clustered index that guarantees that the data will be returned to the next operator in index order.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- ordered clustered index scan</span>
<span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">shipperid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">filler</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">orderdate</span><span class="p">;</span> <span class="c1">-- CLUSTERED INDEX (orderdate)</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="ordered-covering-nonclustered-index-scan">4.2.4. Ordered Covering Nonclustered Index Scan</h4>
<div class="paragraph">
<p>An <em>ordered covering nonclustered index scan</em> is similar to an unordered covering nonclustered index scan, but retrieves data in the order of the index keys.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- ordered covering nonclustered index scan</span>
<span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">orderid</span><span class="p">;</span> <span class="c1">-- PRIMARY KEY NONCLUSTERED (orderid)</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="nonclustered-index-seek-range-scan-lookups">4.2.5. Nonclustered Index Seek + Range Scan + Lookups</h4>
<div class="paragraph">
<p>A <em>nonclustered index seek + range scan + lookups</em> access method is typically used for small-range queries or point queries using a nonclustered index that doesn’t cover the query.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A <em>point query</em> uses equality conditions (<code>=</code>) to target specific values, potentially retrieving zero, one, or multiple rows, while a <em>range query</em> uses range operators (<code>&lt;</code>, <code>&gt;</code>, <code><=</code>, <code>&gt;=</code>, <code>BETWEEN</code>) to retrieve rows within a specified interval.</p>
</li>
<li>
<p>While the index is capable of supporting the filter, lookups will be required to obtain the remaining columns from the respective data rows due to the index&#8217;s non-covering nature.</p>
<div class="ulist">
<ul>
<li>
<p>If the target table is a heap, the lookups will be RID Lookups, each costing one page read.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- nonclustered index seek + range scan + lookups against a heap</span>
<span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">shipperid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">filler</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders2</span> <span class="c1">-- heap</span>
<span class="k">WHERE</span> <span class="n">orderid</span> <span class="o">&lt;=</span> <span class="mi">25</span><span class="p">;</span> <span class="c1">-- PRIMARY KEY NONCLUSTERED (orderid)</span></code></pre>
</div>
</div>
</li>
<li>
<p>If the underlying table is a B-tree, the lookups will be Key Lookups, each costing as many reads as the number of levels in the clustered index.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- nonclustered index seek + range scan + lookups against a B-tree</span>
<span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">shipperid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">filler</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span> <span class="c1">-- B-tree</span>
<span class="k">WHERE</span> <span class="n">orderid</span> <span class="o">&lt;=</span> <span class="mi">25</span><span class="p">;</span> <span class="c1">-- PRIMARY KEY NONCLUSTERED (orderid)</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="unordered-nonclustered-index-scan-lookups">4.2.6. Unordered Nonclustered Index Scan + Lookups</h4>
<div class="paragraph">
<p>An <em>unordered nonclustered index scan + lookups</em> access method is typically used by the optimizer when the following conditions are in place:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The query has a selective filter.</p>
</li>
<li>
<p>There’s a nonclustered index that contains the filtered column (or columns), but the index isn’t a covering one.</p>
</li>
<li>
<p>The filtered columns are not leading columns in the index key list.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- unordered nonclustered index scan + lookups</span>
<span class="c1">-- missing index</span>
<span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">shipperid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">filler</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">custid</span> <span class="o">=</span> <span class="s1">'C0000000001'</span><span class="p">;</span> <span class="c1">-- NONCLUSTERED INDEX (shipperid, orderdate, custid);</span></code></pre>
</div>
</div>
</li>
<li>
<p>It performs a full unordered scan of the leaf level of the index, followed by lookups for qualifying keys, a strategy that becomes less efficient than a full table scan for less selective queries due to the lookup overhead.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="clustered-index-seek-range-scan">4.2.7. Clustered Index Seek + Range Scan</h4>
<div class="paragraph">
<p>A <em>clustered index seek + range scan</em> access method is typically used by the optimizer for range queries where the filter based on the first key column (or columns) of the clustered index.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- clustered index seek + range scan</span>
<span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">shipperid</span><span class="p">,</span> <span class="n">orderdate</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">orderdate</span> <span class="o">=</span> <span class="s1">'20140212'</span><span class="p">;</span> <span class="c1">-- CLUSTERED INDEX (orderdate);</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="covering-nonclustered-index-seek-range-scan">4.2.8. Covering Nonclustered Index Seek + Range Scan</h4>
<div class="paragraph">
<p>A <em>covering nonclustered index seek + range scan</em> access method is similar to the access method <em>clustered index seek + range scan</em>, only it uses a nonclustered covering index.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- nonclustered index seek + range scan</span>
<span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">shipperid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">custid</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">shipperid</span> <span class="o">=</span> <span class="s1">'C'</span>
  <span class="k">AND</span> <span class="n">orderdate</span> <span class="o">&gt;=</span> <span class="s1">'20140101'</span>
  <span class="k">AND</span> <span class="n">orderdate</span> <span class="o">&lt;</span> <span class="s1">'20150101'</span><span class="p">;</span> <span class="c1">-- NONCLUSTERED INDEX (shipperid, orderdate, custid);</span></code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="joins">5. Joins</h2>
<div class="sectionbody">
<div class="paragraph">
<p>T-SQL supports four table operators: <code>JOIN</code>, <code>APPLY</code>, <code>PIVOT</code>, and <code>UNPIVOT</code>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>JOIN</code> table operator is standard, whereas <code>APPLY</code>, <code>PIVOT</code>, and <code>UNPIVOT</code> are T-SQL extensions to the standard.</p>
</li>
<li>
<p>Each table operator acts on tables provided to it as input, applies a set of logical query processing phases, and returns a table result.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>A <code>JOIN</code> table operator operates on two input tables with three fundamental types of joins: cross joins, inner joins, and outer joins.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A cross join applies only one phase—Cartesian Product.</p>
</li>
<li>
<p>An inner join applies two phases—Cartesian Product and Filter.</p>
</li>
<li>
<p>An outer join applies three phases— Cartesian Product, Filter, and Add Outer Rows.</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="cross">5.1. CROSS</h3>
<div class="paragraph">
<p>The <em>cross join</em> is the simplest type of join that implements only one logical query processing phase—a Cartesian Product.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>It operates on the two tables provided as inputs and produces a Cartesian product of the two, that is, each row from one input is matched with all rows from the other.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- SQL-92 syntax</span>
<span class="k">SELECT</span> <span class="k">C</span><span class="p">.</span><span class="n">custid</span><span class="p">,</span> <span class="n">E</span><span class="p">.</span><span class="n">empid</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span> <span class="k">AS</span> <span class="k">C</span>
   <span class="k">CROSS</span> <span class="k">JOIN</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span> <span class="k">AS</span> <span class="n">E</span><span class="p">;</span>

<span class="c1">-- SQL-89 syntax (not recommended)</span>
<span class="k">SELECT</span> <span class="k">C</span><span class="p">.</span><span class="n">custid</span><span class="p">,</span> <span class="n">E</span><span class="p">.</span><span class="n">empid</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span> <span class="k">AS</span> <span class="k">C</span><span class="p">,</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span> <span class="k">AS</span> <span class="n">E</span><span class="p">;</span>

<span class="c1">-- Self cross joins</span>
<span class="k">SELECT</span>
  <span class="n">E1</span><span class="p">.</span><span class="n">empid</span><span class="p">,</span> <span class="n">E1</span><span class="p">.</span><span class="n">firstname</span><span class="p">,</span> <span class="n">E1</span><span class="p">.</span><span class="n">lastname</span><span class="p">,</span>
  <span class="n">E2</span><span class="p">.</span><span class="n">empid</span><span class="p">,</span> <span class="n">E2</span><span class="p">.</span><span class="n">firstname</span><span class="p">,</span> <span class="n">E2</span><span class="p">.</span><span class="n">lastname</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span> <span class="k">AS</span> <span class="n">E1</span>
   <span class="k">CROSS</span> <span class="k">JOIN</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span> <span class="k">AS</span> <span class="n">E2</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Digits</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Digits</span> <span class="p">(</span><span class="n">digit</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">);</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Digits</span><span class="p">(</span><span class="n">digit</span><span class="p">)</span>
  <span class="k">VALUES</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">),</span> <span class="p">(</span><span class="mi">7</span><span class="p">),</span> <span class="p">(</span><span class="mi">8</span><span class="p">),</span> <span class="p">(</span><span class="mi">9</span><span class="p">);</span>
<span class="c1">-- Producing tables of numbers</span>
<span class="k">SELECT</span> <span class="n">D3</span><span class="p">.</span><span class="n">digit</span> <span class="o">*</span> <span class="mi">100</span> <span class="o">+</span> <span class="n">D2</span><span class="p">.</span><span class="n">digit</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">D1</span><span class="p">.</span><span class="n">digit</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">AS</span> <span class="n">n</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Digits</span> <span class="k">AS</span> <span class="n">D1</span>
   <span class="k">CROSS</span> <span class="k">JOIN</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Digits</span> <span class="k">AS</span> <span class="n">D2</span>
   <span class="k">CROSS</span> <span class="k">JOIN</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Digits</span> <span class="k">AS</span> <span class="n">D3</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">n</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">1
2
3
. . .
998
999
1000</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="inner">5.2. INNER</h3>
<div class="paragraph">
<p>An <em>inner join</em> applies two logical query processing phases—it applies a Cartesian product between the two input tables like in a cross join, and then it filters rows based on a  specified predicate in a designated clause called <code>ON</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- SQL-92 syntax</span>
<span class="k">SELECT</span> <span class="n">E</span><span class="p">.</span><span class="n">empid</span><span class="p">,</span> <span class="n">E</span><span class="p">.</span><span class="n">firstname</span><span class="p">,</span> <span class="n">E</span><span class="p">.</span><span class="n">lastname</span><span class="p">,</span> <span class="n">O</span><span class="p">.</span><span class="n">orderid</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span> <span class="k">AS</span> <span class="n">E</span>
  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span> <span class="k">AS</span> <span class="n">O</span>
  <span class="k">ON</span> <span class="n">E</span><span class="p">.</span><span class="n">empid</span> <span class="o">=</span> <span class="n">O</span><span class="p">.</span><span class="n">empid</span><span class="p">;</span>

<span class="c1">-- Note that the SQL-89 syntax has no ON clause.</span>
<span class="k">SELECT</span> <span class="n">E</span><span class="p">.</span><span class="n">empid</span><span class="p">,</span> <span class="n">E</span><span class="p">.</span><span class="n">firstname</span><span class="p">,</span> <span class="n">E</span><span class="p">.</span><span class="n">lastname</span><span class="p">,</span> <span class="n">O</span><span class="p">.</span><span class="n">orderid</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span> <span class="k">AS</span> <span class="n">E</span><span class="p">,</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span> <span class="k">AS</span> <span class="n">O</span>
<span class="k">WHERE</span> <span class="n">E</span><span class="p">.</span><span class="n">empid</span> <span class="o">=</span> <span class="n">O</span><span class="p">.</span><span class="n">empid</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
As with the <code>WHERE</code> and <code>HAVING</code> clauses, the <code>ON</code> clause also returns only rows for which the predicate evaluates to <code>TRUE</code>, and it does not return rows for which the predicate evaluates to <code>FALSE</code> or <code>UNKNOWN</code>.
</td>
</tr>
</table>
</div>
<div class="ulist">
<ul>
<li>
<p>When a join condition involves only an equality operator, the join is said to be an <em>equi join</em>.</p>
</li>
<li>
<p>When a join condition involves any operator besides equality, the join is said to be a <em>non-equi join</em>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span>
  <span class="n">E1</span><span class="p">.</span><span class="n">empid</span><span class="p">,</span> <span class="n">E1</span><span class="p">.</span><span class="n">firstname</span><span class="p">,</span> <span class="n">E1</span><span class="p">.</span><span class="n">lastname</span><span class="p">,</span>
  <span class="n">E2</span><span class="p">.</span><span class="n">empid</span><span class="p">,</span> <span class="n">E2</span><span class="p">.</span><span class="n">firstname</span><span class="p">,</span> <span class="n">E2</span><span class="p">.</span><span class="n">lastname</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span> <span class="k">AS</span> <span class="n">E1</span>
  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span> <span class="k">AS</span> <span class="n">E2</span>
  <span class="k">ON</span> <span class="n">E1</span><span class="p">.</span><span class="n">empid</span> <span class="o">&lt;</span> <span class="n">E2</span><span class="p">.</span><span class="n">empid</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Standard SQL supports a concept called <em>natural join</em>, which represents an inner join based on a match between columns with the same name in both sides. T-SQL doesn’t have an implementation of a natural join.</p>
</div>
<div class="paragraph">
<p>For example, <code>T1 NATURAL JOIN T2</code> joins the rows between <code>T1</code> and <code>T2</code> based on a match between the columns with the same names on both sides.</p>
</div>
<div class="paragraph">
<p>A join that has an explicit join predicate like <em>equi join</em> and <em>non-equi join</em>  that is based on a binary operator (equality or inequality) is known as a <em>theta join</em>.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="outer">5.3. OUTER</h3>
<div class="paragraph">
<p><em>Outer joins</em> were introduced in SQL-92 and, unlike inner joins and cross joins, have only one standard syntax—the one in which the <code>JOIN</code> keyword is specified between the table names and the join condition is specified in the <code>ON</code> clause.</p>
</div>
<div class="paragraph">
<p>Outer joins apply the two logical processing phases that inner joins apply (Cartesian Product and the <code>ON</code> filter), plus a third phase called Adding Outer Rows that is unique to this type of join.</p>
</div>
<div class="paragraph">
<p>In an outer join, a table is marked as a preserved table by using the keywords <code>LEFT OUTER JOIN</code>, <code>RIGHT OUTER JOIN</code>, or <code>FULL OUTER JOIN</code> between the table names.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>OUTER</code> keyword is optional.</p>
</li>
<li>
<p>The <code>LEFT</code> keyword means that the rows of the left table (the one to the left of the <code>JOIN</code> keyword) are preserved; the <code>RIGHT</code> keyword means that the rows in the right table are preserved; and the <code>FULL</code> keyword means that the rows in both the left and right tables are preserved.</p>
</li>
<li>
<p>The third logical query processing phase of an outer join identifies the rows from the preserved table that did not find matches in the other table based on the <code>ON</code> predicate, which adds those rows to the result table produced by the first two phases of the join, and it uses NULLs as placeholders for the attributes from the nonpreserved side of the join in those outer rows.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="k">C</span><span class="p">.</span><span class="n">custid</span><span class="p">,</span> <span class="k">C</span><span class="p">.</span><span class="n">companyname</span><span class="p">,</span> <span class="n">O</span><span class="p">.</span><span class="n">orderid</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span> <span class="k">AS</span> <span class="k">C</span>
  <span class="k">LEFT</span> <span class="k">OUTER</span> <span class="k">JOIN</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span> <span class="k">AS</span> <span class="n">O</span>
  <span class="k">ON</span> <span class="k">C</span><span class="p">.</span><span class="n">custid</span> <span class="o">=</span> <span class="n">O</span><span class="p">.</span><span class="n">custid</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
A <code>FULL OUTER JOIN</code> with the condition <code>ON 1=1</code> is functionally equivalent to a <code>CROSS JOIN</code>.
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>If the predicate in the <code>WHERE</code> clause refers to an attribute from the nonpreserved side of the join using an expression in the form <code>&lt;attribute&gt; &lt;operator&gt; &lt;value&gt;</code>, because attributes from the nonpreserved side of the join are NULLs in outer rows, and an expression in the form <code>NULL &lt;operator&gt; &lt;value&gt;</code> yields <code>UNKNOWN</code> (unless it’s the <code>IS NULL</code> operator explicitly looking for NULLs, or the distinct predicate <code>IS [NOT] DISTINCT FROM</code>), it’s usually an indication of a bug,</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="k">C</span><span class="p">.</span><span class="n">custid</span><span class="p">,</span> <span class="k">C</span><span class="p">.</span><span class="n">companyname</span><span class="p">,</span> <span class="n">O</span><span class="p">.</span><span class="n">orderid</span><span class="p">,</span> <span class="n">O</span><span class="p">.</span><span class="n">orderdate</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span> <span class="k">AS</span> <span class="k">C</span>
  <span class="k">LEFT</span> <span class="k">OUTER</span> <span class="k">JOIN</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span> <span class="k">AS</span> <span class="n">O</span>
  <span class="k">ON</span> <span class="k">C</span><span class="p">.</span><span class="n">custid</span> <span class="o">=</span> <span class="n">O</span><span class="p">.</span><span class="n">custid</span>
<span class="k">WHERE</span> <span class="n">O</span><span class="p">.</span><span class="n">orderdate</span> <span class="o">&gt;=</span> <span class="s1">'20220101'</span><span class="p">;</span> <span class="c1">-- Effectively, the join becomes an inner join.</span></code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>If the predicate in the inner join’s <code>ON</code> clause compares an attribute from the nonpreserved side of the outer join and an attribute from the third table, all outer rows are discarded.</p>
</div>
<div class="paragraph">
<p>Remember that outer rows have NULLs in the attributes from the nonpreserved side of the join, and comparing a NULL with anything yields <code>UNKNOWN</code>. <code>UNKNOWN</code> is filtered out by the <code>ON</code> filter. In other words, such a predicate nullifies the outer join, effectively turning it into an inner join.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- outer rows are dropped whenever any kind of outer join (left, right, or full) is</span>
<span class="c1">-- followed by a subsequent inner join or right outer join.</span>
<span class="k">SELECT</span> <span class="k">C</span><span class="p">.</span><span class="n">custid</span><span class="p">,</span> <span class="n">O</span><span class="p">.</span><span class="n">orderid</span><span class="p">,</span> <span class="n">OD</span><span class="p">.</span><span class="n">productid</span><span class="p">,</span> <span class="n">OD</span><span class="p">.</span><span class="n">qty</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span> <span class="k">AS</span> <span class="k">C</span>
  <span class="k">LEFT</span> <span class="k">OUTER</span> <span class="k">JOIN</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span> <span class="k">AS</span> <span class="n">O</span>
  <span class="k">ON</span> <span class="k">C</span><span class="p">.</span><span class="n">custid</span> <span class="o">=</span> <span class="n">O</span><span class="p">.</span><span class="n">custid</span>
  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">Sales</span><span class="p">.</span><span class="n">OrderDetails</span> <span class="k">AS</span> <span class="n">OD</span>
  <span class="k">ON</span> <span class="n">O</span><span class="p">.</span><span class="n">orderid</span> <span class="o">=</span> <span class="n">OD</span><span class="p">.</span><span class="n">orderid</span><span class="p">;</span></code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="apply">5.4. APPLY</h3>
<div class="paragraph">
<p>The nonstandard <code>APPLY</code> operator, like a correlated join, instead of treaing its two inputs as a set, applies the right table (typically a derived table or a TVF) to each row from the left table (evaluated first) and produces a result table with the unified result sets.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A <code>CROSS APPLY</code> operator is equavelent to a <code>CROSS JOIN</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">S</span><span class="p">.</span><span class="n">shipperid</span><span class="p">,</span> <span class="n">E</span><span class="p">.</span><span class="n">empid</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Shippers</span> <span class="k">AS</span> <span class="n">S</span>
  <span class="k">CROSS</span> <span class="k">JOIN</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span> <span class="k">AS</span> <span class="n">E</span><span class="p">;</span>
<span class="c1">-- =&gt;</span>
<span class="k">SELECT</span> <span class="n">S</span><span class="p">.</span><span class="n">shipperid</span><span class="p">,</span> <span class="n">E</span><span class="p">.</span><span class="n">empid</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Shippers</span> <span class="k">AS</span> <span class="n">S</span>
  <span class="k">CROSS</span> <span class="n">APPLY</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span> <span class="k">AS</span> <span class="n">E</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>With <code>APPLY</code>, the left side is evaluated first, and the right side is evaluated per row from the left iteratively, and can have references to elements from the left.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="k">C</span><span class="p">.</span><span class="n">custid</span><span class="p">,</span> <span class="n">A</span><span class="p">.</span><span class="n">orderid</span><span class="p">,</span> <span class="n">A</span><span class="p">.</span><span class="n">orderdate</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span> <span class="k">AS</span> <span class="k">C</span>
  <span class="k">CROSS</span> <span class="n">APPLY</span>
    <span class="p">(</span><span class="k">SELECT</span> <span class="n">TOP</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">requireddate</span>
     <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span> <span class="k">AS</span> <span class="n">O</span>
     <span class="k">WHERE</span> <span class="n">O</span><span class="p">.</span><span class="n">custid</span> <span class="o">=</span> <span class="k">C</span><span class="p">.</span><span class="n">custid</span>
     <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">orderdate</span> <span class="k">DESC</span><span class="p">,</span> <span class="n">orderid</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">A</span><span class="p">;</span> <span class="c1">-- A is a correlated derived table</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Because the derived table is applied to each left row, the CROSS APPLY operator returns the three most recent orders for each customer.</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">1	11011	2022-04-09
1	10952	2022-03-16
1	10835	2022-01-15
2	10926	2022-03-04
2	10759	2021-11-28
2	10625	2021-08-08
3	10856	2022-01-28
3	10682	2021-09-25
3	10677	2021-09-22
. . .</span></code></pre>
</div>
</div>
</li>
<li>
<p>If the right table expression returns an empty set, the <code>CROSS APPLY</code> operator does not return the corresponding left row.  To return rows from the left side even if there are no matches on the right side, use <code>OUTER APPLY</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="k">C</span><span class="p">.</span><span class="n">custid</span><span class="p">,</span> <span class="n">A</span><span class="p">.</span><span class="n">orderid</span><span class="p">,</span> <span class="n">A</span><span class="p">.</span><span class="n">orderdate</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span> <span class="k">AS</span> <span class="k">C</span>
  <span class="k">OUTER</span> <span class="n">APPLY</span>
    <span class="p">(</span><span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">requireddate</span>
     <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span> <span class="k">AS</span> <span class="n">O</span>
     <span class="k">WHERE</span> <span class="n">O</span><span class="p">.</span><span class="n">custid</span> <span class="o">=</span> <span class="k">C</span><span class="p">.</span><span class="n">custid</span> <span class="k">AND</span> <span class="n">O</span><span class="p">.</span><span class="n">custid</span> <span class="k">in</span> <span class="p">(</span><span class="mi">22</span><span class="p">,</span> <span class="mi">57</span><span class="p">)</span>
     <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">orderdate</span> <span class="k">DESC</span><span class="p">,</span> <span class="n">orderid</span> <span class="k">DESC</span>
     <span class="k">OFFSET</span> <span class="mi">0</span> <span class="k">ROWS</span> <span class="k">FETCH</span> <span class="k">FIRST</span> <span class="mi">3</span> <span class="k">ROWS</span> <span class="k">ONLY</span><span class="p">)</span> <span class="k">AS</span> <span class="n">A</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">1	NULL	NULL
2	NULL	NULL
3	NULL	NULL</span></code></pre>
</div>
</div>
</li>
<li>
<p>It&#8217;s more conventional to work with inline TVFs instead of derived tables.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">ALTER</span> <span class="k">FUNCTION</span> <span class="n">dbo</span><span class="p">.</span><span class="n">TopOrders</span>
  <span class="p">(</span><span class="o">@</span><span class="n">custid</span> <span class="k">AS</span> <span class="nb">INT</span><span class="p">,</span> <span class="o">@</span><span class="n">n</span> <span class="k">AS</span> <span class="nb">INT</span><span class="p">)</span>
  <span class="k">RETURNS</span> <span class="k">TABLE</span>
<span class="k">AS</span>
<span class="k">RETURN</span>
  <span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">requireddate</span>
  <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
  <span class="k">WHERE</span> <span class="n">custid</span> <span class="o">=</span> <span class="o">@</span><span class="n">custid</span>
  <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">orderdate</span> <span class="k">DESC</span><span class="p">,</span> <span class="n">requireddate</span> <span class="k">DESC</span>
  <span class="k">OFFSET</span> <span class="mi">0</span> <span class="k">ROWS</span> <span class="k">FETCH</span> <span class="k">NEXT</span> <span class="o">@</span><span class="n">N</span> <span class="k">ROWS</span> <span class="k">ONLY</span><span class="p">;</span>
<span class="k">GO</span>

<span class="k">SELECT</span>
  <span class="k">C</span><span class="p">.</span><span class="n">custid</span><span class="p">,</span> <span class="k">C</span><span class="p">.</span><span class="n">companyname</span><span class="p">,</span>
  <span class="n">A</span><span class="p">.</span><span class="n">orderid</span><span class="p">,</span> <span class="n">A</span><span class="p">.</span><span class="n">empid</span><span class="p">,</span> <span class="n">A</span><span class="p">.</span><span class="n">orderdate</span><span class="p">,</span> <span class="n">A</span><span class="p">.</span><span class="n">requireddate</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span> <span class="k">AS</span> <span class="k">C</span>
  <span class="k">CROSS</span> <span class="n">APPLY</span> <span class="n">dbo</span><span class="p">.</span><span class="n">TopOrders</span><span class="p">(</span><span class="k">C</span><span class="p">.</span><span class="n">custid</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="k">AS</span> <span class="n">A</span><span class="p">;</span>
<span class="k">GO</span>

<span class="c1">-- cleanup</span>
<span class="k">DROP</span> <span class="k">FUNCTION</span> <span class="n">if</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">TopOrders</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="subqueries">6. Subqueries</h2>
<div class="sectionbody">
<div class="paragraph">
<p>SQL supports writing queries within queries, or <em>nesting</em> queries.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The outermost query is a query whose result set is returned to the caller and is known as the <em>outer query</em>.</p>
</li>
<li>
<p>The inner query is a query whose result set is used by the outer query and is known as a <em>subquery</em>.</p>
</li>
<li>
<p>A subquery can be either <em>self-contained</em> or <em>correlated</em>.</p>
<div class="ulist">
<ul>
<li>
<p>A self-contained subquery has no dependency on tables from the outer query, whereas a correlated subquery does.</p>
</li>
<li>
<p>A subquery can be single-valued, multivalued, or table-valued, that is, a subquery can return a single value, multiple values, or a whole table result.</p>
</li>
</ul>
</div>
</li>
<li>
<p>A scalar subquery is a subquery that returns a single value and can appear anywhere in the outer query where a single-valued expression can appear (such as <code>WHERE</code> or <code>SELECT</code>).</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DECLARE</span> <span class="o">@</span><span class="n">maxid</span> <span class="k">AS</span> <span class="nb">INT</span> <span class="o">=</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">MAX</span><span class="p">(</span><span class="n">orderid</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span><span class="p">);</span>
<span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">orderid</span> <span class="o">=</span> <span class="o">@</span><span class="n">maxid</span><span class="p">;</span>
<span class="c1">-- substitute the above variable with a scalar self-contained subquery</span>
<span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">orderid</span> <span class="o">=</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">MAX</span><span class="p">(</span><span class="n">O</span><span class="p">.</span><span class="n">orderid</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span> <span class="k">AS</span> <span class="n">O</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
<li>
<p>For a scalar subquery to be valid, it must return no more than one value.</p>
<div class="ulist">
<ul>
<li>
<p>If a scalar subquery returns more than one value, it fails at run time.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderid</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">empid</span> <span class="o">=</span>
   <span class="p">(</span><span class="k">SELECT</span> <span class="n">E</span><span class="p">.</span><span class="n">empid</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span> <span class="k">AS</span> <span class="n">E</span>
<span class="k">WHERE</span> <span class="n">E</span><span class="p">.</span><span class="n">lastname</span> <span class="k">LIKE</span> <span class="n">N</span><span class="s1">'D%'</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Msg 512, Level 16, State 1, Line 1
</span><span class="gp">Subquery returned more than 1 value. This is not permitted when the subquery follows =, !=, &lt;, &lt;= , &gt;</span>, <span class="o">&gt;=</span> or when the subquery is used as an expression.</code></pre>
</div>
</div>
</li>
<li>
<p>If a scalar subquery returns no value, the empty result is converted to a <code>NULL</code>.</p>
</li>
</ul>
</div>
</li>
<li>
<p>A multivalued subquery is a subquery that returns multiple values as a single column, and such as the <code>IN</code> predicate, operate on a multivalued subquery.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderid</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">empid</span> <span class="k">IN</span>
  <span class="p">(</span><span class="k">SELECT</span> <span class="n">E</span><span class="p">.</span><span class="n">empid</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span> <span class="k">AS</span> <span class="n">E</span>
<span class="k">WHERE</span> <span class="n">E</span><span class="p">.</span><span class="n">lastname</span> <span class="k">LIKE</span> <span class="n">N</span><span class="s1">'D%'</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
In some cases the database engine optimizes both the subquery and the the join the same way, sometimes joins perform better, and sometimes subqueries perform better.
</td>
</tr>
</table>
</div>
<div class="ulist">
<ul>
<li>
<p>A <em>correlated subquery</em> is subquery that refer to attributes from the tables that appear in the outer query, that means the subquery is dependent on the outer query and cannot be invoked as a standalone query.</p>
<div class="ulist">
<ul>
<li>
<p>Logically, the subquery is evaluated separately for each outer row in the logical query processing step in which it appears.</p>
</li>
<li>
<p>To simplify things, it&#8217;s suggested to focus attention on a single row in the outer table and think about the logical processing that takes place in the inner query for that row.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">custid</span><span class="p">,</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">empid</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span> <span class="k">AS</span> <span class="n">O1</span>
<span class="k">WHERE</span> <span class="n">orderid</span> <span class="o">=</span>
  <span class="p">(</span><span class="k">SELECT</span> <span class="k">MAX</span><span class="p">(</span><span class="n">O2</span><span class="p">.</span><span class="n">orderid</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span> <span class="k">AS</span> <span class="n">O2</span>
<span class="k">WHERE</span> <span class="n">O2</span><span class="p">.</span><span class="n">custid</span> <span class="o">=</span> <span class="n">O1</span><span class="p">.</span><span class="n">custid</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
<li>
<p>T-SQL supports a predicate called <code>EXISTS</code>, which accepts a subquery as input and returns <code>TRUE</code> if the subquery returns any rows and <code>FALSE</code> otherwise.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">custid</span><span class="p">,</span> <span class="n">companyname</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span> <span class="k">AS</span> <span class="k">C</span>
<span class="k">WHERE</span> <span class="n">country</span> <span class="o">=</span> <span class="n">N</span><span class="s1">'Spain'</span>
  <span class="k">AND</span> <span class="k">EXISTS</span>
     <span class="p">(</span><span class="k">SELECT</span> <span class="o">*</span>
  <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span> <span class="k">AS</span> <span class="n">O</span>
  <span class="k">WHERE</span> <span class="n">O</span><span class="p">.</span><span class="n">custid</span> <span class="o">=</span> <span class="k">C</span><span class="p">.</span><span class="n">custid</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="table-expressions">7. Table Expressions</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A <em>table expression</em> is an expression—typically a query—that conceptually returns a table result and as such can be nested as an operand of another table expression.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Recall that a table in SQL is the counterpart to a relation in relational theory.</p>
</li>
<li>
<p>A table expression is therefore SQL’s counterpart to a relational expression.</p>
</li>
<li>
<p>A relational expression in relational theory is an expression that returns a relation and as such can be nested as an operand of another relational expression.</p>
</li>
<li>
<p>A <em>named table expression</em> is then a table expression assigned with a name, and interacted with like doing with a base table.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>T-SQL supports four types of named table expressions: <em>derived tables</em>, <em>common table expressions</em> (CTEs), <em>views</em>, and <em>inline table-valued functions</em> (inline TVFs).</p>
</div>
<div class="sect2">
<h3 id="derived-tables">7.1. Derived Tables</h3>
<div class="paragraph">
<p>Derived tables are defined in the <code>FROM</code> clause of an outer query, which treated as if it were a regular table for the outer query, and also sometimes referred to as an inline view.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="o">*</span>
<span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">custid</span><span class="p">,</span> <span class="n">companyname</span>
  <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span>
  <span class="k">WHERE</span> <span class="n">country</span> <span class="o">=</span> <span class="n">N</span><span class="s1">'USA'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">USACusts</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderyear</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">custid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">numcusts</span>
<span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">orderyear</span><span class="p">,</span> <span class="n">custid</span>
  <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span><span class="p">)</span> <span class="k">AS</span> <span class="n">D</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">orderyear</span><span class="p">;</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="ctes">7.2. CTEs</h3>
<div class="paragraph">
<p>Common table expressions (CTEs) are another standard form of table expression similar to derived tables, yet with a couple of important advantages.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">WITH</span> <span class="o">&lt;</span><span class="n">CTE_Name</span><span class="o">&gt;</span><span class="p">[(</span><span class="o">&lt;</span><span class="n">target_column_list</span><span class="o">&gt;</span><span class="p">)]</span>
<span class="k">AS</span>
<span class="p">(</span>
  <span class="o">&lt;</span><span class="n">inner_query_defining_CTE</span><span class="o">&gt;</span>
<span class="p">)</span>
<span class="o">&lt;</span><span class="n">outer_query_against_CTE</span><span class="o">&gt;</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>CTEs also support two forms of column aliasing: inline and external. For the inline form, specify <code>&lt;expression&gt; AS &lt;column_alias&gt;</code>; for the external form, specify the target column list in parentheses immediately after the CTE name.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">WITH</span> <span class="k">C</span> <span class="k">AS</span>
<span class="p">(</span>
  <span class="k">SELECT</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">orderyear</span><span class="p">,</span> <span class="n">custid</span>
  <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="p">)</span>
<span class="k">SELECT</span> <span class="n">orderyear</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">custid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">numcusts</span>
<span class="k">FROM</span> <span class="k">C</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">orderyear</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">WITH</span> <span class="k">C</span><span class="p">(</span><span class="n">orderyear</span><span class="p">,</span> <span class="n">custid</span><span class="p">)</span> <span class="k">AS</span>
<span class="p">(</span>
  <span class="k">SELECT</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">),</span> <span class="n">custid</span>
  <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="p">)</span>
<span class="k">SELECT</span> <span class="n">orderyear</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">custid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">numcusts</span>
<span class="k">FROM</span> <span class="k">C</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">orderyear</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>Each CTE can refer to all previously defined CTEs, and the outer query can refer to all CTEs.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">WITH</span> <span class="n">C1</span> <span class="k">AS</span>
<span class="p">(</span>
  <span class="k">SELECT</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">orderyear</span><span class="p">,</span>
    <span class="n">custid</span>
  <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="p">),</span>
<span class="n">C2</span> <span class="k">AS</span>
<span class="p">(</span>
  <span class="k">SELECT</span> <span class="n">orderyear</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">custid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">numcusts</span>
  <span class="k">FROM</span> <span class="n">C1</span>
  <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">orderyear</span>
<span class="p">)</span>
<span class="k">SELECT</span> <span class="n">orderyear</span><span class="p">,</span> <span class="n">numcusts</span>
<span class="k">FROM</span> <span class="n">C2</span>
<span class="k">WHERE</span> <span class="n">numcusts</span> <span class="o">&gt;</span> <span class="mi">70</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>Multiple references in CTEs in table operators like joins</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">WITH</span> <span class="n">YearlyCount</span> <span class="k">AS</span>
<span class="p">(</span>
  <span class="k">SELECT</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">orderyear</span><span class="p">,</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">custid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">numcusts</span>
  <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
  <span class="k">GROUP</span> <span class="k">BY</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span>
<span class="p">)</span>
<span class="k">SELECT</span> <span class="n">Cur</span><span class="p">.</span><span class="n">orderyear</span><span class="p">,</span>
  <span class="n">Cur</span><span class="p">.</span><span class="n">numcusts</span> <span class="k">AS</span> <span class="n">curnumcusts</span><span class="p">,</span> <span class="n">Prv</span><span class="p">.</span><span class="n">numcusts</span> <span class="k">AS</span> <span class="n">prvnumcusts</span><span class="p">,</span>
  <span class="n">Cur</span><span class="p">.</span><span class="n">numcusts</span> <span class="o">-</span> <span class="n">Prv</span><span class="p">.</span><span class="n">numcusts</span> <span class="k">AS</span> <span class="n">growth</span>
<span class="k">FROM</span> <span class="n">YearlyCount</span> <span class="k">AS</span> <span class="n">Cur</span>
  <span class="k">LEFT</span> <span class="k">OUTER</span> <span class="k">JOIN</span> <span class="n">YearlyCount</span> <span class="k">AS</span> <span class="n">Prv</span>
  <span class="k">ON</span> <span class="n">Cur</span><span class="p">.</span><span class="n">orderyear</span> <span class="o">=</span> <span class="n">Prv</span><span class="p">.</span><span class="n">orderyear</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>CTEs are unique among table expressions in the sense that they support recursion.</p>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Recursive CTEs, like nonrecursive ones, are defined by the SQL standard.
</td>
</tr>
</table>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">WITH</span> <span class="o">&lt;</span><span class="n">CTE_Name</span><span class="o">&gt;</span><span class="p">[(</span><span class="o">&lt;</span><span class="n">target_column_list</span><span class="o">&gt;</span><span class="p">)]</span>
<span class="k">AS</span>
<span class="p">(</span>
  <span class="o">&lt;</span><span class="n">anchor_member</span><span class="o">&gt;</span>
  <span class="k">UNION</span> <span class="k">ALL</span>
  <span class="o">&lt;</span><span class="n">recursive_member</span><span class="o">&gt;</span>
<span class="p">)</span>
<span class="o">&lt;</span><span class="n">outer_query_against_CTE</span><span class="o">&gt;</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>A recursive CTE is defined by at least two queries (more are possible)—at least one query known as the <em>anchor member</em> and at least one query known as the <em>recursive member</em>.</p>
</li>
<li>
<p>The <em>anchor member</em> is a query that returns a valid relational result table —like a query that is used to define a nonrecursive table expression. The anchor member query is invoked only once.</p>
</li>
<li>
<p>The <em>recursive member</em> is a query that has a reference to the CTE name and is invoked repeatedly until it returns an empty set. The reference to the CTE name represents the previous result set.</p>
</li>
<li>
<p>The first time that the recursive member is invoked, the previous result set represents whatever the anchor member returned.</p>
</li>
<li>
<p>In each subsequent invocation of the recursive member, the reference to the CTE name represents the result set returned by the previous invocation of the recursive member.</p>
</li>
<li>
<p>Both queries must be compatible in terms of the number of columns they return and the data types of the corresponding columns.</p>
</li>
<li>
<p>The reference to the CTE name in the outer query represents the unified result sets of the invocation of the anchor member and all invocations of the recursive member.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">WITH</span> <span class="n">EmpsCTE</span> <span class="k">AS</span>
<span class="p">(</span>
  <span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">mgrid</span><span class="p">,</span> <span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span>
  <span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span>
  <span class="k">WHERE</span> <span class="n">empid</span> <span class="o">=</span> <span class="mi">2</span>

  <span class="k">UNION</span> <span class="k">ALL</span>

  <span class="k">SELECT</span> <span class="k">C</span><span class="p">.</span><span class="n">empid</span><span class="p">,</span> <span class="k">C</span><span class="p">.</span><span class="n">mgrid</span><span class="p">,</span> <span class="k">C</span><span class="p">.</span><span class="n">firstname</span><span class="p">,</span> <span class="k">C</span><span class="p">.</span><span class="n">lastname</span>
  <span class="k">FROM</span> <span class="n">EmpsCTE</span> <span class="k">AS</span> <span class="n">P</span>
    <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span> <span class="k">AS</span> <span class="k">C</span>
      <span class="k">ON</span> <span class="k">C</span><span class="p">.</span><span class="n">mgrid</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">empid</span>
<span class="p">)</span>
<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">mgrid</span><span class="p">,</span> <span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span>
<span class="k">FROM</span> <span class="n">EmpsCTE</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">2	1	Don	Funk
3	2	Judy	Lew
5	2	Sven	Mortensen
6	5	Paul	Suurs
7	5	Russell	King
9	5	Patricia	Doyle
4	3	Yael	Peled
8	3	Maria	Cameron</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="views-and-tvfs">7.3. Views and TVFs</h3>
<div class="paragraph">
<p>Derived tables and CTEs have a single-statement scope, which means they are not reusable. <em>Views</em> and <em>inline table-valued functions</em> (inline TVFs) are two types of table expressions whose definitions are stored as permanent objects in the database, making them reusable.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">ALTER</span> <span class="k">VIEW</span> <span class="n">Sales</span><span class="p">.</span><span class="n">USACusts</span>
<span class="k">AS</span>
  <span class="k">SELECT</span>
    <span class="n">custid</span><span class="p">,</span> <span class="n">companyname</span><span class="p">,</span> <span class="n">contactname</span><span class="p">,</span> <span class="n">contacttitle</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span>
    <span class="n">city</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">postalcode</span><span class="p">,</span> <span class="n">country</span><span class="p">,</span> <span class="n">phone</span><span class="p">,</span> <span class="n">fax</span>
  <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span>
  <span class="k">WHERE</span> <span class="n">country</span> <span class="o">=</span> <span class="n">N</span><span class="s1">'USA'</span><span class="p">;</span>
<span class="k">GO</span> <span class="c1">-- The GO command is used here to terminate what’s called a batch in T-SQL.</span>

<span class="k">SELECT</span> <span class="n">custid</span><span class="p">,</span> <span class="n">companyname</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">USACusts</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Remember that a presentation <code>ORDER BY</code> clause is not allowed in the query defining a table expression because a relation isn’t ordered.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">ALTER</span> <span class="k">VIEW</span> <span class="n">Sales</span><span class="p">.</span><span class="n">USACusts</span>
<span class="k">AS</span>
  <span class="k">SELECT</span>
    <span class="n">custid</span><span class="p">,</span> <span class="n">companyname</span><span class="p">,</span> <span class="n">contactname</span><span class="p">,</span> <span class="n">contacttitle</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span>
    <span class="n">city</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">postalcode</span><span class="p">,</span> <span class="n">country</span><span class="p">,</span> <span class="n">phone</span><span class="p">,</span> <span class="n">fax</span>
  <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span>
  <span class="k">WHERE</span> <span class="n">country</span> <span class="o">=</span> <span class="n">N</span><span class="s1">'USA'</span>
  <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">region</span><span class="p">;</span>
<span class="k">GO</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Msg 1033, Level 15, State 1, Procedure USACusts, Line 8
The ORDER BY clause is invalid in views, inline functions, derived tables, subqueries, and common table expressions, unless TOP, OFFSET or FOR XML is also specified.</span></code></pre>
</div>
</div>
</li>
<li>
<p>Inline TVFs are reusable table expressions that support input parameters.</p>
<div class="ulist">
<ul>
<li>
<p>In most respects, except for the support for input parameters, inline TVFs are similar to views, or parameterized views.</p>
</li>
<li>
<p>T-SQL supports another type of table function called multi-statement TVF, which populates and returns a table variable.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">ALTER</span> <span class="k">FUNCTION</span> <span class="n">dbo</span><span class="p">.</span><span class="n">GetCustOrders</span>
   <span class="p">(</span><span class="o">@</span><span class="n">cid</span> <span class="k">AS</span> <span class="nb">INT</span><span class="p">)</span> <span class="k">RETURNS</span> <span class="k">TABLE</span>
 <span class="k">AS</span>
 <span class="k">RETURN</span>
   <span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">requireddate</span><span class="p">,</span>
     <span class="n">shippeddate</span><span class="p">,</span> <span class="n">shipperid</span><span class="p">,</span> <span class="n">freight</span><span class="p">,</span> <span class="n">shipname</span><span class="p">,</span> <span class="n">shipaddress</span><span class="p">,</span> <span class="n">shipcity</span><span class="p">,</span>
     <span class="n">shipregion</span><span class="p">,</span> <span class="n">shippostalcode</span><span class="p">,</span> <span class="n">shipcountry</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">custid</span> <span class="o">=</span> <span class="o">@</span><span class="n">cid</span><span class="p">;</span>
<span class="k">GO</span>

<span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">GetCustOrders</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="n">O</span><span class="p">;</span>
<span class="k">GO</span>

<span class="k">SELECT</span> <span class="n">O</span><span class="p">.</span><span class="n">orderid</span><span class="p">,</span> <span class="n">O</span><span class="p">.</span><span class="n">custid</span><span class="p">,</span> <span class="n">OD</span><span class="p">.</span><span class="n">productid</span><span class="p">,</span> <span class="n">OD</span><span class="p">.</span><span class="n">qty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">GetCustOrders</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="n">O</span>
  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">Sales</span><span class="p">.</span><span class="n">OrderDetails</span> <span class="k">AS</span> <span class="n">OD</span>
  <span class="k">ON</span> <span class="n">O</span><span class="p">.</span><span class="n">orderid</span> <span class="o">=</span> <span class="n">OD</span><span class="p">.</span><span class="n">orderid</span><span class="p">;</span>
<span class="k">GO</span>

<span class="k">DROP</span> <span class="k">FUNCTION</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">GetCustOrders</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="union-union-all-intersect-and-except">8. UNION, UNION ALL, INTERSECT, and EXCEPT</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Set operators combine rows from two query result sets (or multisets), with some operators removing duplicates to return a set, while others preserve duplicates to return a multiset.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>T-SQL supports the following operators: <code>UNION</code>, <code>UNION ALL</code>, <code>INTERSECT</code>, and <code>EXCEPT</code>.</p>
</li>
<li>
<p>A set operator compares complete rows between the results of the two input queries involved.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">Input</span> <span class="n">Query1</span>
<span class="o">&lt;</span><span class="n">set_operator</span><span class="o">&gt;</span>
<span class="k">Input</span> <span class="n">Query2</span>
<span class="p">[</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="p">...];</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Because a set operator expects multisets as inputs, the two queries involved cannot have <code>ORDER BY</code> clauses.</p>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Remember that a query with an ORDER BY clause does not return a multiset—it returns an ordered result.
</td>
</tr>
</table>
</div>
</li>
<li>
<p>In terms of logical-query processing, each of the individual queries can have all logical-query processing phases except for a presentation <code>ORDER BY</code>.</p>
</li>
<li>
<p>The operator is applied to the results of the two queries, and the outer <code>ORDER BY</code> clause (if one exists) is applied to the result of the operator.</p>
</li>
<li>
<p>The two input queries must produce results with the same number of columns, and corresponding columns must have compatible data types.</p>
</li>
<li>
<p>The names of the columns in the result are determined by the first query. Still, it’s considered a best practice to make sure that all columns have names in both queries, and that the names of the corresponding columns are the same.</p>
</li>
<li>
<p>When a set operator compares rows between the two inputs, it doesn’t use an equality-based comparison; rather, it uses a distinctness-based comparison.</p>
<div class="paragraph">
<p>The semantics of distinctness-based comparisons are the same as the ones used by a standard predicate called the <em>distinct predicate</em>  that treats NULLs just like non-NULL values for comparison purposes to ensure that two rows with NULL values in the same columns are treated as duplicates, which is often the desired behavior.</p>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>The SQL standard supports two "flavors" of each operator—<code>DISTINCT</code> (the default) and <code>ALL</code>.</p>
<div class="ulist">
<ul>
<li>
<p>The <code>DISTINCT</code> flavor eliminates duplicates and returns a set.</p>
</li>
<li>
<p><code>ALL</code> doesn’t attempt to remove duplicates and therefore returns a multiset.</p>
</li>
<li>
<p>All three operators in T-SQL support an implicit distinct version, but only the <code>UNION</code> operator supports the <code>ALL</code> version.</p>
</li>
<li>
<p>In terms of syntax, T-SQL implicitly applies the <code>DISTINCT</code> clause unless the <code>ALL</code> keyword is explicitly used.</p>
</li>
</ul>
</div>
</li>
<li>
<p>SQL defines precedence among set operators: <code>INTERSECT</code> operator precedes <code>UNION</code> and <code>EXCEPT</code>, and <code>UNION</code> and <code>EXCEPT</code> are evaluated in order of appearance.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- the result is a multiset and not a set</span>
<span class="k">SELECT</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span> <span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span>
<span class="k">UNION</span> <span class="k">ALL</span>
<span class="k">SELECT</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span> <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- returns distinct locations</span>
<span class="k">SELECT</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span> <span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span>
<span class="k">UNION</span>
<span class="k">SELECT</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span> <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- returns only distinct rows that appear in both input query results</span>
<span class="k">SELECT</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span> <span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span>
<span class="k">INTERSECT</span>
<span class="k">SELECT</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span> <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- returns only distinct rows that appear in the first set but not the second</span>
<span class="k">SELECT</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span> <span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span>
<span class="k">EXCEPT</span>
<span class="k">SELECT</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span> <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span> <span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Suppliers</span>
<span class="k">EXCEPT</span>
<span class="k">SELECT</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span> <span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span>
<span class="k">INTERSECT</span> <span class="c1">-- evaluated first</span>
<span class="k">SELECT</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span> <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span><span class="p">;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="data-analysis">9. Data Analysis</h2>
<div class="sectionbody">
<div class="paragraph">
<p>T-SQL in SQL Server offers robust features for data analysis, including window Functions, pivoting, unpivoting, grouping sets, and time series data handling.</p>
</div>
<div class="sect2">
<h3 id="window-functions">9.1. Window Functions</h3>
<div class="paragraph">
<p>A <em>window function</em> is a function that, for each row, computes a scalar result value based on a calculation against a subset as a window of the rows from the underlying query set.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Window functions perform calculations on a per-row basis within a defined window of rows, preserving detail, whereas grouped queries lose detail by aggregation.</p>
</li>
<li>
<p>Window functions operate directly on the underlying query result set, while subqueries often start with a fresh view of the data, potentially requiring duplication of query logic.</p>
</li>
<li>
<p>Window functions can define the order of rows for calculations separately from the presentation order of the result set.</p>
</li>
<li>
<p>Window functions are allowed only in the <code>SELECT</code> and <code>ORDER BY</code> clauses of a query.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>A window function is defined by using the <code>OVER</code> clause with up to three parts: window-partition, window-order, and window-frame.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="o">&lt;</span><span class="k">function</span><span class="o">&gt;</span><span class="p">(</span> <span class="o">&lt;</span><span class="n">expression</span><span class="o">&gt;</span> <span class="p">)</span> <span class="p">[</span> <span class="k">IGNORE</span> <span class="n">NULLS</span> <span class="o">|</span> <span class="n">RESPECT</span> <span class="n">NULLS</span> <span class="p">]</span> <span class="n">OVER</span><span class="p">(...)</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>An empty <code>OVER()</code> clause represents the entire underlying query’s result set.</p>
</li>
<li>
<p>The <em>window-partition</em> clause (<code>PARTITION BY</code>) restricts the window to the subset of rows that have the same values in the partitioning columns as in the current row.</p>
</li>
<li>
<p>The <em>window-order</em> clause (<code>ORDER BY</code>) defines ordering, but don’t confuse this with presentation ordering.</p>
<div class="ulist">
<ul>
<li>
<p>In a window aggregate function, window ordering supports a frame specification.</p>
</li>
<li>
<p>In a window ranking function, window ordering gives meaning to the rank.</p>
</li>
</ul>
</div>
</li>
<li>
<p>The <em>window-frame</em> filters a frame, or a subset, of rows from the window partition between the two specified delimiters, which is defined using the <code>ROWS</code> or <code>RANGE</code> clause.</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>ROWS</code>: Defines the frame based on the number of rows before and after the current row.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="o">&lt;</span><span class="n">top</span> <span class="k">delimiter</span><span class="o">&gt;</span> <span class="k">AND</span> <span class="o">&lt;</span><span class="n">bottom</span> <span class="k">delimiter</span><span class="o">&gt;</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>UNBOUNDED PRECEDING</code>: Includes all rows from the beginning of the partition up to the current row.</p>
</li>
<li>
<p><code>n PRECEDING</code>: Includes the current row and the <code>n</code> preceding rows.</p>
</li>
<li>
<p><code>CURRENT ROW</code>: Includes only the current row.</p>
</li>
<li>
<p><code>n FOLLOWING</code>: Includes the current row and the <code>n</code> following rows.</p>
</li>
<li>
<p><code>UNBOUNDED FOLLOWING</code>: Includes all rows from the current row to the end of the partition.</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>RANGE</code>: Defines the frame based on the values of the <code>ORDER BY</code> column.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">RANGE</span> <span class="k">BETWEEN</span> <span class="o">&lt;</span><span class="n">top</span> <span class="k">delimiter</span><span class="o">&gt;</span> <span class="k">AND</span> <span class="o">&lt;</span><span class="n">bottom</span> <span class="k">delimiter</span><span class="o">&gt;</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>UNBOUNDED PRECEDING</code>: Includes all rows from the beginning of the partition up to the current row.</p>
</li>
<li>
<p><code>n PRECEDING</code>: Includes rows where the <code>ORDER BY</code> column&#8217;s value is within <code>n</code> units of the current row&#8217;s value.</p>
</li>
<li>
<p><code>CURRENT ROW</code>: Includes only the current row.</p>
</li>
<li>
<p><code>n FOLLOWING</code>: Includes rows where the <code>ORDER BY</code> column&#8217;s value is within <code>n</code> units of the current row&#8217;s value.</p>
</li>
<li>
<p><code>UNBOUNDED FOLLOWING</code>: Includes all rows from the current row to the end of the partition.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- compute the running-total for each employee and month</span>
<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">ordermonth</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span>
  <span class="k">SUM</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="n">OVER</span><span class="p">(</span>
                <span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">empid</span> <span class="c1">-- For an underlying row with employee ID `1`, the window exposed to the function filters only the rows where the employee ID is `1`.</span>
                <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">ordermonth</span>
                <span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="n">UNBOUNDED</span> <span class="k">PRECEDING</span> <span class="k">AND</span> <span class="k">CURRENT</span> <span class="k">ROW</span>
               <span class="p">)</span> <span class="k">AS</span> <span class="n">runval</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">EmpOrders</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">1	2020-07-01	1614.88	1614.88
1	2020-08-01	5555.90	7170.78
1	2020-09-01	6651.00	13821.78
. . .</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="ranking">9.1.1. Ranking</h4>
<div class="paragraph">
<p>T-SQL supports four ranking functions: <code>ROW_NUMBER</code>, <code>RANK</code>, <code>DENSE_RANK</code>, and <code>NTILE</code> to rank each row with respect to others in the window.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span>
  <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span><span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">val</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rownum</span><span class="p">,</span>
  <span class="n">RANK</span><span class="p">()</span>       <span class="n">OVER</span><span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">val</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rank</span><span class="p">,</span>
  <span class="n">DENSE_RANK</span><span class="p">()</span> <span class="n">OVER</span><span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">val</span><span class="p">)</span> <span class="k">AS</span> <span class="n">dense_rank</span><span class="p">,</span>
  <span class="n">NTILE</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>    <span class="n">OVER</span><span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">val</span><span class="p">)</span> <span class="k">AS</span> <span class="n">ntile</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">OrderValues</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">val</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">orderid	custid	val	rownum	rank	dense_rank	ntile</span>
<span class="go">10782	12	12.50	1	1	1	1</span>
<span class="go">10807	27	18.40	2	2	2	1</span>
<span class="go">10586	66	23.80	3	3	3	1</span>
<span class="go">10767	76	28.00	4	4	4	1</span>
<span class="go">10898	54	30.00	5	5	5	1</span>
<span class="go">10900	88	33.75	6	6	6	1</span>
<span class="hll"><span class="go">10883	48	36.00	7	7	7	1</span>
</span><span class="hll"><span class="go">11051	41	36.00	8	7	7	1</span>
</span><span class="go">10815	71	40.00	9	9	8	1</span>
<span class="go">10674	38	45.00	10	10	9	1</span>
<span class="hll"><span class="go">11057	53	45.00	11	10	9	1</span>
</span><span class="hll"><span class="go">10271	75	48.00	12	12	10	1</span>
</span><span class="go">. . .</span>
<span class="go">10496	81	190.00	83	83	78	1</span>
<span class="hll"><span class="go">10793	4	191.10	84	84	79	2</span>
</span><span class="go">10428	66	192.00	85	85	80	2</span>
<span class="go">. . .</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>ROW_NUMBER</code> function assigns incremental sequential integers to the rows in the query result based on the mandatory window ordering.</p>
</li>
<li>
<p>The <code>RANK</code> or <code>DENSE_RANK</code> function will produce same value when there are ties in the ordering values, and the difference between the two is that <code>RANK</code> reflects the count of rows that have a lower ordering value than the current row (plus 1), whereas <code>DENSE_RANK</code> reflects the count of distinct ordering values that are lower than the current row (plus 1).</p>
</li>
<li>
<p>The <code>NTILE</code> function assigns a tile number to each row associated the rows in the result with tiles (equally sized groups of rows).</p>
<div class="paragraph">
<p>If the number of rows can’t be evenly divided by the number of tiles, an extra row is added to each of the first tiles from the remainder. For example, if 102 rows and five tiles were requested, the first two tiles would have 21 rows instead of 20.</p>
</div>
</li>
<li>
<p>Window functions are logically evaluated as part of the <code>SELECT</code> list, before the <code>DISTINCT</code> clause is evaluated.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- DISTINCT clause has no effect here, no duplicate rows to remove</span>
<span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">val</span><span class="p">,</span> <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span><span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">val</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rownum</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">OrderValues</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- an alternative solution: GROUP BY phase is processed before the SELECT phase</span>
<span class="k">SELECT</span> <span class="n">val</span><span class="p">,</span> <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span><span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">val</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rownum</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">OrderValues</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">val</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="offset">9.1.2. Offset</h4>
<div class="paragraph">
<p>T-SQL supports two pairs of offset functions: <code>LAG</code> and <code>LEAD</code>, and <code>FIRST_VALUE</code> and <code>LAST_VALUE</code>, to return an element from a row that is at a certain offset from the current row or at the beginning or end of a window frame.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>LAG</code> and <code>LEAD</code> functions look before and ahead respectively to obtain an element from a row that is at a certain offset from the current row within the partition, based on the indicated ordering.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- the LAG and LEAD functions support window partitions and window-order clauses.</span>
<span class="n">LAG</span><span class="p">(</span><span class="k">column_name</span><span class="p">,</span> <span class="k">offset</span><span class="p">,</span> <span class="n">default_value</span><span class="p">)</span>  <span class="n">OVER</span><span class="p">(...)</span>
<span class="n">LEAD</span><span class="p">(</span><span class="k">column_name</span><span class="p">,</span> <span class="k">offset</span><span class="p">,</span> <span class="n">default_value</span><span class="p">)</span> <span class="n">OVER</span><span class="p">(...)</span></code></pre>
</div>
</div>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>column_name</code>: the functions (which is mandatory) is the element to return.</p>
</li>
<li>
<p><code>offset</code>: (Optional) An integer specifying the number (<code>1</code> if not specified) of rows to offset from the current row.</p>
</li>
<li>
<p><code>default_value</code>: (Optional) A value to be returned if there is no row at the requested offset (which is <code>NULL</code> if not specified otherwise).</p>
</li>
</ul>
</div>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">custid</span><span class="p">,</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span>
  <span class="n">LAG</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>  <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">custid</span> <span class="c1">-- same as: LAG(val, 1, NULL)</span>
                 <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">orderid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">prevval</span><span class="p">,</span>
  <span class="n">LEAD</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">custid</span> <span class="c1">-- same as: LEAD(val, 1, NULL)</span>
                 <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">orderid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">nextval</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">OrderValues</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">custid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">orderid</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">custid	orderid	val	prevval	nextval
. . .
1	10952	471.20	845.80	933.50
1	11011	933.50	471.20	NULL
2	10308	88.80	NULL	479.75
2	10625	479.75	88.80	320.00
. . .</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <code>FIRST_VALUE</code> and <code>LAST_VALUE</code> functions return an element from the first and last rows in the window frame, respectively.</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>To obtain the element from the first row in the window partition, use <code>FIRST_VALUE</code> with the window-frame extent <code>ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</code>.</p>
</li>
<li>
<p>To obtain the element from the last row in the window partition, use <code>LAST_VALUE</code> with the window-frame extent <code>ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">custid</span><span class="p">,</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span>
  <span class="n">FIRST_VALUE</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">custid</span>
                        <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">orderid</span>
                        <span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="n">UNBOUNDED</span> <span class="k">PRECEDING</span>
                                 <span class="k">AND</span> <span class="k">CURRENT</span> <span class="k">ROW</span><span class="p">)</span> <span class="k">AS</span> <span class="n">firstval</span><span class="p">,</span>
  <span class="n">LAST_VALUE</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">custid</span>
                        <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">orderid</span>
                        <span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="k">CURRENT</span> <span class="k">ROW</span>
                                 <span class="k">AND</span> <span class="n">UNBOUNDED</span> <span class="k">FOLLOWING</span><span class="p">)</span> <span class="k">AS</span> <span class="n">lastval</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">OrderValues</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">custid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">orderid</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">custid	orderid	val	firstval	lastval
1	10643	814.50	814.50	933.50
. . .
1	11011	933.50	814.50	933.50
2	10308	88.80	88.80	514.40
. . .</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="aggregate">9.1.3. Aggregate</h4>
<div class="paragraph">
<p>The aggregate window functions aggregate the rows in the defined window, and support window-partition, window-order, and window-frame clauses.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span>
  <span class="mi">100</span><span class="p">.</span> <span class="o">*</span> <span class="n">val</span> <span class="o">/</span> <span class="k">SUM</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="n">OVER</span><span class="p">()</span> <span class="k">AS</span> <span class="n">pctall</span><span class="p">,</span> <span class="c1">-- percentage out of the grand total</span>
  <span class="mi">100</span><span class="p">.</span> <span class="o">*</span> <span class="n">val</span> <span class="o">/</span> <span class="k">SUM</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">custid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">pctcust</span> <span class="c1">-- percentage out of the customer total</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">OrderValues</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">ordermonth</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span>
  <span class="k">SUM</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">empid</span>
                <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">ordermonth</span>
                <span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="n">UNBOUNDED</span> <span class="k">PRECEDING</span>
                         <span class="k">AND</span> <span class="k">CURRENT</span> <span class="k">ROW</span><span class="p">)</span> <span class="k">AS</span> <span class="n">runval</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">EmpOrders</span><span class="p">;</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="window">9.1.4. WINDOW</h4>
<div class="paragraph">
<p>The WINDOW clause defines and names reusable entire window specifications or part of them, improving code readability and maintainability by reducing redundancy in complex queries with multiple window functions. It is available in SQL Server 2022 and higher, as well as in Azure SQL Database, provided that the database compatibility level is set to 160 or higher.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">DATABASEPROPERTYEX</span><span class="p">(</span><span class="n">N</span><span class="s1">'TSQLV6'</span><span class="p">,</span> <span class="n">N</span><span class="s1">'CompatibilityLevel'</span><span class="p">);</span> <span class="c1">-- 160</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>When considering all major query clauses (<code>SELECT</code>, <code>FROM</code>, <code>WHERE</code>, <code>GROUP BY</code>, <code>HAVING</code>, <code>ORDER BY</code>), place the <code>WINDOW</code> clause between the <code>HAVING</code> and <code>ORDER BY</code> clauses of the query.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">ordermonth</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span>
  <span class="k">SUM</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="n">OVER</span> <span class="n">W</span> <span class="k">AS</span> <span class="n">runsum</span><span class="p">,</span>
  <span class="k">MIN</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="n">OVER</span> <span class="n">W</span> <span class="k">AS</span> <span class="n">runmin</span><span class="p">,</span>
  <span class="k">MAX</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="n">OVER</span> <span class="n">W</span> <span class="k">AS</span> <span class="n">runmax</span><span class="p">,</span>
  <span class="k">AVG</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="n">OVER</span> <span class="n">W</span> <span class="k">AS</span> <span class="n">runavg</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">EmpOrders</span>
<span class="k">WINDOW</span> <span class="n">W</span> <span class="k">AS</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">empid</span> <span class="c1">-- name an entire window specification</span>
             <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">ordermonth</span>
             <span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="n">UNBOUNDED</span> <span class="k">PRECEDING</span>
                      <span class="k">AND</span> <span class="k">CURRENT</span> <span class="k">ROW</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">custid</span><span class="p">,</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span>
  <span class="n">FIRST_VALUE</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="n">OVER</span><span class="p">(</span><span class="n">PO</span>
                        <span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="n">UNBOUNDED</span> <span class="k">PRECEDING</span>
                                 <span class="k">AND</span> <span class="k">CURRENT</span> <span class="k">ROW</span><span class="p">)</span> <span class="k">AS</span> <span class="n">firstval</span><span class="p">,</span>
  <span class="n">LAST_VALUE</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>  <span class="n">OVER</span><span class="p">(</span><span class="n">PO</span>
                        <span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="k">CURRENT</span> <span class="k">ROW</span>
                                 <span class="k">AND</span> <span class="n">UNBOUNDED</span> <span class="k">FOLLOWING</span><span class="p">)</span> <span class="k">AS</span> <span class="k">last</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">OrderValues</span>
<span class="k">WINDOW</span> <span class="n">PO</span> <span class="k">AS</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">custid</span> <span class="c1">-- name part of a window specification</span>
              <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">orderid</span><span class="p">)</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">custid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">orderid</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">qty</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span>
  <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span> <span class="n">PO</span> <span class="k">AS</span> <span class="n">ordernum</span><span class="p">,</span>
  <span class="k">MAX</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="n">OVER</span> <span class="n">P</span> <span class="k">AS</span> <span class="n">maxorderdate</span><span class="p">,</span>
  <span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="n">OVER</span> <span class="n">POF</span> <span class="k">AS</span> <span class="n">runsumqty</span><span class="p">,</span>
  <span class="k">SUM</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="n">OVER</span> <span class="n">POF</span> <span class="k">AS</span> <span class="n">runsumval</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">OrderValues</span>
<span class="k">WINDOW</span> <span class="n">P</span> <span class="k">AS</span> <span class="p">(</span> <span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">custid</span> <span class="p">),</span> <span class="c1">-- recursively reuse one window name within another</span>
       <span class="n">PO</span> <span class="k">AS</span> <span class="p">(</span> <span class="n">P</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">orderid</span> <span class="p">),</span>
       <span class="n">POF</span> <span class="k">AS</span> <span class="p">(</span> <span class="n">PO</span> <span class="k">ROWS</span> <span class="n">UNBOUNDED</span> <span class="k">PRECEDING</span> <span class="p">)</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">custid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">orderid</span><span class="p">;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="pivoting">9.2. Pivoting</h3>
<div class="paragraph">
<p>Pivoting data involves rotating data from a state of rows to a state of columns, possibly aggregating values along the way, in many cases which is generally handled by the presentation layer for purposes such as reporting.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- create and populate the sample table dbo.Orders</span>
<span class="n">USE</span> <span class="n">TSQLV6</span><span class="p">;</span>

<span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="p">(</span>
  <span class="n">orderid</span>   <span class="nb">INT</span>        <span class="k">NOT</span> <span class="k">NULL</span>
    <span class="k">CONSTRAINT</span> <span class="n">PK_Orders</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
  <span class="n">orderdate</span> <span class="nb">DATE</span>       <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">empid</span>     <span class="nb">INT</span>        <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">custid</span>    <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">qty</span>       <span class="nb">INT</span>        <span class="k">NOT</span> <span class="k">NULL</span>
<span class="p">);</span>

<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span><span class="p">(</span><span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">qty</span><span class="p">)</span>
<span class="k">VALUES</span>
  <span class="p">(</span><span class="mi">30001</span><span class="p">,</span> <span class="s1">'20200802'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">'A'</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">10001</span><span class="p">,</span> <span class="s1">'20201224'</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">'A'</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">10005</span><span class="p">,</span> <span class="s1">'20201224'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">'B'</span><span class="p">,</span> <span class="mi">20</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">40001</span><span class="p">,</span> <span class="s1">'20210109'</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">'A'</span><span class="p">,</span> <span class="mi">40</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">10006</span><span class="p">,</span> <span class="s1">'20210118'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">'C'</span><span class="p">,</span> <span class="mi">14</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">20001</span><span class="p">,</span> <span class="s1">'20210212'</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">'B'</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">40005</span><span class="p">,</span> <span class="s1">'20220212'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">'A'</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">20002</span><span class="p">,</span> <span class="s1">'20220216'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">'C'</span><span class="p">,</span> <span class="mi">20</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">30003</span><span class="p">,</span> <span class="s1">'20220418'</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">'B'</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">30004</span><span class="p">,</span> <span class="s1">'20200418'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">'C'</span><span class="p">,</span> <span class="mi">22</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">30007</span><span class="p">,</span> <span class="s1">'20220907'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">'D'</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- query and return the total order quantity for each employee and customer</span>
<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">AS</span> <span class="n">sumqty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">empid	custid	sumqty
2	A	52
3	A	20
1	B	20
2	B	27
1	C	34
3	C	22
3	D	30</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Pivoted view of total quantity per employee (on rows) and customer (on columns)</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">empid	A	B	C	D
1	NULL	20	34	NULL
2	52	27	NULL	NULL
3	20	NULL	22	30</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Every pivoting request involves three logical processing phases, each with associated elements:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>A <em>grouping phase</em> with an associated grouping or on rows element</p>
</li>
<li>
<p>A <em>spreading phase</em> with an associated spreading or on cols element</p>
</li>
<li>
<p>An <em>aggregation phase</em> with an associated aggregation element and aggregate function</p>
</li>
</ol>
</div>
<div class="sect3">
<h4 id="grouped-query">9.2.1. Grouped Query</h4>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span>
  <span class="k">SUM</span><span class="p">(</span> <i class="conum" data-value="3"></i><b>(3)</b>
      <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">custid</span> <span class="o">=</span> <span class="s1">'A'</span> <span class="k">THEN</span> <span class="n">qty</span> <span class="k">END</span> <i class="conum" data-value="2"></i><b>(2)</b>
     <span class="p">)</span> <span class="k">AS</span> <span class="n">A</span><span class="p">,</span>
  <span class="k">SUM</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">custid</span> <span class="o">=</span> <span class="s1">'B'</span> <span class="k">THEN</span> <span class="n">qty</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">B</span><span class="p">,</span>
  <span class="k">SUM</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">custid</span> <span class="o">=</span> <span class="s1">'C'</span> <span class="k">THEN</span> <span class="n">qty</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="k">C</span><span class="p">,</span>
  <span class="k">SUM</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">custid</span> <span class="o">=</span> <span class="s1">'D'</span> <span class="k">THEN</span> <span class="n">qty</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">D</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">empid</span><span class="p">;</span> <i class="conum" data-value="1"></i><b>(1)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The grouping phase is achieved with a <code>GROUP BY</code> clause—in this case, <code>GROUP BY empid</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The spreading phase is achieved in the <code>SELECT</code> clause with a <code>CASE</code> expression for each target column.
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- returns the quantity from the current row only when</span>
<span class="c1">-- the current row represents an order for customer A;</span>
<span class="c1">--  otherwise, the expression returns a NULL.</span>
<span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">custid</span> <span class="o">=</span> <span class="s1">'A'</span> <span class="k">THEN</span> <span class="n">qty</span> <span class="k">END</span></code></pre>
</div>
</div></td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Finally, the aggregation phase is achieved by applying the relevant aggregate function to the result of each <code>CASE</code> expression.
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- produces the result column for customer A</span>
<span class="k">SUM</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">custid</span> <span class="o">=</span> <span class="s1">'A'</span> <span class="k">THEN</span> <span class="n">qty</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">A</span></code></pre>
</div>
</div></td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="pivot-operator">9.2.2. PIVOT Operator</h4>
<div class="paragraph">
<p>T- SQL also supports a proprietary table operator called <code>PIVOT</code> on a source table or table expression provided to it as its left input, pivots the data, and returns a result table.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="p">...</span>
<span class="k">FROM</span> <span class="o">&lt;</span><span class="n">input_table</span><span class="o">&gt;</span>
  <span class="n">PIVOT</span><span class="p">(</span><span class="o">&lt;</span><span class="n">agg_function</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&lt;</span><span class="n">aggregation_element</span><span class="o">&gt;</span><span class="p">)</span>
          <span class="k">FOR</span> <span class="o">&lt;</span><span class="n">spreading_element</span><span class="o">&gt;</span> <span class="k">IN</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">list_of_target_columns</span><span class="o">&gt;</span><span class="p">))</span>
<span class="k">WHERE</span> <span class="p">...;</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>PIVOT</code> operator figures out the grouping elements implicitly by elimination, that are all attributes from the source table that were not specified as either the spreading element or the aggregation element.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- custid is the spreading element</span>
<span class="c1">-- qty is the aggregation element</span>
<span class="c1">-- the left empid is the implied grouping element</span>
<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="k">C</span><span class="p">,</span> <span class="n">D</span>
<span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">qty</span>
      <span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span><span class="p">)</span> <span class="k">AS</span> <span class="n">D</span>
  <span class="n">PIVOT</span><span class="p">(</span><span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">FOR</span> <span class="n">custid</span> <span class="k">IN</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="k">C</span><span class="p">,</span> <span class="n">D</span><span class="p">))</span> <span class="k">AS</span> <span class="n">P</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>As a best practice with the <code>PIVOT</code> operator, always work with a table expression and not query the underlying table directly.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- the dbo.Orders table contains the attributes orderid, orderdate, empid, custid, and qty.</span>
<span class="c1">-- the remaining attributes (orderid, orderdate, and empid) are all considered the grouping elements</span>
<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="k">C</span><span class="p">,</span> <span class="n">D</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
  <span class="n">PIVOT</span><span class="p">(</span><span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">FOR</span> <span class="n">custid</span> <span class="k">IN</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="k">C</span><span class="p">,</span> <span class="n">D</span><span class="p">))</span> <span class="k">AS</span> <span class="n">P</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>The items in the list of the target columns must be referred to as identifiers in the <code>IN</code> clause, and be delimited using square brackets when they are irregular (contain spaces, special characters, or are reserved keywords).</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">custid</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span>
<span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">qty</span>
      <span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span><span class="p">)</span> <span class="k">AS</span> <span class="n">D</span>
  <span class="n">PIVOT</span><span class="p">(</span><span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">FOR</span> <span class="n">empid</span> <span class="k">IN</span> <span class="p">([</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">]))</span> <span class="k">AS</span> <span class="n">P</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="unpivoting">9.3. Unpivoting</h3>
<div class="paragraph">
<p>Unpivoting is a technique that rotates data from a state of columns to a state of rows.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- create and populate the sample table dbo.EmpCustOrders</span>
<span class="n">USE</span> <span class="n">TSQLV6</span><span class="p">;</span>

<span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">EmpCustOrders</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">EmpCustOrders</span>
<span class="p">(</span>
  <span class="n">empid</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
    <span class="k">CONSTRAINT</span> <span class="n">PK_EmpCustOrders</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
  <span class="n">A</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">B</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="k">C</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">D</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="k">NULL</span>
<span class="p">);</span>

<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">EmpCustOrders</span><span class="p">(</span><span class="n">empid</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="k">C</span><span class="p">,</span> <span class="n">D</span><span class="p">)</span>
  <span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="k">C</span><span class="p">,</span> <span class="n">D</span>
  <span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">qty</span>
        <span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span><span class="p">)</span> <span class="k">AS</span> <span class="n">D</span>
    <span class="n">PIVOT</span><span class="p">(</span><span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">FOR</span> <span class="n">custid</span> <span class="k">IN</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="k">C</span><span class="p">,</span> <span class="n">D</span><span class="p">))</span> <span class="k">AS</span> <span class="n">P</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">EmpCustOrders</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">empid	A	B	C	D
1	NULL	20	34	NULL
2	52	27	NULL	NULL
3	20	NULL	22	30</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Unpivoted data returns a row for each employee and customer, along with the order quantity</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">empid	custid	qty
1	B	20
1	C	34
2	A	52
2	B	27
3	A	20
3	C	22
3	D	30</span></code></pre>
</div>
</div>
<div class="sect3">
<h4 id="apply-operator">9.3.1. APPLY Operator</h4>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- 1. Producing copies</span>
<span class="k">SELECT</span> <span class="o">*</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">EmpCustOrders</span>
  <span class="k">CROSS</span> <span class="k">JOIN</span> <span class="p">(</span><span class="k">VALUES</span><span class="p">(</span><span class="s1">'A'</span><span class="p">),(</span><span class="s1">'B'</span><span class="p">),(</span><span class="s1">'C'</span><span class="p">),(</span><span class="s1">'D'</span><span class="p">))</span> <span class="k">AS</span> <span class="k">C</span><span class="p">(</span><span class="n">custid</span><span class="p">);</span>

<span class="c1">--	empid	A	B	C	D	custid</span>
<span class="c1">--	1	NULL	20	34	NULL	A</span>
<span class="c1">--	1	NULL	20	34	NULL	B</span>
<span class="c1">--	1	NULL	20	34	NULL	C</span>
<span class="c1">--	. . .</span>

<span class="c1">-- 2. Extracting values</span>
<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">qty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">EmpCustOrders</span>
  <span class="c1">--  a join treats its two inputs as a set;</span>
  <span class="c1">-- use the CROSS APPLY operator instead of the CROSS JOIN operator</span>
  <span class="c1">-- to refer to the columns A, B, C, and D from the left side of the join (EmpCustOrders)</span>
  <span class="k">CROSS</span> <span class="n">APPLY</span> <span class="p">(</span><span class="k">VALUES</span><span class="p">(</span><span class="s1">'A'</span><span class="p">,</span> <span class="n">A</span><span class="p">),(</span><span class="s1">'B'</span><span class="p">,</span> <span class="n">B</span><span class="p">),(</span><span class="s1">'C'</span><span class="p">,</span> <span class="k">C</span><span class="p">),(</span><span class="s1">'D'</span><span class="p">,</span> <span class="n">D</span><span class="p">))</span> <span class="k">AS</span> <span class="k">C</span><span class="p">(</span><span class="n">custid</span><span class="p">,</span> <span class="n">qty</span><span class="p">)</span>

<span class="c1">--	empid	custid	qty</span>
<span class="c1">--	1	A	NULL</span>
<span class="c1">--	1	B	20</span>
<span class="c1">--	1	C	34</span>
<span class="c1">--	. . .</span>

<span class="c1">-- 3. Eliminating irrelevant rows</span>
<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">qty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">EmpCustOrders</span>
  <span class="k">CROSS</span> <span class="n">APPLY</span> <span class="p">(</span><span class="k">VALUES</span><span class="p">(</span><span class="s1">'A'</span><span class="p">,</span> <span class="n">A</span><span class="p">),(</span><span class="s1">'B'</span><span class="p">,</span> <span class="n">B</span><span class="p">),(</span><span class="s1">'C'</span><span class="p">,</span> <span class="k">C</span><span class="p">),(</span><span class="s1">'D'</span><span class="p">,</span> <span class="n">D</span><span class="p">))</span> <span class="k">AS</span> <span class="k">C</span><span class="p">(</span><span class="n">custid</span><span class="p">,</span> <span class="n">qty</span><span class="p">)</span>
<span class="k">WHERE</span> <span class="n">qty</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span> <span class="c1">-- discard rows with a NULL in the qty column</span>

<span class="c1">--	empid	custid	qty</span>
<span class="c1">--	1	B	20</span>
<span class="c1">--	1	C	34</span>
<span class="c1">--	2	A	52</span>
<span class="c1">--	. . .</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="unpivot-operator">9.3.2. UNPIVOT Operator</h4>
<div class="paragraph">
<p>T- SQL, like the <code>PIVOT</code> operator, also supports the <code>UNPIVOT</code> operator to unpivot data involved producing two result columns from any number of source columns—one to hold the source column names as strings and another to hold the source column values.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="p">...</span>
<span class="k">FROM</span> <span class="o">&lt;</span><span class="n">input_table</span><span class="o">&gt;</span>
  <span class="n">UNPIVOT</span><span class="p">(</span><span class="o">&lt;</span><span class="n">values_column</span><span class="o">&gt;</span> <span class="k">FOR</span> <span class="o">&lt;</span><span class="n">names_column</span><span class="o">&gt;</span> <span class="k">IN</span><span class="p">(</span><span class="o">&lt;</span><span class="n">source_columns</span><span class="o">&gt;</span><span class="p">)</span>
<span class="k">WHERE</span> <span class="p">...;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">qty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">EmpCustOrders</span>
  <span class="n">UNPIVOT</span><span class="p">(</span><span class="n">qty</span> <span class="k">FOR</span> <span class="n">custid</span> <span class="k">IN</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="k">C</span><span class="p">,</span> <span class="n">D</span><span class="p">))</span> <span class="k">AS</span> <span class="n">U</span><span class="p">;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="grouping-sets">9.4. Grouping Sets</h3>
<div class="paragraph">
<p>A grouping set is a set of expressions to group the data by in a grouped query (a query with a <code>GROUP BY</code> clause).</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Traditionally in SQL, a single grouped query defines a single grouping set.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- set(empid, custid)</span>
<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">AS</span> <span class="n">sumqty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">;</span>

<span class="c1">-- set(empid)</span>
<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">AS</span> <span class="n">sumqty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">empid</span><span class="p">;</span>

<span class="c1">-- set(custid)</span>
<span class="k">SELECT</span> <span class="n">custid</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">AS</span> <span class="n">sumqty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">custid</span><span class="p">;</span>

<span class="c1">-- set()</span>
<span class="k">SELECT</span> <span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">AS</span> <span class="n">sumqty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>Use <code>UNION ALL</code> with <code>NULL</code> placeholders to combine multiple queries into a single result set for reporting, but potentially lead to two main problems—the length of the code and performance due to multiple scans for separated query.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">AS</span> <span class="n">sumqty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span>

<span class="k">UNION</span> <span class="k">ALL</span>

<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="k">NULL</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">AS</span> <span class="n">sumqty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">empid</span>

<span class="k">UNION</span> <span class="k">ALL</span>

<span class="k">SELECT</span> <span class="k">NULL</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">AS</span> <span class="n">sumqty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">custid</span>

<span class="k">UNION</span> <span class="k">ALL</span>

<span class="k">SELECT</span> <span class="k">NULL</span><span class="p">,</span> <span class="k">NULL</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">AS</span> <span class="n">sumqty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>T-SQL supports the standard <code>GROUPING SETS</code>, <code>CUBE</code>, and <code>ROLLUP</code> subclauses of the <code>GROUP BY</code> clause, and the <code>GROUPING</code> and <code>GROUPING_ID</code> functions to define multiple grouping sets in the same query for reporting and data analysis.</p>
<div class="ulist">
<ul>
<li>
<p>The <code>GROUPING SETS</code> subclause is a powerful enhancement to the <code>GROUP BY</code> clause to define multiple grouping sets in the same query.</p>
<div class="ulist">
<ul>
<li>
<p>The grouping sets are listed, separated by commas within the parentheses of the <code>GROUPING SETS</code> subclause, and for each grouping set list the members, separated by commas, within parentheses.</p>
</li>
<li>
<p>SQL Server typically needs fewer scans of the data than the number of grouping sets because it can roll up aggregates internally.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">AS</span> <span class="n">sumqty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">GROUP</span> <span class="k">BY</span>
  <span class="k">GROUPING</span> <span class="k">SETS</span>
  <span class="p">(</span>
    <span class="p">(</span><span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">),</span>
    <span class="p">(</span><span class="n">empid</span><span class="p">),</span>
    <span class="p">(</span><span class="n">custid</span><span class="p">),</span>
    <span class="p">()</span>
<span class="p">);</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>The <code>CUBE</code> subclause of the <code>GROUP BY</code> clause provides an abbreviated way to define multiple grouping sets.</p>
<div class="ulist">
<ul>
<li>
<p>In the parentheses of the <code>CUBE</code> subclause, provide a set of members separated by commas, and get all possible grouping sets that can be defined based on the input members.</p>
</li>
<li>
<p>In set theory, the set of all subsets of elements that can be produced from a particular set is called the <em>power set</em>.</p>
<div class="paragraph">
<p>For example, <code>CUBE(a, b, c)</code> is equivalent to <code>GROUPING SETS( (a, b, c), (a, b), (a, c), (b, c), (a), (b), (c), () )</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">AS</span> <span class="n">sumqty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="k">CUBE</span><span class="p">(</span><span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>The <code>ROLLUP</code> subclause of the <code>GROUP BY</code> clause also provides an abbreviated way to define multiple grouping sets.</p>
<div class="ulist">
<ul>
<li>
<p>Unlike <code>CUBE</code>, which produces all possible grouping sets, <code>ROLLUP</code> assumes a hierarchy among input members and produces only grouping sets that form leading combinations of those members.</p>
<div class="paragraph">
<p>For example, whereas <code>CUBE(a, b, c)</code> produces all eight possible grouping sets, <code>ROLLUP(a, b, c)</code> produces only four based on the hierarchy <code>a&gt;b&gt;c</code> that is the equivalent of specifying <code>GROUPING SETS( (a, b, c), (a, b), (a), () )</code> rolling up the aggregations from the most granular level <code>(a, b, c)</code> to higher levels like <code>(a, b)</code> and finally to the total <code>()</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- ROLLUP(YEAR(orderdate), MONTH(orderdate), DAY(orderdate))</span>
<span class="c1">-- =&gt;</span>
<span class="c1">-- GROUPING SETS(</span>
<span class="c1">--   (YEAR(orderdate), MONTH(orderdate), DAY(orderdate)),</span>
<span class="c1">--   (YEAR(orderdate), MONTH(orderdate)),</span>
<span class="c1">--   (YEAR(orderdate)),</span>
<span class="c1">--   () )</span>
<span class="k">SELECT</span>
  <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">orderyear</span><span class="p">,</span>
  <span class="k">MONTH</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">ordermonth</span><span class="p">,</span>
  <span class="k">DAY</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">orderday</span><span class="p">,</span>
  <span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">AS</span> <span class="n">sumqty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="k">ROLLUP</span><span class="p">(</span><span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">),</span> <span class="k">MONTH</span><span class="p">(</span><span class="n">orderdate</span><span class="p">),</span> <span class="k">DAY</span><span class="p">(</span><span class="n">orderdate</span><span class="p">))</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>The <code>GROUPING</code> and <code>GROUPING_ID</code> functions are used to identify which columns in a <code>GROUP BY</code> clause are included in a group set or or are represented by a <code>NULL</code> placeholder in the aggregated result set.</p>
<div class="ulist">
<ul>
<li>
<p><code>GROUPING</code>: returns <code>1</code> when the element isn’t part of the grouping set and <code>0</code> otherwise.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span>
  <span class="k">GROUPING</span><span class="p">(</span><span class="n">empid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">grpemp</span><span class="p">,</span>
  <span class="k">GROUPING</span><span class="p">(</span><span class="n">custid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">grpcust</span><span class="p">,</span>
  <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">AS</span> <span class="n">sumqty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="k">CUBE</span><span class="p">(</span><span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">grpemp	grpcust	empid	custid	sumqty
0	0	2	A	52
0	0	3	A	20
1	0	NULL	A	72
. . .</span></code></pre>
</div>
</div>
</li>
<li>
<p><code>GROUPING_ID</code>: returns an integer bitmap in which each bit represents a different input element—the rightmost element represented by the rightmost bit.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span>
  <span class="n">GROUPING_ID</span><span class="p">(</span><span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">groupingset</span><span class="p">,</span>
  <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="k">AS</span> <span class="n">sumqty</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="k">CUBE</span><span class="p">(</span><span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">groupingset	empid	custid	sumqty
0          	2    	A     	52  -- 00
0          	3    	A     	20  -- 00
2          	NULL 	A     	72  -- 10
. . .</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="time-series">9.5. Time Series</h3>
<div class="paragraph">
<p>Time series data is data representing a series of events, or measurements, typically taken at regular time intervals. Time series data analysis usually involves organizing the data in <em>groups</em>, also known as <em>buckets</em>, and then aggregating some measures per bucket.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="insert-delete-truncate-update-and-merge">10. INSERT, DELETE, TRUNCATE, UPDATE, and MERGE</h2>
<div class="sectionbody">
<div class="paragraph">
<p>SQL has a set of statements known as Data Manipulation Language (DML) that includes the statements <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>TRUNCATE</code>, and <code>MERGE</code>.</p>
</div>
<div class="sect2">
<h3 id="insert">10.1. INSERT</h3>
<div class="paragraph">
<p>T-SQL provides several statements for inserting data into tables: <code>INSERT VALUES</code>, <code>INSERT SELECT</code>, <code>INSERT EXEC</code>, <code>SELECT INTO</code>, and <code>BULK INSERT</code>.</p>
</div>
<div class="sect3">
<h4 id="insert-values">10.1.1. INSERT VALUES</h4>
<div class="paragraph">
<p>The standard <code>INSERT VALUES</code> statement is used to insert rows into a table based on specified values.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span><span class="p">(</span><span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">)</span>
   <span class="k">VALUES</span><span class="p">(</span><span class="mi">10001</span><span class="p">,</span> <span class="s1">'20220212'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">'A'</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Specifying the target column names right after the table name is optional, but by doing so, it can control the value-column associations instead of relying on the order of the columns in the <code>CREATE TABLE</code> statement.</p>
</li>
<li>
<p>In T-SQL, specifying the <code>INTO</code> clause is optional.</p>
</li>
<li>
<p>If a value for a column is NOT specified, Microsoft SQL Server will use a default value if one was defined for the column.</p>
</li>
<li>
<p>If a default value isn’t defined and the column allows NULLs, a <code>NULL</code> will be used.</p>
</li>
<li>
<p>If no default is defined and the column does not allow NULLs and does not somehow get its value automatically, the <code>INSERT</code> statement will fail.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>T-SQL supports an enhanced standard <code>VALUES</code> clause that can be used to specify multiple rows separated by commas.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The enhanced standard <code>VALUES</code> statement is processed as a transaction, meaning that  if any row fails to enter the table, none of the rows in the statement enters the table.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
  <span class="p">(</span><span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">)</span>
<span class="k">VALUES</span>
  <span class="p">(</span><span class="mi">10003</span><span class="p">,</span> <span class="s1">'20220213'</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="s1">'B'</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">10004</span><span class="p">,</span> <span class="s1">'20220214'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">'A'</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">10005</span><span class="p">,</span> <span class="s1">'20220213'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">'C'</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">10006</span><span class="p">,</span> <span class="s1">'20220215'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">'C'</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
<li>
<p>The enhanced <code>VALUES</code> clause can be used as a table-value constructor to construct a derived table.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="o">*</span>
<span class="k">FROM</span> <span class="p">(</span> <span class="k">VALUES</span>
         <span class="p">(</span><span class="mi">10003</span><span class="p">,</span> <span class="s1">'20220213'</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="s1">'B'</span><span class="p">),</span>
         <span class="p">(</span><span class="mi">10004</span><span class="p">,</span> <span class="s1">'20220214'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">'A'</span><span class="p">),</span>
         <span class="p">(</span><span class="mi">10005</span><span class="p">,</span> <span class="s1">'20220213'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">'C'</span><span class="p">),</span>
         <span class="p">(</span><span class="mi">10006</span><span class="p">,</span> <span class="s1">'20220215'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">'C'</span><span class="p">)</span> <span class="p">)</span>
     <span class="k">AS</span> <span class="n">O</span><span class="p">(</span><span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">);</span> <span class="c1">-- alias(es) to the table, and the target columns</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="insert-select">10.1.2. INSERT SELECT</h4>
<div class="paragraph">
<p>The standard <code>INSERT SELECT</code> statement inserts a set of rows returned by a <code>SELECT</code> query into a target table.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>INSERT SELECT</code> statement is performed as a transaction, so if any row fails to enter the target table, none of the rows enters the table.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span><span class="p">(</span><span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">)</span>
  <span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span>
  <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
  <span class="k">WHERE</span> <span class="n">shipcountry</span> <span class="o">=</span> <span class="n">N</span><span class="s1">'UK'</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
If a system function such as <code>SYSDATETIME</code> is included in the inserted query, the function gets invoked only once for the entire query and not once per row. The exception to this rule is if globally unique identifiers (GUIDs) is generated using the <code>NEWID</code> function, which gets invoked per row.
</td>
</tr>
</table>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="insert-exec">10.1.3. INSERT EXEC</h4>
<div class="paragraph">
<p>The <code>INSERT EXEC</code> statement is used to insert a result set returned from a stored procedure or a dynamic SQL batch into a target table.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">ALTER</span> <span class="n">PROC</span> <span class="n">Sales</span><span class="p">.</span><span class="n">GetOrders</span>
  <span class="o">@</span><span class="n">country</span> <span class="k">AS</span> <span class="n">NVARCHAR</span><span class="p">(</span><span class="mi">40</span><span class="p">)</span>
<span class="k">AS</span>
<span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">shipcountry</span> <span class="o">=</span> <span class="o">@</span><span class="n">country</span><span class="p">;</span>
<span class="k">GO</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span> <span class="p">(</span><span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span><span class="p">)</span>
<span class="k">EXEC</span> <span class="n">Sales</span><span class="p">.</span><span class="n">GetOrders</span> <span class="o">@</span><span class="n">country</span> <span class="o">=</span> <span class="n">N</span><span class="s1">'France'</span><span class="p">;</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="select-into">10.1.4. SELECT INTO</h4>
<div class="paragraph">
<p>The <code>SELECT INTO</code> statement is a nonstandard (not part of the ISO and ANSI SQL) T-SQL statement that CREATEs a target table and populates it with the result set of a query.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">custid</span>
<span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- SELECT INTO statement with set operations</span>
<span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Locations</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span>
<span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Locations</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span>

<span class="k">EXCEPT</span>

<span class="k">SELECT</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The target table’s structure and data are based on the source table.</p>
</li>
<li>
<p>The <code>SELECT INTO</code> statement copies from the source the base structure (such as column names, types, nullability, and identity property) and the data, but does not copy from the source constraints, indexes, triggers, column properties, and permissions.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="bulk-insert">10.1.5. BULK INSERT</h4>
<div class="paragraph">
<p>The <code>BULK INSERT</code> statement to insert into an existing table data originating from a file.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="n">BULK</span> <span class="k">INSERT</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span> <span class="k">FROM</span> <span class="s1">'c:</span><span class="se">\t</span><span class="s1">emp</span><span class="se">\o</span><span class="s1">rders.txt'</span>
  <span class="k">WITH</span><span class="p">(</span>
    <span class="n">DATAFILETYPE</span>    <span class="o">=</span> <span class="s1">'char'</span><span class="p">,</span>
    <span class="n">FIELDTERMINATOR</span> <span class="o">=</span> <span class="s1">','</span><span class="p">,</span>
    <span class="n">ROWTERMINATOR</span>   <span class="o">=</span> <span class="s1">'</span><span class="se">\n</span><span class="s1">'</span>
  <span class="p">);</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="delete-and-truncate">10.2. DELETE and TRUNCATE</h3>
<div class="paragraph">
<p>T-SQL provides two statements for deleting rows from a table: <code>DELETE</code> and <code>TRUNCATE</code>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>DELETE</code> statement is a standard statement used to delete data from a table based on an optional filter predicate.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DELETE</span> <span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">orderdate</span> <span class="o">&lt;</span> <span class="s1">'20210101'</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>DELETE</code> statement tends to be expensive when deleting a large number of rows, mainly because it’s a fully logged operation.</p>
</li>
</ul>
</div>
</li>
<li>
<p>The standard <code>TRUNCATE</code> statement deletes all rows from a table without filter.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">TRUNCATE</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The advantage that <code>TRUNCATE</code> has over <code>DELETE</code> is that the former is minimally logged, whereas the latter is fully logged, resulting in significant performance differences.</p>
</li>
<li>
<p><code>TRUNCATE</code> resets the identity value back to the original seed, but <code>DELETE</code> doesn’t—even when used without a filter.</p>
</li>
<li>
<p>The <code>TRUNCATE</code> statement is not allowed when the target table is referenced by a foreign-key constraint, even if the referencing table is empty and even if the foreign key is disabled.</p>
</li>
<li>
<p>The <code>TRUNCATE</code> statement can be used to truncate individual partitions in a partitioned table.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">TRUNCATE</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span> <span class="k">WITH</span> <span class="p">(</span> <span class="n">PARTITIONS</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span> <span class="k">TO</span> <span class="mi">10</span><span class="p">)</span> <span class="p">);</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>T-SQL supports a nonstandard <code>DELETE</code> syntax based on joins to delete rows from one table based on a filter against attributes in related rows from another table.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DELETE</span> <span class="k">FROM</span> <span class="n">O</span>
 <span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span> <span class="k">AS</span> <span class="n">O</span>
  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Customers</span> <span class="k">AS</span> <span class="k">C</span>
  <span class="k">ON</span> <span class="n">O</span><span class="p">.</span><span class="n">custid</span> <span class="o">=</span> <span class="k">C</span><span class="p">.</span><span class="n">custid</span>
<span class="k">WHERE</span> <span class="k">C</span><span class="p">.</span><span class="n">country</span> <span class="o">=</span> <span class="n">N</span><span class="s1">'USA'</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="update">10.3. UPDATE</h3>
<div class="paragraph">
<p>T-SQL supports a standard <code>UPDATE</code> statement to update rows in a table, and also supports nonstandard forms of the <code>UPDATE</code> statement with joins and with variables.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>UPDATE</code> statement is a standard statement to update a subset of rows in a table.</p>
<div class="ulist">
<ul>
<li>
<p>To identify the subset of rows to update, specify a predicate in a <code>WHERE</code> clause.</p>
</li>
<li>
<p>Specify the assignment of values to columns in a <code>SET</code> clause, separated by commas.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">UPDATE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">OrderDetails</span>
  <span class="k">SET</span> <span class="n">discount</span> <span class="o">=</span> <span class="n">discount</span> <span class="o">+</span> <span class="mi">0</span><span class="p">.</span><span class="mi">05</span>
<span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">51</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>T-SQL supports compound assignment operators: <code>+=</code> (plus equal), <code>−=</code> (minus equal), <code>*=</code> (multiplication equal), <code>/=</code> (division equal), <code>%=</code> (modulo equal), and others.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">UPDATE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">OrderDetails</span>
  <span class="k">SET</span> <span class="n">discount</span> <span class="o">+=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">05</span>
<span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">51</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>All-at-once operations: all expressions that appear in the same logical phase are evaluated as a set, logically at the same point in time.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- the assignments take place all at once, meaning that both assignments use the same value of col1—the value before the update.</span>
<span class="k">UPDATE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span>
  <span class="k">SET</span> <span class="n">col1</span> <span class="o">=</span> <span class="n">col1</span> <span class="o">+</span> <span class="mi">10</span><span class="p">,</span> <span class="n">col2</span> <span class="o">=</span> <span class="n">col1</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- swap the values in the columns col1 and col2</span>
<span class="k">UPDATE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span>
  <span class="k">SET</span> <span class="n">col1</span> <span class="o">=</span> <span class="n">col2</span><span class="p">,</span> <span class="n">col2</span> <span class="o">=</span> <span class="n">col1</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>The <code>UPDATE</code> statement also supports a nonstandard form based on joins that serves a filtering purpose.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">UPDATE</span> <span class="n">OD</span>
  <span class="k">SET</span> <span class="n">discount</span> <span class="o">+=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">05</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">OrderDetails</span> <span class="k">AS</span> <span class="n">OD</span>
  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span> <span class="k">AS</span> <span class="n">O</span>
  <span class="k">ON</span> <span class="n">OD</span><span class="p">.</span><span class="n">orderid</span> <span class="o">=</span> <span class="n">O</span><span class="p">.</span><span class="n">orderid</span>
<span class="k">WHERE</span> <span class="n">O</span><span class="p">.</span><span class="n">custid</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- same task by using standard code (recommended)</span>
<span class="k">UPDATE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">OrderDetails</span>
  <span class="k">SET</span> <span class="n">discount</span> <span class="o">+=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">05</span>
<span class="k">WHERE</span> <span class="k">EXISTS</span>
  <span class="p">(</span><span class="k">SELECT</span> <span class="o">*</span>
  <span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Orders</span> <span class="k">AS</span> <span class="n">O</span>
  <span class="k">WHERE</span> <span class="n">O</span><span class="p">.</span><span class="n">orderid</span> <span class="o">=</span> <span class="n">OrderDetails</span><span class="p">.</span><span class="n">orderid</span>
    <span class="k">AND</span> <span class="n">O</span><span class="p">.</span><span class="n">custid</span> <span class="o">=</span> <span class="mi">1</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
<li>
<p>T-SQL supports a proprietary <code>UPDATE</code> syntax that both updates data in a table and assigns values to variables at the same time.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DECLARE</span> <span class="o">@</span><span class="n">nextval</span> <span class="k">AS</span> <span class="nb">INT</span><span class="p">;</span>

<span class="k">UPDATE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">MySequences</span>
  <span class="k">SET</span> <span class="o">@</span><span class="n">nextval</span> <span class="o">=</span> <span class="n">val</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="k">WHERE</span> <span class="n">id</span> <span class="o">=</span> <span class="s1">'SEQ1'</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="o">@</span><span class="n">nextval</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="merge">10.4. MERGE</h3>
<div class="paragraph">
<p>T-SQL supports a statement called <code>MERGE</code> to merge data from a source into a target, applying different actions (<code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code>) based on conditional logic.</p>
</div>
<div class="paragraph">
<p>A task achieved by a single <code>MERGE</code> statement typically translates to a combination of several other DML statements (<code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code>) without <code>MERGE</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="n">MERGE</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Customers</span> <span class="k">AS</span> <span class="n">TGT</span>
<span class="k">USING</span> <span class="n">dbo</span><span class="p">.</span><span class="n">CustomersStage</span> <span class="k">AS</span> <span class="n">SRC</span>
  <span class="k">ON</span> <span class="n">TGT</span><span class="p">.</span><span class="n">custid</span> <span class="o">=</span> <span class="n">SRC</span><span class="p">.</span><span class="n">custid</span>
<span class="k">WHEN</span> <span class="n">MATCHED</span> <span class="k">THEN</span>
  <span class="k">UPDATE</span> <span class="k">SET</span>
    <span class="n">TGT</span><span class="p">.</span><span class="n">companyname</span> <span class="o">=</span> <span class="n">SRC</span><span class="p">.</span><span class="n">companyname</span><span class="p">,</span>
    <span class="n">TGT</span><span class="p">.</span><span class="n">phone</span> <span class="o">=</span> <span class="n">SRC</span><span class="p">.</span><span class="n">phone</span><span class="p">,</span>
    <span class="n">TGT</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">SRC</span><span class="p">.</span><span class="n">address</span>
<span class="k">WHEN</span> <span class="k">NOT</span> <span class="n">MATCHED</span> <span class="k">THEN</span>
  <span class="k">INSERT</span> <span class="p">(</span><span class="n">custid</span><span class="p">,</span> <span class="n">companyname</span><span class="p">,</span> <span class="n">phone</span><span class="p">,</span> <span class="n">address</span><span class="p">)</span>
  <span class="k">VALUES</span> <span class="p">(</span><span class="n">SRC</span><span class="p">.</span><span class="n">custid</span><span class="p">,</span> <span class="n">SRC</span><span class="p">.</span><span class="n">companyname</span><span class="p">,</span> <span class="n">SRC</span><span class="p">.</span><span class="n">phone</span><span class="p">,</span> <span class="n">SRC</span><span class="p">.</span><span class="n">address</span><span class="p">);</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="temporal-tables">11. Temporal Tables</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Temporal tables provide a powerful mechanism for tracking changes to data over time to easily capture and query historical versions of data, which is crucial for various scenarios such as auditing, data analysis, and data recovery.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Track Data Changes: Capture all modifications (insertions, updates, deletions) to the data over time.</p>
</li>
<li>
<p>Audit Data Modifications: Track who made changes, when they were made, and the previous state of the data for auditing and compliance purposes.</p>
</li>
<li>
<p>Perform Point-in-Time Analysis: Analyze data as it existed at any point in the past.</p>
</li>
<li>
<p>Data Recovery: Easily restore previous versions of data in case of accidental deletions or updates.</p>
</li>
<li>
<p>Support Slowly Changing Dimensions: Efficiently manage slowly changing dimensions (SCDs) in data warehousing.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The SQL standard supports three types of temporal tables:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>System-versioned temporal tables rely on the system transaction time to define the validity period of a row.</p>
</li>
<li>
<p>Application-time period tables rely on the application’s definition of the validity period of a row.</p>
</li>
<li>
<p>Bitemporal combines the two types just mentioned (transaction and valid time).</p>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
SQL Server 2022 supports only system-versioned temporal tables.
</td>
</tr>
</table>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>A system-versioned temporal table has two columns representing the validity period of the row, plus a linked history table with a mirrored schema holding older states of modified rows.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>To create a system-versioned temporal table, make sure the table definition has all the following elements:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span> <span class="p">(</span>
  <span class="n">empid</span> <span class="nb">INT</span>                              <span class="k">NOT</span> <span class="k">NULL</span>
    <span class="k">CONSTRAINT</span> <span class="n">PK_Employees</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span> <i class="conum" data-value="1"></i><b>(1)</b>
  <span class="n">empname</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">25</span><span class="p">)</span>                    <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">department</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>                 <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">salary</span> <span class="nb">NUMERIC</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>                  <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">validfrom</span> <span class="n">DATETIME2</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">GENERATED</span> <span class="n">ALWAYS</span> <span class="k">AS</span> <span class="k">ROW</span> <span class="k">START</span> <span class="n">HIDDEN</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span> <i class="conum" data-value="2"></i><b>(2)</b>
  <span class="n">validto</span> <span class="n">DATETIME2</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">GENERATED</span> <span class="n">ALWAYS</span> <span class="k">AS</span> <span class="k">ROW</span> <span class="k">END</span>   <span class="n">HIDDEN</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span> <i class="conum" data-value="2"></i><b>(2)</b>
  <span class="n">PERIOD</span> <span class="k">FOR</span> <span class="n">SYSTEM_TIME</span> <span class="p">(</span><span class="n">validfrom</span><span class="p">,</span> <span class="n">validto</span><span class="p">)</span> <i class="conum" data-value="3"></i><b>(3)</b>
<span class="p">)</span>
<span class="k">WITH</span> <span class="p">(</span>
  <span class="n">SYSTEM_VERSIONING</span> <span class="o">=</span> <span class="k">ON</span> <i class="conum" data-value="4"></i><b>(4)</b>
    <span class="p">(</span>
      <span class="n">HISTORY_TABLE</span> <span class="o">=</span> <span class="n">dbo</span><span class="p">.</span><span class="n">EmployeesHistory</span><span class="p">,</span> <i class="conum" data-value="5"></i><b>(5)</b>
      <span class="n">HISTORY_RETENTION_PERIOD</span> <span class="o">=</span> <span class="mi">5</span> <span class="n">YEARS</span>    <i class="conum" data-value="6"></i><b>(6)</b>
    <span class="p">)</span>
<span class="p">);</span></code></pre>
</div>
</div>
<div class="openblock">
<div class="content">
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>A primary key</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Two columns defined as <code>DATETIME2</code> with any precision, which are non-nullable and represent the start and end of the row’s validity period in the UTC time zone
<div class="ulist">
<ul>
<li>
<p>A start column that should be marked with the option <code>GENERATED ALWAYS AS ROW START</code></p>
</li>
<li>
<p>An end column that should be marked with the option <code>GENERATED ALWAYS AS ROW END</code></p>
</li>
<li>
<p>Optionally, the period columns can be marked as hidden so that when querying the table with <code>SELECT *</code> they won’t be returned and when inserting data they’ll be ignored.</p>
</li>
<li>
<p>The modification times that SQL Server records in the period columns reflect the transaction start time.</p>
<div class="paragraph">
<p>If a long-running transaction that started at point in time T1 and ended at T2, SQL Server will record T1 as the modification time for all statements.</p>
</div>
</li>
</ul>
</div></td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>A designation of the period columns with the option <code>PERIOD FOR SYSTEM_TIME (&lt;startcol&gt;, &lt;endcol&gt;)</code></td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The table option <code>SYSTEM_VERSIONING</code>, which should be set to <code>ON</code></td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>A linked history table (which SQL Server can create automatically) to hold the past states of modified rows
<div class="paragraph">
<p>If do not specify a name for the table, SQL Server assigns one using the form <code>MSSQL_TemporalHistoryFor_&lt;object_id&gt;</code>, where <code>object_id</code> is the object ID of the current table.</p>
</div></td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Optionally, define a history retention policy using the HISTORY_RETENTION_PERIOD subclause of the SYSTEM_VERSIONING clause.</td>
</tr>
</table>
</div>
</div>
</div>
</li>
<li>
<p>To drop a system-versioned table, first disable system versioning with an ALTER TABLE command, and then manually drop the current and history tables.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="n">IF</span> <span class="n">OBJECT_ID</span><span class="p">(</span><span class="n">N</span><span class="s1">'dbo.Employees'</span><span class="p">,</span> <span class="n">N</span><span class="s1">'U'</span><span class="p">)</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span>
<span class="k">BEGIN</span>
  <span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span> <span class="k">SET</span> <span class="p">(</span> <span class="n">SYSTEM_VERSIONING</span> <span class="o">=</span> <span class="k">OFF</span> <span class="p">);</span>
  <span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">EmployeesHistory</span><span class="p">;</span>
  <span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span><span class="p">;</span>
<span class="k">END</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>When modifying data, interact with the current table, issuing normal data-modification statements.</p>
<div class="paragraph">
<p>SQL Server automatically updates the period columns and moves older versions of rows to the history table.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span> <span class="p">(</span><span class="n">empid</span><span class="p">,</span> <span class="n">empname</span><span class="p">,</span> <span class="n">department</span><span class="p">,</span> <span class="n">salary</span><span class="p">)</span>
  <span class="k">VALUES</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">'Sara'</span><span class="p">,</span> <span class="s1">'IT'</span>       <span class="p">,</span> <span class="mi">50000</span><span class="p">.</span><span class="mi">00</span><span class="p">),</span>
        <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s1">'Don'</span> <span class="p">,</span> <span class="s1">'HR'</span>       <span class="p">,</span> <span class="mi">45000</span><span class="p">.</span><span class="mi">00</span><span class="p">),</span>
        <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s1">'Judy'</span><span class="p">,</span> <span class="s1">'Sales'</span>    <span class="p">,</span> <span class="mi">55000</span><span class="p">.</span><span class="mi">00</span><span class="p">),</span>
        <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="s1">'Yael'</span><span class="p">,</span> <span class="s1">'Marketing'</span><span class="p">,</span> <span class="mi">55000</span><span class="p">.</span><span class="mi">00</span><span class="p">),</span>
        <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s1">'Sven'</span><span class="p">,</span> <span class="s1">'IT'</span>       <span class="p">,</span> <span class="mi">45000</span><span class="p">.</span><span class="mi">00</span><span class="p">),</span>
        <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="s1">'Paul'</span><span class="p">,</span> <span class="s1">'Sales'</span>    <span class="p">,</span> <span class="mi">40000</span><span class="p">.</span><span class="mi">00</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- current table has the six new rows</span>
<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">empname</span><span class="p">,</span> <span class="n">department</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="n">validfrom</span><span class="p">,</span> <span class="n">validto</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span><span class="p">;</span>

<span class="c1">-- history table is empty at this point</span>
<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">empname</span><span class="p">,</span> <span class="n">department</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="n">validfrom</span><span class="p">,</span> <span class="n">validto</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">EmployeesHistory</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- SQL Server moves the deleted row to the history table, setting its validto value to the deletion time.</span>
<span class="k">DELETE</span> <span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span>
<span class="k">WHERE</span> <span class="n">empid</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">empname</span><span class="p">,</span> <span class="n">department</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="n">validfrom</span><span class="p">,</span> <span class="n">validto</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">EmployeesHistory</span><span class="p">;</span>
<span class="c1">-- 6	Paul	Sales	40000.00	2025-01-15 03:42:15	2025-01-15 03:44:53</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- An update of a row is treated as a delete plus an insert.</span>
<span class="k">UPDATE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span>
  <span class="k">SET</span> <span class="n">salary</span> <span class="o">*=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">05</span>
<span class="k">WHERE</span> <span class="n">department</span> <span class="o">=</span> <span class="s1">'IT'</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">empname</span><span class="p">,</span> <span class="n">department</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="n">validfrom</span><span class="p">,</span> <span class="n">validto</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span>
<span class="k">WHERE</span> <span class="n">department</span> <span class="o">=</span> <span class="s1">'IT'</span><span class="p">;</span>
<span class="c1">-- 1	Sara	IT	52500.00	2025-01-15 03:47:42	9999-12-31 23:59:59</span>
<span class="c1">-- 5	Sven	IT	47250.00	2025-01-15 03:47:42	9999-12-31 23:59:59</span>

<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">empname</span><span class="p">,</span> <span class="n">department</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="n">validfrom</span><span class="p">,</span> <span class="n">validto</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">EmployeesHistory</span>
<span class="k">WHERE</span> <span class="n">department</span> <span class="o">=</span> <span class="s1">'IT'</span><span class="p">;</span>
<span class="c1">-- 1	Sara	IT	50000.00	2025-01-15 03:42:15	2025-01-15 03:47:42</span>
<span class="c1">-- 5	Sven	IT	45000.00	2025-01-15 03:42:15	2025-01-15 03:47:42</span></code></pre>
</div>
</div>
</li>
<li>
<p>When querying data, for the current state, simply query the current table as usual, and to see a past state, correct to a certain point or period of time, query the current table followed by the <code>FOR SYSTEM_TIME</code> clause, plus a subclause that indicates more specifics.</p>
<div class="paragraph">
<p>SQL Server will retrieve the data from both the current and history tables as needed.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 1. Qualifying rows for FOR SYSTEM_TIME subclauses [&lt;datetime2 value&gt;]</caption>
<colgroup>
<col style="width: 37.5%;">
<col style="width: 62.5%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Subclause</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Qualifying rows</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>AS OF @datetime</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>validfrom <= @datetime AND validto &gt; @datetime</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>FROM @start TO @end</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>validfrom &lt; @end AND validto &gt; @start</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>BETWEEN @start AND @end</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>validfrom <= @end AND validto &gt; @start</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>CONTAINED IN(@start, @end)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>validfrom >= @start AND validto <= @end</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ALL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">All rows from both tables (T-SQL*)</p></td>
</tr>
</tbody>
</table>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DECLARE</span> <span class="o">@</span><span class="nb">datetime</span> <span class="k">AS</span> <span class="n">DATETIME2</span> <span class="o">=</span> <span class="s1">'2025-01-15 03:45:00'</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">empname</span><span class="p">,</span> <span class="n">department</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="n">validfrom</span><span class="p">,</span> <span class="n">validto</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span> <span class="k">FOR</span> <span class="n">SYSTEM_TIME</span> <span class="k">AS</span> <span class="k">OF</span> <span class="o">@</span><span class="nb">datetime</span><span class="p">;</span>

<span class="c1">-- same as</span>

<span class="k">DECLARE</span> <span class="o">@</span><span class="nb">datetime</span> <span class="k">AS</span> <span class="n">DATETIME2</span> <span class="o">=</span> <span class="s1">'2025-01-15 03:45:00'</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">empname</span><span class="p">,</span> <span class="n">department</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="n">validfrom</span><span class="p">,</span> <span class="n">validto</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span>
<span class="k">WHERE</span> <span class="n">validfrom</span> <span class="o">&lt;=</span> <span class="o">@</span><span class="nb">datetime</span> <span class="k">AND</span> <span class="n">validto</span> <span class="o">&gt;</span> <span class="o">@</span><span class="nb">datetime</span>

<span class="k">UNION</span> <span class="k">ALL</span>

<span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">empname</span><span class="p">,</span> <span class="n">department</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="n">validfrom</span><span class="p">,</span> <span class="n">validto</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">EmployeesHistory</span>
<span class="k">WHERE</span> <span class="n">validfrom</span> <span class="o">&lt;=</span> <span class="o">@</span><span class="nb">datetime</span> <span class="k">AND</span> <span class="n">validto</span> <span class="o">&gt;</span> <span class="o">@</span><span class="nb">datetime</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="transactions-and-concurrency">12. Transactions and Concurrency</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A transaction is a unit of work that might include multiple activities that query and modify data and that can also change the data definition.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Transaction boundaries can be defined either explicitly or implicitly.</p>
<div class="ulist">
<ul>
<li>
<p>A transaction explicitly is defined beginning with a <code>BEGIN TRAN</code> (or <code>BEGIN TRANSACTION</code>) statement, and end explicitly with a <code>COMMIT TRAN</code> statement to commit it and with a <code>ROLLBACK TRAN</code> (or <code>ROLLBACK TRANSACTION</code>) statement to undo its changes.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">BEGIN</span> <span class="n">TRAN</span><span class="p">;</span>
  <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">(</span><span class="n">keycol</span><span class="p">,</span> <span class="n">col1</span><span class="p">,</span> <span class="n">col2</span><span class="p">)</span> <span class="k">VALUES</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="s1">'C'</span><span class="p">);</span>
  <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T2</span><span class="p">(</span><span class="n">keycol</span><span class="p">,</span> <span class="n">col1</span><span class="p">,</span> <span class="n">col2</span><span class="p">)</span> <span class="k">VALUES</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">201</span><span class="p">,</span> <span class="s1">'X'</span><span class="p">);</span>
<span class="k">COMMIT</span> <span class="n">TRAN</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>If the boundaries of a transaction isn&#8217;t marked explicitly, by default, SQL Server treats each individual statement as a transaction, which is known as an <em>auto-commit mode</em>.</p>
</li>
<li>
<p>Transactions have four properties—atomicity, consistency, isolation, and durability— abbreviated with the acronym ACID:</p>
<div class="ulist">
<ul>
<li>
<p><strong>A</strong>tomicity: A transaction is an atomic unit of work. Either all changes in the transaction take place or none do.</p>
<div class="ulist">
<ul>
<li>
<p>If the system fails before a transaction is completed (before the commit instruction is recorded in the <em>transaction log</em>), upon restart, SQL Server undoes the changes that took place.</p>
</li>
<li>
<p>Also, if errors are encountered during the transaction and the error is considered severe enough, such as the target filegroup being full when trying to insert data, SQL Server automatically rolls back the transaction.</p>
</li>
</ul>
</div>
</li>
<li>
<p><strong>C</strong>onsistency: The term consistency refers to the state of the data that the relational database management system (RDBMS) as concurrent transactions modify and query it, which is a subjective term, and depends on an application’s needs.</p>
</li>
<li>
<p><strong>I</strong>solation: Isolation ensures that transactions access only consistent data through a mechanism called <em>isolation</em> levels.</p>
<div class="ulist">
<ul>
<li>
<p>With disk-based tables, SQL Server supports two different models to handle isolation: one based purely on <em>locking</em>, and another based on a combination of locking and <em>row versioning</em>.</p>
<div class="ulist">
<ul>
<li>
<p>The model based on <em>locking</em> is the default in a box product.</p>
<div class="paragraph">
<p>In this model, readers require shared locks. If the current state of the data is inconsistent, readers are blocked until the state of the data becomes consistent.</p>
</div>
</li>
<li>
<p>The model based on locking and <em>row versioning</em> is the default in Azure SQL Database.</p>
<div class="paragraph">
<p>In this model, readers don’t take shared locks and don’t need to wait. If the current state of the data is inconsistent, the reader gets an older consistent state.</p>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
<li>
<p><strong>D</strong>urability: The durability property means that once a commit instruction is acknowledged by the database engine, the transaction’s changes are guaranteed to be durable—or in other words, persist—in the database.</p>
<div class="ulist">
<ul>
<li>
<p>A commit is acknowledged by getting control back to the application and running the next line of code.</p>
</li>
<li>
<p>Data changes are always written to the database’s <em>transaction log</em> on disk before they are written to the data portion of the database on disk.</p>
</li>
<li>
<p>After the commit instruction is recorded in the transaction log on disk, the transaction is considered durable even if the change hasn’t yet made it to the data portion on disk.</p>
</li>
<li>
<p>When the system starts, either normally or after a system failure, SQL Server runs a recovery process in each database that involves analyzing the log, then applying a <em>redo</em> phase, and then applying an <em>undo</em> phase.</p>
<div class="ulist">
<ul>
<li>
<p>The <em>redo</em> phase involves rolling forward (replaying) all the changes from any transaction whose commit instruction is written to the log but whose changes haven’t yet made it to the data portion.</p>
</li>
<li>
<p>The <em>undo</em> phase involves rolling back (undoing) the changes from any transaction whose commit instruction was not recorded in the log.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Start a new transaction</span>
<span class="k">BEGIN</span> <span class="n">TRAN</span><span class="p">;</span>
<span class="c1">-- Declare a variable</span>
<span class="k">DECLARE</span> <span class="o">@</span><span class="n">neworderid</span> <span class="k">AS</span> <span class="nb">INT</span><span class="p">;</span>
<span class="c1">-- Insert a new order into the Sales.Orders table</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
  <span class="p">(</span><span class="n">custid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">orderdate</span><span class="p">,</span> <span class="n">requireddate</span><span class="p">,</span> <span class="n">shippeddate</span><span class="p">,</span>
  <span class="n">shipperid</span><span class="p">,</span> <span class="n">freight</span><span class="p">,</span> <span class="n">shipname</span><span class="p">,</span> <span class="n">shipaddress</span><span class="p">,</span> <span class="n">shipcity</span><span class="p">,</span>
  <span class="n">shippostalcode</span><span class="p">,</span> <span class="n">shipcountry</span><span class="p">)</span>
<span class="k">VALUES</span>
  <span class="p">(</span><span class="mi">85</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">'20220212'</span><span class="p">,</span> <span class="s1">'20220301'</span><span class="p">,</span> <span class="s1">'20220216'</span><span class="p">,</span>
    <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">.</span><span class="mi">38</span><span class="p">,</span> <span class="n">N</span><span class="s1">'Ship to 85-B'</span><span class="p">,</span> <span class="n">N</span><span class="s1">'6789 rue de l</span><span class="se">''</span><span class="s1">Abbaye'</span><span class="p">,</span> <span class="n">N</span><span class="s1">'Reims'</span><span class="p">,</span>
    <span class="n">N</span><span class="s1">'10345'</span><span class="p">,</span> <span class="n">N</span><span class="s1">'France'</span><span class="p">);</span>
<span class="c1">-- Save the new order ID in a variable</span>
<span class="k">SET</span> <span class="o">@</span><span class="n">neworderid</span> <span class="o">=</span> <span class="n">SCOPE_IDENTITY</span><span class="p">();</span>
<span class="c1">-- Return the new order ID</span>
<span class="k">SELECT</span> <span class="o">@</span><span class="n">neworderid</span> <span class="k">AS</span> <span class="n">neworderid</span><span class="p">;</span>
<span class="c1">-- Insert order lines for the new order into Sales.OrderDetails</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">Sales</span><span class="p">.</span><span class="n">OrderDetails</span>
  <span class="p">(</span><span class="n">orderid</span><span class="p">,</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span><span class="p">,</span> <span class="n">qty</span><span class="p">,</span> <span class="n">discount</span><span class="p">)</span>
<span class="k">VALUES</span><span class="p">(</span><span class="o">@</span><span class="n">neworderid</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">14</span><span class="p">.</span><span class="mi">00</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">000</span><span class="p">),</span>
  <span class="p">(</span><span class="o">@</span><span class="n">neworderid</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">9</span><span class="p">.</span><span class="mi">80</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">000</span><span class="p">),</span>
  <span class="p">(</span><span class="o">@</span><span class="n">neworderid</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">34</span><span class="p">.</span><span class="mi">80</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">000</span><span class="p">);</span>
<span class="c1">-- Commit the transaction</span>
<span class="k">COMMIT</span> <span class="n">TRAN</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="sect2">
<h3 id="locks-and-blocking">12.1. Locks and Blocking</h3>
<div class="paragraph">
<p>By default, a SQL Server box product uses a pure locking model to enforce the isolation property of transactions, whereas Azure SQL Database uses the row-versioning model by default.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- turn off the database property READ_COMMITTED_SNAPSHOT to switch to the locking model as the default</span>
<span class="k">ALTER</span> <span class="k">DATABASE</span> <span class="n">TSQLV6</span> <span class="k">SET</span> <span class="n">READ_COMMITTED_SNAPSHOT</span> <span class="k">OFF</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="sect3">
<h4 id="locks">12.1.1. Locks</h4>
<div class="paragraph">
<p>Locks are control resources obtained by a transaction to guard data resources, preventing conflicting or incompatible access by other transactions.</p>
</div>
<div class="sect4">
<h5 id="lock-modes-and-compatibility">12.1.1.1. Lock Modes and Compatibility</h5>
<div class="paragraph">
<p>When trying to modify data, a transaction requests an <strong>exclusive lock</strong> on the data resource, regardless of the isolation level. If granted, the exclusive lock is held until the end of the transaction.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>For single- statement transactions, this means that the lock is held until the statement completes.</p>
</li>
<li>
<p>For multistatement transactions, this means that the lock is held until all statements complete and the transaction is ended by a <code>COMMIT TRAN</code> or <code>ROLLBACK TRAN</code> command.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>As for reading data, the defaults are different for a SQL Server box product and Azure SQL Database.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>In SQL Server, the default isolation level is called <code>READ COMMITTED</code>.</p>
<div class="paragraph">
<p>In this isolation, when trying to read data, by default a transaction requests a <strong>shared lock</strong> on the data resource and releases the lock as soon as the read statement is done with that resource.</p>
</div>
</li>
<li>
<p>In Azure SQL Database, the default isolation level is called <code>READ COMMITTED SNAPSHOT</code>.</p>
<div class="paragraph">
<p>Instead of relying only on locking, this isolation level relies on a combination of <em>locking and row versioning</em>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Under this isolation level, readers do not require shared locks, and therefore they never wait; they rely on the row-versioning technology to provide the expected isolation.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Under the <code>READ COMMITTED</code> isolation level, if a transaction modifies rows, until the transaction completes, another transaction can’t read the same rows.</p>
<div class="paragraph">
<p>This approach to concurrency control is known as the <strong>pessimistic concurrency</strong> approach.</p>
</div>
</li>
<li>
<p>Under the <code>READ COMMITTED SNAPSHOT</code> isolation level, if a transaction modifies rows, another transaction trying to read the data will get the last committed state of the rows that was available when the statement started.</p>
<div class="paragraph">
<p>This approach to concurrency control is known as the <strong>optimistic concurrency</strong> approach.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
READ COMMITTED SNAPSHOT is an MVCC-based implementation of the READ COMMITTED isolation level in SQL Server.
</td>
</tr>
</table>
</div>
</li>
</ul>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 2. Lock compatibility of exclusive and shared locks</caption>
<colgroup>
<col style="width: 27.2727%;">
<col style="width: 36.3636%;">
<col style="width: 36.3637%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Requested mode</th>
<th class="tableblock halign-left valign-top">Granted Exclusive (X)</th>
<th class="tableblock halign-left valign-top">Granted Shared (S)</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Exclusive</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Shared</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Yes</p></td>
</tr>
</tbody>
</table>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
A “No” in the intersection means that the locks are incompatible and the requested mode is denied; the requester must wait. A “Yes” in the intersection means that the locks are compatible and the requested mode is accepted.
</td>
</tr>
</table>
</div>
</div>
<div class="sect4">
<h5 id="lockable-resource-types">12.1.1.2. Lockable Resource Types</h5>
<div class="paragraph">
<p>SQL Server can lock different types of resources that include rows (RID in a heap, key in an index), pages, objects (for example, tables), databases, and others. Rows reside within pages, and pages are the physical data blocks that contain table or index data.</p>
</div>
<div class="paragraph">
<p>To obtain a lock on a certain resource type, a transaction must first obtain <em>intent locks</em> of the same mode on higher levels of granularity to efficiently detect incompatible lock requests on higher levels of granularity and prevent the granting of those.</p>
</div>
<div class="paragraph">
<p>SQL Server determines dynamically which resource types to lock.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Naturally, for ideal concurrency, it’s best to lock only what needs to be locked—namely, only the affected rows.</p>
</li>
<li>
<p>However, locks require memory resources and internal management overhead. So SQL Server considers both concurrency and system resources when it’s choosing which resource types to lock.</p>
<div class="ulist">
<ul>
<li>
<p>When SQL Server estimates that a transaction will interact with a small number of rows, it tends to use row locks.</p>
</li>
<li>
<p>With larger numbers of rows, SQL Server tends to use page locks.</p>
</li>
</ul>
</div>
</li>
<li>
<p>SQL Server might first acquire fine-grained locks (such as row or page locks) and, in certain circumstances, try to escalate the fine-grained locks to a table lock to preserve memory.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect3">
<h4 id="blocking">12.1.2. Blocking</h4>
<div class="paragraph">
<p>When one transaction holds a lock on a data resource and another transaction requests an incompatible lock on the same resource, the request is blocked and the requester enters a wait state.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>By default, the blocked request keeps waiting until the blocker releases the interfering lock.</p>
<div class="ulist">
<ul>
<li>
<p>To restrict the amount of time the session waits for a lock, set a session option called <code>LOCK_TIMEOUT</code>.</p>
</li>
<li>
<p>Specify a value in milliseconds—such as 5000 for 5 seconds, 0 for an immediate timeout, and –1 for no timeout (which is the default).</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SET</span> <span class="n">LOCK_TIMEOUT</span> <span class="mi">5000</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
<span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
<span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Msg 1222, Level 16, State 51, Line 3
Lock request time out period exceeded.</span></code></pre>
</div>
</div>
</li>
<li>
<p>To remove the lock timeout value, set it back to the default (no timeout), and issue the query again.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SET</span> <span class="n">LOCK_TIMEOUT</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
<span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
<span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>The dynamic management view (DMV) <code>sys.dm_tran_locks</code> can be used to get lock information, including both locks granted to sessions and locks sessions waiting for.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 1: hold exclusive lock to write</span>
<span class="k">BEGIN</span> <span class="n">TRAN</span><span class="p">;</span>
  <span class="k">UPDATE</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
    <span class="k">SET</span> <span class="n">unitprice</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">00</span>
  <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="c1">-- no COMMIT TRAN or ROLLBACK TRAN, the transaction remains open, and the lock is still held</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 2: needs a shared lock to read, but be blocked and has to wait</span>
<span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
<span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
<span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 3</span>
<span class="k">SELECT</span> <span class="c1">-- use * to explore other available attributes</span>
    <span class="n">request_session_id</span>            <span class="k">AS</span> <span class="n">sid</span><span class="p">,</span>
    <span class="n">resource_type</span>                 <span class="k">AS</span> <span class="n">restype</span><span class="p">,</span>
    <span class="n">resource_database_id</span>          <span class="k">AS</span> <span class="n">dbid</span><span class="p">,</span>
    <span class="n">DB_NAME</span><span class="p">(</span><span class="n">resource_database_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">dbname</span><span class="p">,</span>
    <span class="n">resource_description</span>          <span class="k">AS</span> <span class="n">res</span><span class="p">,</span>
    <span class="n">resource_associated_entity_id</span> <span class="k">AS</span> <span class="n">resid</span><span class="p">,</span>
    <span class="n">request_mode</span>                  <span class="k">AS</span> <span class="k">mode</span><span class="p">,</span>
    <span class="n">request_status</span>                <span class="k">AS</span> <span class="n">status</span>
<span class="k">FROM</span> <span class="n">sys</span><span class="p">.</span><span class="n">dm_tran_locks</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">sid restype  dbid dbname res            resid             mode status
52  DATABASE 6    TSQLV6                0                 S    GRANT
56  DATABASE 6    TSQLV6                0                 S    GRANT
59  DATABASE 6    TSQLV6                0                 S    GRANT
52  PAGE     6    TSQLV6 1:456          72057594046251008 IS   GRANT
56  PAGE     6    TSQLV6 1:456          72057594046251008 IX   GRANT
52  OBJECT   6    TSQLV6                1029578706        IS   GRANT
56  OBJECT   6    TSQLV6                1029578706        IX   GRANT
56  KEY      6    TSQLV6 (61a06abd401c) 72057594046251008 X    GRANT
52  KEY      6    TSQLV6 (61a06abd401c) 72057594046251008 S    WAIT</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Each session is identified by a unique session ID.</p>
<div class="ulist">
<ul>
<li>
<p>A session’s ID can be determined by querying the function <code>@@SPID</code>.</p>
</li>
<li>
<p>If working with SQL Server Management Studio, the session ID could be found in parentheses to the right of the login name in the status bar at the bottom of the query window that has the focus, and also in the caption of the connected query window.</p>
</li>
</ul>
</div>
</li>
<li>
<p>By observing that both sessions lock a <em>row</em> with the same <em>res</em> and <em>resid</em> values, session 52 is waiting for a shared lock on a row in the sample database <code>TSQLV6</code> that is being held as an exclusive lock by session 56.</p>
</li>
<li>
<p>The involved table can be figured out by moving upward in the lock hierarchy for either session 52 or 56 and inspecting the intent locks on the <em>object</em> (table) where the row resides.</p>
</li>
<li>
<p>The <code>OBJECT_NAME</code> function can be used to translate the object ID (1029578706, in this example) that appears under the <em>resid</em> attribute in the object lock, that is <code>Production.Products</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">OBJECT_NAME</span><span class="p">(</span><span class="mi">1029578706</span><span class="p">);</span> <span class="c1">-- Products</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <code>sys.dm_tran_locks</code> view gives the information about the IDs of the sessions involved in the <em>blocking chain</em>, that is, two or more sessions that are involved in the blocking situation, such as session <code>x</code> blocking session <code>y</code>, session <code>y</code> blocking session <code>z</code>, and so on—hence the use of the term chain.</p>
</li>
</ul>
</div>
</li>
<li>
<p>The DMV <code>sys.dm_exec_connections</code> can be used to get information about the connections associated with those session IDs and filter only the session IDs that are involved:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="c1">-- use * to explore</span>
    <span class="n">session_id</span> <span class="k">AS</span> <span class="n">sid</span><span class="p">,</span>
    <span class="n">connect_time</span><span class="p">,</span>
    <span class="n">last_read</span><span class="p">,</span>
    <span class="n">last_write</span><span class="p">,</span>
    <span class="n">most_recent_sql_handle</span>
<span class="k">FROM</span> <span class="n">sys</span><span class="p">.</span><span class="n">dm_exec_connections</span>
<span class="k">WHERE</span> <span class="n">session_id</span> <span class="k">IN</span><span class="p">(</span><span class="mi">52</span><span class="p">,</span> <span class="mi">56</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">52	2025-01-13 14:50:57.367	2025-01-13 14:54:07.930	2025-01-13 14:54:07.923	0x0200000063FC7D052E09844778CDD615CFE7A2D1FB4118020000000000000000000000000000000000000000
56	2025-01-13 14:53:33.587	2025-01-13 14:53:52.560	2025-01-13 14:53:52.560	0x020000008FAC322CF2FC73472F8E93B0DF1994A69639ED090000000000000000000000000000000000000000</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>A binary value holding a handle to the most recent SQL batch run by the connection.</p>
<div class="ulist">
<ul>
<li>
<p>The handle can be provided as an input parameter to a table function called <code>sys.dm_exec_sql_text</code>, and the function returns the batch of code represented by the handle.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">session_id</span><span class="p">,</span> <span class="nb">text</span>
<span class="k">FROM</span> <span class="n">sys</span><span class="p">.</span><span class="n">dm_exec_connections</span>
  <span class="k">CROSS</span> <span class="n">APPLY</span> <span class="n">sys</span><span class="p">.</span><span class="n">dm_exec_sql_text</span><span class="p">(</span><span class="n">most_recent_sql_handle</span><span class="p">)</span> <span class="k">AS</span> <span class="n">ST</span>
<span class="k">WHERE</span> <span class="n">session_id</span> <span class="k">IN</span><span class="p">(</span><span class="mi">52</span><span class="p">,</span> <span class="mi">56</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">52	(@1 tinyint)SELECT [productid],[unitprice] FROM [Production].[Products] WHERE [productid]=@1
</span><span class="gp">56	BEGIN TRAN;</span><span class="w">    </span>UPDATE Production.Products      SET unitprice +<span class="o">=</span> 1.00    WHERE productid <span class="o">=</span> 2<span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>Starting with SQL Server 2016, the function <code>sys.dm_exec_input_buffer</code> instead of <code>sys.dm_exec_sql_text</code> can be used to get the code that the sessions of interest submitted last.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">session_id</span><span class="p">,</span> <span class="n">event_info</span>
<span class="k">FROM</span> <span class="n">sys</span><span class="p">.</span><span class="n">dm_exec_connections</span>
  <span class="k">CROSS</span> <span class="n">APPLY</span> <span class="n">sys</span><span class="p">.</span><span class="n">dm_exec_input_buffer</span><span class="p">(</span><span class="n">session_id</span><span class="p">,</span> <span class="k">NULL</span><span class="p">)</span> <span class="k">AS</span> <span class="n">IB</span>
<span class="k">WHERE</span> <span class="n">session_id</span> <span class="k">IN</span><span class="p">(</span><span class="mi">52</span><span class="p">,</span> <span class="mi">56</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>The DMV <code>sys.dm_exec_sessions</code> can be used to find a lot of useful information about the sessions involved in a blocking situation.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="c1">-- use * to explore</span>
  <span class="n">session_id</span> <span class="k">AS</span> <span class="n">sid</span><span class="p">,</span>
  <span class="n">login_time</span><span class="p">,</span>
  <span class="n">host_name</span><span class="p">,</span>
  <span class="n">program_name</span><span class="p">,</span>
  <span class="n">login_name</span><span class="p">,</span>
  <span class="n">nt_user_name</span><span class="p">,</span>
  <span class="n">last_request_start_time</span><span class="p">,</span>
  <span class="n">last_request_end_time</span>
<span class="k">FROM</span> <span class="n">sys</span><span class="p">.</span><span class="n">dm_exec_sessions</span>
<span class="k">WHERE</span> <span class="n">session_id</span> <span class="k">IN</span><span class="p">(</span><span class="mi">52</span><span class="p">,</span> <span class="mi">56</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
<li>
<p>Another DMV <code>sys.dm_exec_requests</code> can probably be used to find useful for troubleshooting blocking situations.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="c1">-- use * to explore</span>
  <span class="n">session_id</span> <span class="k">AS</span> <span class="n">sid</span><span class="p">,</span>
  <span class="n">blocking_session_id</span><span class="p">,</span>
  <span class="n">command</span><span class="p">,</span>
  <span class="n">sql_handle</span><span class="p">,</span>
  <span class="n">database_id</span><span class="p">,</span>
  <span class="n">wait_type</span><span class="p">,</span>
  <span class="n">wait_time</span><span class="p">,</span>
  <span class="n">wait_resource</span>
<span class="k">FROM</span> <span class="n">sys</span><span class="p">.</span><span class="n">dm_exec_requests</span>
<span class="k">WHERE</span> <span class="n">blocking_session_id</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>To terminate the blocker—for example, if realizing that as a result of a bug in the application the transaction remained open and nothing in the application can close it—do so by using the <code>KILL &lt;session_id&gt;</code> command.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="n">KILL</span> <span class="mi">56</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="isolation-levels">12.2. Isolation Levels</h3>
<div class="paragraph">
<p>Isolation levels determine the level of consistency when interacting with data. In the default isolation level in a box product, a reader uses shared locks on the target resources and a writer uses exclusive locks.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>SQL Server supports four isolation levels that are based on the pure locking model: READ UNCOMMITTED, READ COMMITTED (the default in a SQL Server box product), REPEATABLE READ, and SERIALIZABLE.</p>
</li>
<li>
<p>SQL Server also supports two isolation levels that are based on a combination of locking and row versioning: SNAPSHOT and READ COMMITTED SNAPSHOT (the default in Azure SQL Database).</p>
<div class="paragraph">
<p>SNAPSHOT and READ COMMITTED SNAPSHOT are in a sense the row-versioning counterparts of READ COMMITTED and SERIALIZABLE, respectively.</p>
</div>
</li>
<li>
<p>The isolation level of the whole session can be set by using the following command:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SET</span> <span class="n">TRANSACTION</span> <span class="k">ISOLATION</span> <span class="k">LEVEL</span> <span class="o">&lt;</span><span class="n">isolationname</span><span class="o">&gt;</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>The isolation level of a query can be set by using a table hint:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="p">...</span> <span class="k">FROM</span> <span class="o">&lt;</span><span class="k">table</span><span class="o">&gt;</span> <span class="k">WITH</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">isolationname</span><span class="o">&gt;</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
<li>
<p>With the first four isolation levels, the higher the isolation level, the stricter the locks are that readers request and the longer their duration is; therefore, the higher the isolation level is, the higher the consistency is and the lower the concurrency is.</p>
</li>
<li>
<p>With the two row-versioning-based isolation levels, SQL Server is able to store previous committed versions of rows in a version store. Readers do not request shared locks; instead, if the current version of the rows is not what they are supposed to see, SQL Server provides them with an older version.</p>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 3. Isolation level properties</caption>
<colgroup>
<col style="width: 14.2857%;">
<col style="width: 14.2857%;">
<col style="width: 14.2857%;">
<col style="width: 14.2857%;">
<col style="width: 14.2857%;">
<col style="width: 14.2857%;">
<col style="width: 14.2858%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Isolation level</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Allows uncommitted reads?</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Allows nonrepeatable reads?</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Allows lost updates?</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Allows phantom reads?</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Detects update conflicts?</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Uses row versioning?</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">READ UNCOMMITTED</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Yes</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Yes</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Yes</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Yes</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">READ COMMITTED</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Yes</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Yes</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Yes</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">REPEATABLE READ</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Yes</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">SERIALIZABLE</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">SNAPSHOT</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Yes</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Yes</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">READ COMMITTED SNAPSHOT</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Yes</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Yes</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Yes</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Yes</p></td>
</tr>
</tbody>
</table>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="read-uncommitted">12.2.1. READ UNCOMMITTED</h4>
<div class="paragraph">
<p>READ UNCOMMITTED is the lowest available isolation level, that is, a reader doesn’t ask for a shared lock.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A reader that doesn’t ask for a shared lock can never be in conflict with a writer that is holding an exclusive lock, so that the reader can read uncommitted changes (also known as <em>dirty reads</em>).</p>
</li>
<li>
<p>It also means the reader won’t interfere with a writer that asks for an exclusive lock, that is, a writer can change data while a reader that is running under the READ UNCOMMITTED isolation level reads data.</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>Open a transaction, update the unit price of product 2 by adding 1.00 to its current price (19.00), and then query the product’s row</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 1</span>
<span class="k">BEGIN</span> <span class="n">TRAN</span><span class="p">;</span>

<span class="k">UPDATE</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">SET</span> <span class="n">unitprice</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">00</span>
<span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
<span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
<span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="mi">2</span>	<span class="mi">20</span><span class="p">.</span><span class="mi">00</span></code></pre>
</div>
</div>
</li>
<li>
<p>Set the isolation level to READ UNCOMMITTED and query the row for product 2.</p>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The query returned the state of the row after the change, even though the change was not committed
</td>
</tr>
</table>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 2</span>
<span class="k">SET</span> <span class="n">TRANSACTION</span> <span class="k">ISOLATION</span> <span class="k">LEVEL</span> <span class="k">READ</span> <span class="k">UNCOMMITTED</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
<span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
<span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="mi">2</span>	<span class="mi">20</span><span class="p">.</span><span class="mi">00</span></code></pre>
</div>
</div>
</li>
<li>
<p>Keep in mind that Connection 1 might apply further changes to the row later in the transaction or even roll back at some point.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 1</span>
<span class="k">ROLLBACK</span> <span class="n">TRAN</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>The above rollback undoes the update of product 2, changing its price back to 19.00. The value 20.00 that the reader got was never committed which is called dirty read.</p>
</li>
</ol>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="read-committed">12.2.2. READ COMMITTED</h4>
<div class="paragraph">
<p>The lowest isolation level that prevents dirty reads is READ COMMITTED, which is also the default isolation level in SQL Server (the box product), to prevent uncommitted reads by requiring a reader to obtain a shared lock.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 1</span>
<span class="c1">-- open a transaction, update the price of product 2, and query the row to show the new price</span>
<span class="k">BEGIN</span> <span class="n">TRAN</span><span class="p">;</span>
   <span class="k">UPDATE</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
     <span class="k">SET</span> <span class="n">unitprice</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">00</span>
   <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

   <span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
   <span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
   <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 2</span>
<span class="c1">-- Keep in mind that this isolation level is the default, so unless previously changed the session’s isolation level, it isn't needed to set it explicitly.</span>
<span class="c1">-- The SELECT statement is currently blocked because it needs a shared lock to be able to read the row, and this shared lock request is in conflict with the exclusive lock held by the writer in Connection 1</span>
<span class="k">SET</span> <span class="n">TRANSACTION</span> <span class="k">ISOLATION</span> <span class="k">LEVEL</span> <span class="k">READ</span> <span class="k">COMMITTED</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
<span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
<span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 1</span>
<span class="c1">-- commit the transaction</span>
<span class="k">COMMIT</span> <span class="n">TRAN</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">-- Connection 2
2	20.00</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- restore the unitprice of the product 2</span>
<span class="k">UPDATE</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">SET</span> <span class="n">unitprice</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">00</span> <span class="c1">-- 19.00</span>
<span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In terms of the duration of locks, in the READ COMMITTED isolation level, a reader holds the shared lock only until it’s done with the resource.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>It doesn’t keep the lock until the end of the transaction; in fact, it doesn’t even keep the lock until the end of the statement, that means that in between two reads of the same data resource in the same transaction, no lock is held on the resource.</p>
</li>
<li>
<p>Therefore, another transaction can modify the resource in between those two reads, and the reader might get different values in each read, which is called <em>nonrepeatable reads</em> or <em>inconsistent analysis</em>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="repeatable-read">12.2.3. REPEATABLE READ</h4>
<div class="paragraph">
<p>The isolation level REPEATABLE READ can be used to get <em>repeatable reads</em>, or <em>consistent analysis</em> to ensure that no one can change values in between reads that take place in the same transaction, that is, not only does a reader need a shared lock to be able to read, but it also holds the lock until the end of the transaction.</p>
</div>
<div class="paragraph">
<p>The REPEATABLE READ but not by lower isolation levels can also prevent another phenomenon called a <em>lost update</em> that happens when two transactions read a value, make calculations based on what they read, and then update the value.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>In isolation levels lower than REPEATABLE READ no lock is held on the resource after the read, both transactions can update the value, and whichever transaction updates the value last “wins,” overwriting the other transaction’s update.</p>
</li>
<li>
<p>In REPEATABLE READ, both sides keep their shared locks after the first read, so neither can acquire an exclusive lock later in order to update, which results in a <em>deadlock</em>, and the update conflict is prevented.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 1</span>
<span class="k">SET</span> <span class="n">TRANSACTION</span> <span class="k">ISOLATION</span> <span class="k">LEVEL</span> <span class="k">REPEATABLE</span> <span class="k">READ</span><span class="p">;</span>

<span class="c1">-- keep holding a shared lock on the row for product 2</span>
<span class="k">BEGIN</span> <span class="n">TRAN</span><span class="p">;</span>
  <span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
  <span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="mi">2</span>	<span class="mi">19</span><span class="p">.</span><span class="mi">00</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 2</span>
<span class="c1">-- blocked the modifier’s request for an exclusive lock in conflict with the reader’s granted shared lock.</span>
<span class="k">UPDATE</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">SET</span> <span class="n">unitprice</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">00</span>
<span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 1</span>
<span class="c1">-- the second read got the same unit price for product 2 as the first read</span>
  <span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
  <span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="k">COMMIT</span> <span class="n">TRAN</span><span class="p">;</span> <span class="c1">--  commit the transaction and release the shared lock</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 2</span>
<span class="c1">-- obtain the exclusive lock it was waiting for and update the row</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="serializable">12.2.4. SERIALIZABLE</h4>
<div class="paragraph">
<p>Under the REPEATABLE READ isolation level, readers keep shared locks until the end of the transaction that locks only resources (e.g., rows) that the query found the first time it ran, not rows that weren’t there when the query ran, so that a second read in the same transaction might return new rows as well, which happens if, in between the reads, another transaction inserts new rows that satisfy the reader’s query filter, which are called <em>phantoms</em>, and such reads are called <em>phantom reads</em>.</p>
</div>
<div class="paragraph">
<p>The SERIALIZABLE isolation level can be used to prevent phantom reads, that requires a reader to obtain a shared lock on the whole range of keys that qualify for the query’s filter to be able to read, and it keeps the lock until the end of the transaction.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 1</span>
<span class="c1">-- set the transaction isolation level to SERIALIZABLE, open a transaction, and query all products with category 1</span>
<span class="k">SET</span> <span class="n">TRANSACTION</span> <span class="k">ISOLATION</span> <span class="k">LEVEL</span> <span class="k">SERIALIZABLE</span><span class="p">;</span>

<span class="k">BEGIN</span> <span class="n">TRAN</span>
  <span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">productname</span><span class="p">,</span> <span class="n">categoryid</span><span class="p">,</span> <span class="n">unitprice</span>
  <span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">WHERE</span> <span class="n">categoryid</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 2</span>
<span class="c1">-- In all isolation levels that are lower than SERIALIZABLE, such an attempt would be successful.</span>
<span class="c1">-- In the SERIALIZABLE isolation level, the attempt is blocked.</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
    <span class="p">(</span><span class="n">productname</span><span class="p">,</span> <span class="n">supplierid</span><span class="p">,</span> <span class="n">categoryid</span><span class="p">,</span> <span class="n">unitprice</span><span class="p">,</span> <span class="n">discontinued</span><span class="p">)</span>
<span class="k">VALUES</span><span class="p">(</span><span class="s1">'Product ABCDE'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">20</span><span class="p">.</span><span class="mi">00</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">sid               restype dbid dbname res            resid             mode     status
55 (Connection 1) KEY     6    TSQLV6 (61a06abd401c) 72057594046251008 RangeS-S GRANT
64 (Connection 2) KEY     6    TSQLV6 (61a06abd401c) 72057594046251008 X        WAIT</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 1</span>
<span class="c1">-- get the same output as before, with no phantoms</span>
  <span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">productname</span><span class="p">,</span> <span class="n">categoryid</span><span class="p">,</span> <span class="n">unitprice</span>
  <span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">WHERE</span> <span class="n">categoryid</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">COMMIT</span> <span class="n">TRAN</span><span class="p">;</span> <span class="c1">-- transaction is committed and the shared key-range lock is released</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="multi-version-concurrency-control">12.2.5. Multi-Version Concurrency Control</h4>
<div class="paragraph">
<p>With the row-versioning technology, SQL Server can store previous versions of committed rows in a version store.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>If the Accelerated Database Recovery (ADR) feature is not enabled in the database, the version store resides in the tempdb database.</p>
</li>
<li>
<p>If ADR is enabled, the version store resides in the user database in question.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>SQL Server supports two isolation levels, called SNAPSHOT and READ COMMITTED SNAPSHOT, that are based on this row-versioning technology.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The SNAPSHOT isolation level is logically similar to the SERIALIZABLE isolation level in terms of the types of consistency problems that can or cannot happen.</p>
</li>
<li>
<p>The READ COMMITTED SNAPSHOT isolation level is similar to the READ COMMITTED isolation level.</p>
</li>
<li>
<p>Readers using isolation levels based on row versioning do not acquire shared locks, so they don’t wait when the requested data is exclusively locked.</p>
<div class="ulist">
<ul>
<li>
<p>In other words, <em>readers don’t block writers and writers don’t block readers</em>.</p>
</li>
<li>
<p>Readers still get levels of consistency similar to SERIALIZABLE and READ COMMITTED.</p>
</li>
<li>
<p>SQL Server provides readers with an older version of the row if the current version is not the one they are supposed to see.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Note that if enabling any of the row-versioning-based isolation levels (which are enabled in Azure SQL Database by default), the DELETE and UPDATE statements need to copy the version of the row before the change to the version store (Copy-on-Write); INSERT statements don’t need to write anything to the version store, because no earlier version of the row exists.</p>
</div>
<div class="paragraph">
<p>But it’s important to be aware that enabling any of the isolation levels that are based on row versioning might have a negative impact on the performance of updates and deletes.</p>
</div>
<div class="paragraph">
<p>The performance of readers usually improves, sometimes dramatically, because they do not acquire shared locks and don’t need to wait when data is exclusively locked or its version is not the expected one.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sect4">
<h5 id="snapshot">12.2.5.1. SNAPSHOT</h5>
<div class="paragraph">
<p>The SNAPSHOT isolation level, relies on row versioning instead of using shared locks, guarantees the reader to get the last committed version of the row that was available when the transaction started to get committed reads and repeatable reads, and not phantom reads.</p>
</div>
<div class="paragraph">
<p>To work with the SNAPSHOT isolation level in a SQL Server box product instance (enabled by default in Azure SQL Database), first enable the option at the database level by running the following code in any open query window:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">ALTER</span> <span class="k">DATABASE</span> <span class="n">TSQLV6</span> <span class="k">SET</span> <span class="n">ALLOW_SNAPSHOT_ISOLATION</span> <span class="k">ON</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Open a transaction, update the price of product <code>2</code> by adding <code>1.00</code> to its current price of <code>19.00</code>, and show the new price.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 1</span>
<span class="k">BEGIN</span> <span class="n">TRAN</span><span class="p">;</span>

  <span class="k">UPDATE</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
    <span class="k">SET</span> <span class="n">unitprice</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">00</span>
  <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

  <span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
  <span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">2	20.00</span></code></pre>
</div>
</div>
</li>
<li>
<p>If someone begins a transaction using the SNAPSHOT isolation level, that session can request the version before the update.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 2</span>
<span class="k">SET</span> <span class="n">TRANSACTION</span> <span class="k">ISOLATION</span> <span class="k">LEVEL</span> <span class="n">SNAPSHOT</span><span class="p">;</span>

<span class="k">BEGIN</span> <span class="n">TRAN</span><span class="p">;</span>
  <span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
  <span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">2	19.00</span></code></pre>
</div>
</div>
</li>
<li>
<p>If a transaction were under the SERIALIZABLE isolation level, the query would be blocked.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 3</span>
<span class="k">SET</span> <span class="n">TRANSACTION</span> <span class="k">ISOLATION</span> <span class="k">LEVEL</span> <span class="k">READ</span> <span class="k">COMMITTED</span><span class="p">;</span> <span class="c1">-- by default in SQL Server</span>
<span class="k">SET</span> <span class="n">LOCK_TIMEOUT</span> <span class="mi">5000</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
<span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
<span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Msg 1222, Level 16, State 51, Line 5
Lock request time out period exceeded.</span></code></pre>
</div>
</div>
</li>
<li>
<p>Go back to Connection 1, and commit the transaction.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- at this point, the current version of the row with the price of 20.00 is a committed version.</span>
<span class="k">COMMIT</span> <span class="n">TRAN</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>Go back to Connection 2, and run the following code.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- still get the last committed version of the row that was available when the transaction started (with a price of 19.00).</span>
  <span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
  <span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="k">COMMIT</span> <span class="n">TRAN</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">2	19.00</span></code></pre>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="conflict-detection">12.2.5.2. Conflict Detection</h5>
<div class="paragraph">
<p>The SNAPSHOT isolation level prevents update conflicts, but unlike the REPEATABLE READ and SERIALIZABLE isolation levels that do so by generating a deadlock, the SNAPSHOT isolation level generates a more specific error, indicating that an update conflict was detected by examining the version store to figure out whether another transaction modified the data between a read and a write that took place in a transaction.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Set the transaction isolation level to SNAPSHOT, open a transaction, and read the row for product <code>2</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 1</span>
<span class="k">SET</span> <span class="n">TRANSACTION</span> <span class="k">ISOLATION</span> <span class="k">LEVEL</span> <span class="n">SNAPSHOT</span><span class="p">;</span>

<span class="k">BEGIN</span> <span class="n">TRAN</span><span class="p">;</span>
  <span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
  <span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">2	19.00</span></code></pre>
</div>
</div>
</li>
<li>
<p>Update the price of the product queried previously to <code>20.00</code>, and commit the transaction.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 1</span>
  <span class="k">UPDATE</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
    <span class="k">SET</span> <span class="n">unitprice</span> <span class="o">=</span> <span class="mi">20</span><span class="p">.</span><span class="mi">00</span>
  <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="k">COMMIT</span> <span class="n">TRAN</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>No other transaction modified the row between the read, calculation, and write; therefore, there was no update conflict and SQL Server allowed the update to take place.</p>
</div>
</li>
<li>
<p>Restore the price of product <code>2</code> back to <code>19.00</code>:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">UPDATE</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">SET</span> <span class="n">unitprice</span> <span class="o">=</span> <span class="mi">19</span><span class="p">.</span><span class="mi">00</span>
<span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>Next, run the following code in Connection 1, again, to open a transaction, and read the row for product <code>2</code>:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 1</span>
<span class="k">BEGIN</span> <span class="n">TRAN</span><span class="p">;</span>
  <span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
  <span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>Next, run the following code in Connection 2 to update the price of product <code>2</code> to <code>25.00</code>:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 2</span>
<span class="k">UPDATE</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">SET</span> <span class="n">unitprice</span> <span class="o">=</span> <span class="mi">25</span><span class="p">.</span><span class="mi">00</span>
<span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>Go back to Connection 1, and try to update the price of the product to <code>20.00</code>:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code>UPDATE Production.Products
  SET unitprice = 20.00
WHERE productid = 2;</code></pre>
</div>
</div>
<div class="paragraph">
<p>SQL Server detected that this time another transaction modified the data between the read and write; therefore, it fails the transaction with the following error:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Msg 3960, Level 16, State 2, Line 1
Snapshot isolation transaction aborted due to update conflict. You cannot use snapshot isolation to access table 'Production.Products' directly or indirectly in database 'TSQLV6' to update, delete, or insert the row that has been modified or deleted by another transaction. Retry the transaction or change the isolation level for the update/delete statement.</span></code></pre>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="read-committed-snapshot">12.2.5.3. READ COMMITTED SNAPSHOT</h5>
<div class="paragraph">
<p>The READ COMMITTED SNAPSHOT isolation level is also based on row versioning, but differs from the SNAPSHOT isolation level in that instead of providing a reader with a <em>transaction-level consistent view</em> of the data, it provides the reader with a <em>statement-level consistent view</em> of the data, and also does not detect update conflicts.</p>
</div>
<div class="paragraph">
<p>To make a reader to acquire a shared lock under READ COMMITTED SNAPSHOT, add a table hint called READCOMMITTEDLOCK to the SELECT statements, as in <code>SELECT * FROM dbo.T1 WITH (READCOMMITTEDLOCK)</code>.</p>
</div>
<div class="paragraph">
<p>To enable the use of the READ COMMITTED SNAPSHOT isolation level in a SQL Server box product (enabled by default in Azure SQL Database), turn on a database option called READ_COMMITTED_SNAPSHOT.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">ALTER</span> <span class="k">DATABASE</span> <span class="n">TSQLV6</span> <span class="k">SET</span> <span class="n">READ_COMMITTED_SNAPSHOT</span> <span class="k">ON</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
Unlike the SNAPSHOT isolation level, this flag changes the meaning, or semantics, of the READ COMMITTED isolation level to READ COMMITTED SNAPSHOT, which means that when this database flag is turned on, unless explicitly changing the session’s isolation level, READ COMMITTED SNAPSHOT is the default.
</td>
</tr>
</table>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Run the following code in Connection 1 to open a transaction, update the row for product <code>2</code>, and read the row, leaving the transaction open:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 1</span>
<span class="k">BEGIN</span> <span class="n">TRAN</span><span class="p">;</span>

<span class="k">UPDATE</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">SET</span> <span class="n">unitprice</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">00</span>
<span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
<span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
<span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">2	20.00</span></code></pre>
</div>
</div>
</li>
<li>
<p>In Connection 2, open a transaction and read the row for product 2, leaving the transaction open:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 2</span>
<span class="k">BEGIN</span> <span class="n">TRAN</span><span class="p">;</span>

  <span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
  <span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">2	19.00</span></code></pre>
</div>
</div>
</li>
<li>
<p>Run the following code in Connection 1 to commit the transaction:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 1</span>
<span class="k">COMMIT</span> <span class="n">TRAN</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>Now run the code in Connection 2 to read the row for product <code>2</code> again, and commit the transaction:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 2</span>
<span class="c1">-- get the last committed version of the row that was available when the statement started (20.00) and not when the transaction started (19.00)</span>
  <span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
  <span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="k">COMMIT</span> <span class="n">TRAN</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">2	19.00</span></code></pre>
</div>
</div>
</li>
<li>
<p>Close all connections. Open a new connection, and run the following code to disable the isolation levels that are based on row versioning in the <code>TSQLV6</code> database:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">ALTER</span> <span class="k">DATABASE</span> <span class="n">TSQLV6</span> <span class="k">SET</span> <span class="n">ALLOW_SNAPSHOT_ISOLATION</span> <span class="k">OFF</span><span class="p">;</span>
<span class="k">ALTER</span> <span class="k">DATABASE</span> <span class="n">TSQLV6</span> <span class="k">SET</span> <span class="n">READ_COMMITTED_SNAPSHOT</span> <span class="k">OFF</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="deadlocks">12.3. Deadlocks</h3>
<div class="paragraph">
<p>A deadlock is a situation in which two or more sessions block each other.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>An example of a two- session deadlock is when session A blocks session B and session B blocks session A.</p>
</li>
<li>
<p>An example of a deadlock involving more than two sessions is when session A blocks session B, session B blocks session C, and session C blocks session A.</p>
</li>
<li>
<p>In any of these cases, SQL Server detects the deadlock and intervenes by terminating one of the transactions.</p>
</li>
<li>
<p>If SQL Server did not intervene, the sessions involved would remain deadlocked forever.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Unless otherwise specified (DEADLOCK_PRIORITY), SQL Server chooses to terminate the transaction that did the least work (based on the activity written to the transaction log), because rolling that transaction’s work back is the cheapest option.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Run the following code in Connection 1 to open a new transaction, update a row in the <code>Production.Products</code> table for product <code>2</code>, and leave the transaction open:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 1</span>
<span class="k">BEGIN</span> <span class="n">TRAN</span><span class="p">;</span>

  <span class="k">UPDATE</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
    <span class="k">SET</span> <span class="n">unitprice</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">00</span>
  <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>Run the following code in Connection 2 to open a new transaction, update a row in the <code>Sales.OrderDetails</code> table for product <code>2</code>, and leave the transaction open:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 2</span>
<span class="k">BEGIN</span> <span class="n">TRAN</span><span class="p">;</span>

  <span class="k">UPDATE</span> <span class="n">Sales</span><span class="p">.</span><span class="n">OrderDetails</span>
    <span class="k">SET</span> <span class="n">unitprice</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">00</span>
  <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>Run the following code in Connection 1 to attempt to query the rows for product <code>2</code> in the <code>Sales.OrderDetails</code> table, and commit the transaction:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 1</span>
<span class="c1">-- needs a shared lock to be able to perform its read, but blocked by Connection 2</span>
  <span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
  <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">OrderDetails</span>
  <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="k">COMMIT</span> <span class="n">TRAN</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>Next, run the following code in Connection 2 to attempt to query the row for product <code>2</code> in the <code>Production.Products</code> table and commit the transaction:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Connection 2</span>
<span class="c1">-- needs a shared lock to be able to perform its read, but blocked by Connection 1</span>
  <span class="k">SELECT</span> <span class="n">productid</span><span class="p">,</span> <span class="n">unitprice</span>
  <span class="k">FROM</span> <span class="n">Production</span><span class="p">.</span><span class="n">Products</span>
  <span class="k">WHERE</span> <span class="n">productid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="k">COMMIT</span> <span class="n">TRAN</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>At this point, each of the sessions blocks the other —results a deadlock. SQL Server identifies the deadlock (typically within a few seconds), chooses one of the sessions involved as the deadlock victim, and terminates its transaction with the following error:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Msg 1205, Level 13, State 51, Line 3
Transaction (Process ID 57) was deadlocked on lock resources with another process and has been chosen as the deadlock victim. Rerun the transaction.</span></code></pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>Deadlocks are expensive because they involve undoing work that has already been done and then, usually with some error-handling logic, redoing the work.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Obviously, the longer the transactions are, the longer locks are kept, increasing the probability of deadlocks.</p>
<div class="ulist">
<ul>
<li>
<p>Keep transactions as short as possible, taking activities out of the transaction that aren’t logically supposed to be part of the same unit of work. For example, don’t use transactions that require user input to finish!</p>
</li>
</ul>
</div>
</li>
<li>
<p>One typical deadlock, also called a <em>deadly embrace deadlock</em> (e.g., the above example), happens when transactions access resources in inverse order.</p>
<div class="ulist">
<ul>
<li>
<p>By swapping the order in one of the transactions, you can prevent this type of deadlock from happening—assuming that it makes no logical difference to your application.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Deadlocks often also happen when there is no real logical conflict (for example, trying to access the same rows), because of a lack of good indexing to support query filters.</p>
<div class="paragraph">
<p>For example, suppose both statements in the transaction in Connection 2 filtered product 5.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Now that the statements in Connection 1 handle product 2 and the statements in Connection 2 handle product 5, there shouldn’t be any conflict.</p>
</li>
<li>
<p>However, if indexes aren&#8217;t defined on the <code>productid</code> column in the tables to support the filter, SQL Server has to scan (and lock) all rows in the table, that is, of course, can lead to a deadlock.</p>
<div class="paragraph">
<p>While scanning the entire table, both connections might attempt to acquire locks on the same or overlapping table pages, leading to a deadlock situation even though they are working with different product data.</p>
</div>
</li>
<li>
<p>In short, good index design can help mitigate the occurrences of deadlocks that have no real logical conflict.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Another option to consider to mitigate deadlock occurrences is the choice of isolation level.</p>
<div class="ulist">
<ul>
<li>
<p>The SELECT statements in the example needed shared locks because they ran under the READ COMMITTED isolation level.</p>
</li>
<li>
<p>If using the READ COMMITTED SNAPSHOT isolation level, readers will not need shared locks, and deadlocks that evolve because of the involvement of shared locks can be eliminated.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="programmable-objects">13. Programmable Objects</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Programmable objects in SQL Server are reusable code blocks that extend the capabilities of the database beyond basic data storage and retrieval.</p>
</div>
<div class="sect2">
<h3 id="variables">13.1. Variables</h3>
<div class="paragraph">
<p>A variable is used to temporarily store data values for later use in the same batch in which they were declared, and a batch is one or more T-SQL statements sent to Microsoft SQL Server for execution as a single unit.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Use a <code>DECLARE</code> statement to declare one or more variables, and use a <code>SET</code> statement to assign a value to a single variable.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- declares two variables called @i and @j of INT data type and assigns it the value 10 and 20</span>
<span class="k">DECLARE</span> <span class="o">@</span><span class="n">i</span> <span class="k">AS</span> <span class="nb">INT</span><span class="p">,</span> <span class="o">@</span><span class="n">j</span> <span class="k">AS</span> <span class="nb">INT</span><span class="p">;</span>

<span class="c1">-- SET statement can operate on only one variable at a time</span>
<span class="k">SET</span> <span class="o">@</span><span class="n">i</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="k">SEt</span> <span class="o">@</span><span class="n">j</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>Alternatively, a variable can be declared and initialized in the same statement, like this:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DECLARE</span> <span class="o">@</span><span class="n">i</span> <span class="k">AS</span> <span class="nb">INT</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="o">@</span><span class="n">j</span> <span class="k">AS</span> <span class="nb">INT</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>When assign a value to a scalar variable, the value must be the result of a scalar expression.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DECLARE</span> <span class="o">@</span><span class="n">empname</span> <span class="k">AS</span> <span class="n">NVARCHAR</span><span class="p">(</span><span class="mi">61</span><span class="p">);</span>

<span class="c1">-- a scalar subquery</span>
<span class="k">SET</span> <span class="o">@</span><span class="n">empname</span> <span class="o">=</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">firstname</span> <span class="o">+</span> <span class="n">N</span><span class="s1">' '</span> <span class="o">+</span> <span class="n">lastname</span>
                <span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span>
                <span class="k">WHERE</span> <span class="n">empid</span> <span class="o">=</span> <span class="mi">3</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- a scalar subquery fails at run time if it returns more than one value</span>
<span class="k">DECLARE</span> <span class="o">@</span><span class="n">empname</span> <span class="k">AS</span> <span class="n">NVARCHAR</span><span class="p">(</span><span class="mi">61</span><span class="p">);</span>

<span class="k">SET</span> <span class="o">@</span><span class="n">empname</span> <span class="o">=</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">firstname</span> <span class="o">+</span> <span class="n">N</span><span class="s1">' '</span> <span class="o">+</span> <span class="n">lastname</span>
                <span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span>
                <span class="k">WHERE</span> <span class="n">mgrid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Msg 512, Level 16, State 1, Line 2
</span><span class="gp">Subquery returned more than 1 value. This is not permitted when the subquery follows =, !=, &lt;, &lt;= , &gt;</span>, <span class="o">&gt;=</span> or when the subquery is used as an expression.</code></pre>
</div>
</div>
</li>
<li>
<p>T-SQL also supports a nonstandard assignment <code>SELECT</code> statement to query data and assign multiple values obtained from the same row to multiple variables by using a single statement.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DECLARE</span> <span class="o">@</span><span class="n">firstname</span> <span class="k">AS</span> <span class="n">NVARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="o">@</span><span class="n">lastname</span> <span class="k">AS</span> <span class="n">NVARCHAR</span><span class="p">(</span><span class="mi">40</span><span class="p">);</span>

<span class="c1">-- if the query has more than one qualifying row, the values in the variables are those from the last row that SQL Server happened to access.</span>
<span class="k">SELECT</span>
  <span class="o">@</span><span class="n">firstname</span> <span class="o">=</span> <span class="n">firstname</span><span class="p">,</span>
  <span class="o">@</span><span class="n">lastname</span>  <span class="o">=</span> <span class="n">lastname</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span>
<span class="k">WHERE</span> <span class="n">empid</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="o">@</span><span class="n">firstname</span> <span class="k">AS</span> <span class="n">firstname</span><span class="p">,</span> <span class="o">@</span><span class="n">lastname</span> <span class="k">AS</span> <span class="n">lastname</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="batchs">13.2. Batchs</h3>
<div class="paragraph">
<p>A batch is one or more T-SQL statements sent by a client application to SQL Server for execution as a single unit.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
A transaction is an atomic unit of work. A batch can have multiple transactions, and a transaction can be submitted in parts as multiple batches.
</td>
</tr>
</table>
</div>
<div class="ulist NOTE">
<ul class="NOTE">
<li>
<p>Client application programming interfaces (APIs) such as ADO.NET provide methods for submitting a batch of code to SQL Server for execution.</p>
</li>
<li>
<p>SQL Server utilities such as SQL Server Management Studio (SSMS), Azure Data Studio (ADS), SQLCMD, and OSQL provide a client tool command called <code>GO</code> that signals the end of a batch.</p>
</li>
</ul>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
Note that the <code>GO</code> command is a client tool command and not a T-SQL server command, and do not terminate the <code>GO</code> command with a semicolon.
</td>
</tr>
</table>
</div>
<div class="ulist">
<ul>
<li>
<p>A batch is a set of commands that are parsed and executed as a unit.</p>
<div class="ulist">
<ul>
<li>
<p>If the parsing is successful, SQL Server then attempts to execute the batch.</p>
</li>
<li>
<p>In the event of a syntax error in the batch, the whole batch is not submitted to SQL Server for execution.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Valid batch</span>
<span class="n">PRINT</span> <span class="s1">'First batch'</span><span class="p">;</span>
<span class="n">USE</span> <span class="n">TSQLV6</span><span class="p">;</span>
<span class="k">GO</span>
<span class="c1">-- Invalid batch</span>
<span class="n">PRINT</span> <span class="s1">'Second batch'</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="n">custid</span> <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="n">orderid</span> <span class="n">FOM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span><span class="p">;</span>
<span class="k">GO</span>
<span class="c1">-- Valid batch</span>
<span class="n">PRINT</span> <span class="s1">'Third batch'</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="n">empid</span> <span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">First batch
Msg 102, Level 15, State 1, Line 8
Incorrect syntax near 'Sales'.
Third batch</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>A variable is local to the batch in which it’s defined, that is, it can’t be referred to in another batch.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DECLARE</span> <span class="o">@</span><span class="n">i</span> <span class="k">AS</span> <span class="nb">INT</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="c1">-- Succeeds</span>
<span class="n">PRINT</span> <span class="o">@</span><span class="n">i</span><span class="p">;</span>
<span class="k">GO</span>

<span class="c1">-- Fails</span>
<span class="n">PRINT</span> <span class="o">@</span><span class="n">i</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">10
Msg 137, Level 15, State 2, Line 6
Must declare the scalar variable "@i".</span></code></pre>
</div>
</div>
</li>
<li>
<p>The CREATE statements cannot be combined with other statements in the same batch.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- CREATE DEFAULT, CREATE FUNCTION, CREATE PROCEDURE, CREATE RULE, CREATE SCHEMA, CREATE TRIGGER, and CREATE VIEW</span>
<span class="k">DROP</span> <span class="k">VIEW</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">Sales</span><span class="p">.</span><span class="n">MyView</span><span class="p">;</span>
<span class="c1">-- GO -- To get around the problem, add a GO command here</span>

<span class="k">CREATE</span> <span class="k">VIEW</span> <span class="n">Sales</span><span class="p">.</span><span class="n">MyView</span>
<span class="k">AS</span>
<span class="k">SELECT</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">orderyear</span><span class="p">,</span> <span class="k">COUNT</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="n">numorders</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">);</span>
<span class="k">GO</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Msg 111, Level 15, State 1, Line 3
'CREATE VIEW' must be the first statement in a query batch.</span></code></pre>
</div>
</div>
</li>
<li>
<p>A batch is a unit of resolution (also known as binding), that means that checking the existence of objects and columns happens at the batch level.</p>
<div class="paragraph">
<p>When applying schema changes to an object and try to manipulate the object data in the same batch, SQL Server might not be aware of the schema changes yet and fail the data-manipulation statement with a resolution error.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">(</span><span class="n">col1</span> <span class="nb">INT</span><span class="p">);</span>
<span class="k">GO</span>

<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span> <span class="k">ADD</span> <span class="n">col2</span> <span class="nb">INT</span><span class="p">;</span>
<span class="c1">-- GO -- To get around the problem, add a GO command here</span>
<span class="k">SELECT</span> <span class="n">col1</span><span class="p">,</span> <span class="n">col2</span> <span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">;</span> <span class="c1">-- Invalid column name 'col2'.</span>
<span class="k">GO</span>

<span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <code>GO</code> command is not really a T-SQL command; it’s actually a command used by SQL Server’s client tools, such as SSMS, to denote the end of a batch. It also supports an argument indicating how many times you want to execute the batch.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">(</span><span class="n">col1</span> <span class="nb">INT</span> <span class="k">IDENTITY</span><span class="p">);</span>
<span class="k">GO</span>

<span class="k">SET</span> <span class="n">NOCOUNT</span> <span class="k">ON</span><span class="p">;</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span> <span class="k">DEFAULT</span> <span class="k">VALUES</span><span class="p">;</span>
<span class="k">GO</span> <span class="mi">100</span>

<span class="k">SELECT</span> <span class="k">SUM</span><span class="p">(</span><span class="n">col1</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">;</span> <span class="c1">-- (1 + 100) * 100 / 2 = 5050</span>
<span class="k">GO</span>

<span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="flow-elements-if-and-while">13.3. Flow Elements: IF and WHILE</h3>
<div class="paragraph">
<p>T-SQL provides basic forms of control with flow elements to control the flow of the code, including the <code>IF . . . ELSE</code> element and the <code>WHILE</code> element.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>IF . . . ELSE</code> element is used to control the flow of a code based on the result of a predicate.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="n">IF</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">SYSDATETIME</span><span class="p">())</span> <span class="o">&lt;&gt;</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">DATEADD</span><span class="p">(</span><span class="k">day</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">SYSDATETIME</span><span class="p">()))</span>
<span class="c1">-- a statement or statement block that is executed if the predicate is TRUE</span>
   <span class="n">PRINT</span> <span class="s1">'Today is the last day of the year.'</span><span class="p">;</span>
<span class="c1">-- optionally a statement or statement block that is executed if the predicate is FALSE or UNKNOWN.</span>
<span class="k">ELSE</span>
<span class="k">BEGIN</span> <span class="c1">-- mark the boundaries of a statement block with the BEGIN and END keywords</span>
  <span class="n">IF</span> <span class="k">MONTH</span><span class="p">(</span><span class="n">SYSDATETIME</span><span class="p">())</span> <span class="o">&lt;&gt;</span> <span class="k">MONTH</span><span class="p">(</span><span class="n">DATEADD</span><span class="p">(</span><span class="k">day</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">SYSDATETIME</span><span class="p">()))</span>
    <span class="n">PRINT</span> <span class="s1">'Today is the last day of the month but not the last day of the year.'</span><span class="p">;</span>
  <span class="k">ELSE</span>
    <span class="n">PRINT</span> <span class="s1">'Today is not the last day of the month.'</span><span class="p">;</span>
<span class="k">END</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DECLARE</span> <span class="o">@</span><span class="n">score</span> <span class="k">AS</span> <span class="nb">INT</span> <span class="o">=</span> <span class="k">CAST</span><span class="p">(</span><span class="n">RAND</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span> <span class="k">AS</span> <span class="nb">INT</span><span class="p">);</span>

<span class="n">IF</span> <span class="o">@</span><span class="n">score</span> <span class="o">&gt;</span> <span class="mi">90</span>
  <span class="n">PRINT</span> <span class="s1">'A'</span><span class="p">;</span>
<span class="k">ELSE</span> <span class="n">IF</span> <span class="o">@</span><span class="n">score</span> <span class="o">&gt;</span> <span class="mi">80</span>
  <span class="n">PRINT</span> <span class="s1">'B'</span><span class="p">;</span>
<span class="k">ELSE</span> <span class="n">IF</span> <span class="o">@</span><span class="n">score</span> <span class="o">&gt;</span> <span class="mi">70</span>
  <span class="n">PRINT</span> <span class="s1">'C'</span><span class="p">;</span>
<span class="k">ELSE</span> <span class="n">IF</span> <span class="o">@</span><span class="n">score</span> <span class="o">&gt;</span> <span class="mi">60</span>
  <span class="n">PRINT</span> <span class="s1">'D'</span><span class="p">;</span>
<span class="k">ELSE</span>
  <span class="n">PRINT</span> <span class="s1">'F'</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- CASE is expression, instead of statement</span>
<span class="k">DECLARE</span> <span class="o">@</span><span class="n">score</span> <span class="k">AS</span> <span class="nb">INT</span> <span class="o">=</span> <span class="k">CAST</span><span class="p">(</span><span class="n">RAND</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span> <span class="k">AS</span> <span class="nb">INT</span><span class="p">);</span>

<span class="k">SELECT</span> <span class="k">CASE</span>
  <span class="k">WHEN</span> <span class="o">@</span><span class="n">score</span> <span class="o">&gt;=</span> <span class="mi">90</span> <span class="k">THEN</span> <span class="s1">'A'</span>
  <span class="k">WHEN</span> <span class="o">@</span><span class="n">score</span> <span class="o">&gt;=</span> <span class="mi">80</span> <span class="k">THEN</span> <span class="s1">'B'</span>
  <span class="k">WHEN</span> <span class="o">@</span><span class="n">score</span> <span class="o">&gt;=</span> <span class="mi">70</span> <span class="k">THEN</span> <span class="s1">'C'</span>
  <span class="k">WHEN</span> <span class="o">@</span><span class="n">score</span> <span class="o">&gt;=</span> <span class="mi">60</span> <span class="k">THEN</span> <span class="s1">'D'</span>
  <span class="k">ELSE</span> <span class="s1">'F'</span>
<span class="k">END</span> <span class="k">AS</span> <span class="n">Grade</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <code>WHILE</code> element executes a statement or statement block repeatedly while the predicate specified after the <code>WHILE</code> keyword is <code>TRUE</code>, otherwise, the loop terminates when the predicate is <code>FALSE</code> or <code>UNKNOWN</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DECLARE</span> <span class="o">@</span><span class="n">i</span> <span class="k">AS</span> <span class="nb">INT</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">WHILE</span> <span class="o">@</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span>
<span class="k">BEGIN</span>
  <span class="k">SET</span> <span class="o">@</span><span class="n">i</span> <span class="o">=</span> <span class="o">@</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
  <span class="n">IF</span> <span class="o">@</span><span class="n">i</span> <span class="o">=</span> <span class="mi">3</span> <span class="k">CONTINUE</span><span class="p">;</span> <span class="c1">-- skip the rest of the activity in the current iteration and evaluate the loop’s predicate again</span>
  <span class="n">PRINT</span> <span class="o">@</span><span class="n">i</span><span class="p">;</span>
  <span class="n">IF</span> <span class="o">@</span><span class="n">i</span> <span class="o">=</span> <span class="mi">7</span> <span class="n">BREAK</span><span class="p">;</span>    <span class="c1">-- break out of the current loop and proceed to execute the statement that appears after the loop’s body</span>
<span class="k">END</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="cursors">13.4. Cursors</h3>
<div class="paragraph">
<p>SQL and T-SQL also support an object called <em>cursor</em> to process rows from a result of a query one at a time and in a requested order.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Primarily, the use of cursors contradicts the fundamental principles of the relational model, which is grounded in set theory.</p>
</li>
<li>
<p>Cursors, due to their record-by-record processing, incur significant overhead compared to set-based operations, resulting in significantly slower execution times even for similar underlying physical processing.</p>
</li>
<li>
<p>Cursor solutions, being imperative, tend to be longer, less readable, and harder to maintain than the declarative set solutions.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Working with a cursor generally involves the following steps:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Declare the cursor based on a query.</p>
</li>
<li>
<p>Open the cursor.</p>
</li>
<li>
<p>Fetch attribute values from the first cursor record into variables.</p>
</li>
<li>
<p>While not reaching the end of the cursor (the value of a function called <code>@@FETCH_STATUS</code> is <code>0</code>), loop through the cursor records.</p>
<div class="paragraph">
<p>In each iteration of the loop, perform the processing needed for the current row, and then fetch the attribute values from the next row into the variables.</p>
</div>
</li>
<li>
<p>Close the cursor.</p>
</li>
<li>
<p>Deallocate the cursor.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DROP</span> <span class="k">VIEW</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">Sales</span><span class="p">.</span><span class="n">CustOrders</span><span class="p">;</span>
<span class="k">GO</span>

<span class="k">CREATE</span> <span class="k">VIEW</span> <span class="n">Sales</span><span class="p">.</span><span class="n">CustOrders</span>
<span class="k">AS</span>
  <span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">O</span><span class="p">.</span><span class="n">custid</span><span class="p">,</span> <span class="n">O</span><span class="p">.</span><span class="n">orderdate</span> <span class="k">AS</span> <span class="n">ordermonth</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">OD</span><span class="p">.</span><span class="n">qty</span><span class="p">)</span> <span class="k">AS</span> <span class="n">qty</span>
  <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span> <span class="k">AS</span> <span class="n">O</span>
  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">Sales</span><span class="p">.</span><span class="n">OrderDetails</span> <span class="k">AS</span> <span class="n">OD</span>
    <span class="k">ON</span> <span class="n">O</span><span class="p">.</span><span class="n">orderid</span> <span class="o">=</span> <span class="n">OD</span><span class="p">.</span><span class="n">orderid</span>
  <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">o</span><span class="p">.</span><span class="n">custid</span><span class="p">,</span> <span class="n">O</span><span class="p">.</span><span class="n">orderdate</span>
<span class="k">GO</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- Suppress messages indicating how many rows were affected</span>
<span class="k">SET</span> <span class="n">NOCOUNT</span> <span class="k">ON</span><span class="p">;</span>

<span class="c1">-- Declare table variable to hold the final result</span>
<span class="k">DECLARE</span> <span class="o">@</span><span class="k">Result</span> <span class="k">AS</span> <span class="k">TABLE</span>
<span class="p">(</span>
  <span class="n">custid</span>     <span class="nb">INT</span><span class="p">,</span>
  <span class="n">ordermonth</span> <span class="nb">DATE</span><span class="p">,</span>
  <span class="n">qty</span>        <span class="nb">INT</span><span class="p">,</span>
  <span class="n">runqty</span>     <span class="nb">INT</span><span class="p">,</span>
  <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">(</span><span class="n">custid</span><span class="p">,</span> <span class="n">ordermonth</span><span class="p">)</span>
<span class="p">);</span>

<span class="c1">-- Declare local variables that are used to store intermediate variables</span>
<span class="k">DECLARE</span>
  <span class="o">@</span><span class="n">custid</span>     <span class="k">AS</span> <span class="nb">INT</span><span class="p">,</span>
  <span class="o">@</span><span class="n">prvcustid</span>  <span class="k">AS</span> <span class="nb">INT</span><span class="p">,</span>
  <span class="o">@</span><span class="n">ordermonth</span> <span class="k">AS</span> <span class="nb">DATE</span><span class="p">,</span>
  <span class="o">@</span><span class="n">qty</span>        <span class="k">AS</span> <span class="nb">INT</span><span class="p">,</span>
  <span class="o">@</span><span class="n">runqty</span>     <span class="k">AS</span> <span class="nb">INT</span><span class="p">;</span>

<span class="c1">-- Step 1: Declare the cursor based on a query</span>
<span class="k">DECLARE</span> <span class="k">C</span> <span class="k">CURSOR</span> <span class="n">FAST_FORWARD</span> <span class="cm">/* read only, forward only */</span> <span class="k">FOR</span>
  <span class="k">SELECT</span> <span class="n">custid</span><span class="p">,</span> <span class="n">ordermonth</span><span class="p">,</span> <span class="n">qty</span>
  <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">CustOrders</span>
  <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">custid</span><span class="p">,</span> <span class="n">ordermonth</span><span class="p">;</span>

<span class="c1">-- Step 2: Open the cursor</span>
<span class="k">OPEN</span> <span class="k">C</span><span class="p">;</span>

<span class="c1">-- Step 3: Fetch attribute values from the first cursor record into variables</span>
<span class="k">FETCH</span> <span class="k">NEXT</span> <span class="k">FROM</span> <span class="k">C</span> <span class="k">INTO</span> <span class="o">@</span><span class="n">custid</span><span class="p">,</span> <span class="o">@</span><span class="n">ordermonth</span><span class="p">,</span> <span class="o">@</span><span class="n">qty</span><span class="p">;</span>

<span class="c1">-- Initialize variables</span>
<span class="k">SELECT</span> <span class="o">@</span><span class="n">prvcustid</span> <span class="o">=</span> <span class="o">@</span><span class="n">custid</span><span class="p">,</span> <span class="o">@</span><span class="n">runqty</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="c1">-- Step 4: Loop through the cursor records while last fetch was</span>
<span class="c1">--         In each iteration:</span>
<span class="c1">--            Reset variables if customer ID changes</span>
<span class="c1">--            Compute current running total and insert into table</span>
<span class="c1">--            Fetch next cursor record</span>
<span class="n">WHILE</span> <span class="o">@@</span><span class="n">FETCH_STATUS</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">BEGIN</span>
  <span class="n">IF</span> <span class="o">@</span><span class="n">custid</span> <span class="o">&lt;&gt;</span> <span class="o">@</span><span class="n">prvcustid</span>
    <span class="k">SELECT</span> <span class="o">@</span><span class="n">prvcustid</span> <span class="o">=</span> <span class="o">@</span><span class="n">custid</span><span class="p">,</span> <span class="o">@</span><span class="n">runqty</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="k">SET</span> <span class="o">@</span><span class="n">runqty</span> <span class="o">=</span> <span class="o">@</span><span class="n">runqty</span> <span class="o">+</span> <span class="o">@</span><span class="n">qty</span><span class="p">;</span>

  <span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">@</span><span class="k">Result</span> <span class="k">VALUES</span><span class="p">(</span><span class="o">@</span><span class="n">custid</span><span class="p">,</span> <span class="o">@</span><span class="n">ordermonth</span><span class="p">,</span> <span class="o">@</span><span class="n">qty</span><span class="p">,</span> <span class="o">@</span><span class="n">runqty</span><span class="p">);</span>

  <span class="k">FETCH</span> <span class="k">NEXT</span> <span class="k">FROM</span> <span class="k">C</span> <span class="k">INTO</span> <span class="o">@</span><span class="n">custid</span><span class="p">,</span> <span class="o">@</span><span class="n">ordermonth</span><span class="p">,</span> <span class="o">@</span><span class="n">qty</span><span class="p">;</span>
<span class="k">END</span><span class="p">;</span>

<span class="c1">-- Step 5: Close the cursor</span>
<span class="k">CLOSE</span> <span class="k">C</span><span class="p">;</span>

<span class="c1">-- Step 6: Deallocate the cursor</span>
<span class="k">DEALLOCATE</span> <span class="k">C</span><span class="p">;</span>

<span class="c1">-- Enable showing messages indicating how many rows were affected</span>
<span class="k">SET</span> <span class="n">NOCOUNT</span> <span class="k">OFF</span><span class="p">;</span>

<span class="c1">-- Query the table variable to return the final result</span>
<span class="k">SELECT</span>
  <span class="n">custid</span><span class="p">,</span>
  <span class="k">CONVERT</span><span class="p">(</span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">7</span><span class="p">),</span> <span class="n">ordermonth</span><span class="p">,</span> <span class="mi">121</span><span class="p">)</span> <span class="k">AS</span> <span class="n">ordermonth</span><span class="p">,</span>
  <span class="n">qty</span><span class="p">,</span>
  <span class="n">runqty</span>
<span class="k">FROM</span> <span class="o">@</span><span class="k">Result</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">custid</span><span class="p">,</span> <span class="n">ordermonth</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- address the same task with a window function</span>
<span class="k">SELECT</span> <span class="n">custid</span><span class="p">,</span> <span class="n">ordermonth</span><span class="p">,</span> <span class="n">qty</span><span class="p">,</span>
  <span class="k">SUM</span><span class="p">(</span><span class="n">qty</span><span class="p">)</span> <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">custid</span>
                <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">ordermonth</span>
                <span class="k">ROWS</span> <span class="n">UNBOUNDED</span> <span class="k">PRECEDING</span><span class="p">)</span> <span class="k">AS</span> <span class="n">runqty</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">CustOrders</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">custid</span><span class="p">,</span> <span class="n">ordermonth</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="temporary-tables">13.5. Temporary Tables</h3>
<div class="paragraph">
<p>Temporary tables are temporary storage structures within a SQL Server database. Unlike permanent tables, they are designed for short-term data storage and have limited lifespans.</p>
</div>
<div class="paragraph">
<p>SQL Server supports three kinds of temporary tables to be more conveniental to work with than permanent tables in such cases: local temporary tables, global temporary tables, and table variables. All three kinds of temporary tables are created in the <em>tempdb</em> database.</p>
</div>
<div class="paragraph">
<p>It&#8217;s crucial to distinguish temporary tables (local, global, table variables) from system-versioned temporal tables.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Temporary Tables: Primarily used for temporary storage within a specific session or batch, often for intermediate results or data manipulation.</p>
</li>
<li>
<p>System-Versioned Temporal Tables: Specifically designed to track the history of data changes over time.</p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="local-temporary-tables">13.5.1. Local Temporary Tables</h4>
<div class="paragraph">
<p>A <em>local temporary table</em> is created by naming it with a single number sign (<code>#</code>) as a prefix, such as <code>#T1</code>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A local temporary table is visible only to the session that created it, in the creating level and all inner levels in the call stack (inner procedures, triggers, and dynamic batches).</p>
</li>
<li>
<p>A local temporary table is destroyed automatically by SQL Server when the creating level in the call stack goes out of scope.</p>
</li>
<li>
<p>A suffix is added to the table name by SQL Server internally that makes it unique in <em>tempdb</em>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="o">#</span><span class="n">MyOrderTotalsByYear</span><span class="p">;</span>
<span class="k">GO</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">#</span><span class="n">MyOrderTotalsByYear</span>
<span class="p">(</span>
  <span class="n">orderyear</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
  <span class="n">qty</span>       <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
<span class="p">);</span>

<span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">#</span><span class="n">MyOrderTotalsByYear</span><span class="p">(</span><span class="n">orderyear</span><span class="p">,</span> <span class="n">qty</span><span class="p">)</span>
  <span class="k">SELECT</span>
    <span class="nb">YEAR</span><span class="p">(</span><span class="n">O</span><span class="p">.</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">orderyear</span><span class="p">,</span>
    <span class="k">SUM</span><span class="p">(</span><span class="n">OD</span><span class="p">.</span><span class="n">qty</span><span class="p">)</span> <span class="k">AS</span> <span class="n">qty</span>
  <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span> <span class="k">AS</span> <span class="n">O</span>
    <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">Sales</span><span class="p">.</span><span class="n">OrderDetails</span> <span class="k">AS</span> <span class="n">OD</span>
      <span class="k">ON</span> <span class="n">OD</span><span class="p">.</span><span class="n">orderid</span> <span class="o">=</span> <span class="n">O</span><span class="p">.</span><span class="n">orderid</span>
  <span class="k">GROUP</span> <span class="k">BY</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">);</span>

<span class="k">SELECT</span> <span class="n">Cur</span><span class="p">.</span><span class="n">orderyear</span><span class="p">,</span> <span class="n">Cur</span><span class="p">.</span><span class="n">qty</span> <span class="k">AS</span> <span class="n">curyearqty</span><span class="p">,</span> <span class="n">Prv</span><span class="p">.</span><span class="n">qty</span> <span class="k">AS</span> <span class="n">prvyearq</span>
<span class="k">FROM</span> <span class="o">#</span><span class="n">MyOrderTotalsByYear</span> <span class="k">AS</span> <span class="n">Cur</span>
  <span class="k">LEFT</span> <span class="k">OUTER</span> <span class="k">JOIN</span> <span class="o">#</span><span class="n">MyOrderTotalsByYear</span> <span class="k">AS</span> <span class="n">Prv</span>
    <span class="k">ON</span> <span class="n">Cur</span><span class="p">.</span><span class="n">orderyear</span> <span class="o">=</span> <span class="n">Prv</span><span class="p">.</span><span class="n">orderyear</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- clean up resources as soon as possible</span>
<span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="o">#</span><span class="n">MyOrderTotalsByYear</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="global-temporary-tables">13.5.2. Global Temporary Tables</h4>
<div class="paragraph">
<p>A <em>global temporary table</em> is created by naming it with a double number sign (<code>##</code>) as a prefix, such as <code>##T1</code>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A global temporary table is visible to all other sessions.</p>
</li>
<li>
<p>A global temporary table is destroyed automatically by SQL Server when the creating session disconnects and there are no active references to the table.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- creates a global temporary table called ##Globals with columns called id and val</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">##</span><span class="n">Globals</span>
<span class="p">(</span>
  <span class="n">id</span>  <span class="n">sysname</span>     <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
  <span class="n">val</span> <span class="n">SQL_VARIANT</span> <span class="k">NOT</span> <span class="k">NULL</span>
<span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- anyone can insert rows into the table.</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">##</span><span class="n">Globals</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span> <span class="k">VALUES</span><span class="p">(</span><span class="n">N</span><span class="s1">'I'</span><span class="p">,</span> <span class="k">CAST</span><span class="p">(</span><span class="mi">10</span> <span class="k">AS</span> <span class="nb">INT</span><span class="p">));</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- anyone can modify and retrieve data from the table.</span>
<span class="k">SELECT</span> <span class="n">val</span> <span class="k">FROM</span> <span class="o">##</span><span class="n">Globals</span> <span class="k">WHERE</span> <span class="n">id</span> <span class="o">=</span> <span class="n">N</span><span class="s1">'I'</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- explicitly destroy the global temporary table</span>
<span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="o">##</span><span class="n">Globals</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="table-variables">13.5.3. Table Variables</h4>
<div class="paragraph">
<p>A table variable is a local, temporary table-like data structure declared within a single batch.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>As with local temporary tables, table variables have a physical presence as a table in the <em>tempdb</em> database.</p>
</li>
<li>
<p>Like local temporary tables, table variables are visible only to the creating session, but because they are variables they have a more limited scope: only the current batch.</p>
</li>
<li>
<p>If an explicit transaction is rolled back, changes made to temporary tables in that transaction are rolled back as well; however, changes made to table variables by statements that completed in the transaction aren’t rolled back.</p>
</li>
<li>
<p>In terms of performance, usually it makes more sense to use table variables with small volumes of data (only a few rows) and to use local temporary tables otherwise.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DECLARE</span> <span class="o">@</span><span class="n">MyOrderTotalsByYear</span> <span class="k">TABLE</span>
<span class="p">(</span>
  <span class="n">orderyear</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
  <span class="n">qty</span>       <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
<span class="p">);</span>

<span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">@</span><span class="n">MyOrderTotalsByYear</span><span class="p">(</span><span class="n">orderyear</span><span class="p">,</span> <span class="n">qty</span><span class="p">)</span>
  <span class="k">SELECT</span>
    <span class="nb">YEAR</span><span class="p">(</span><span class="n">O</span><span class="p">.</span><span class="n">orderdate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">orderyear</span><span class="p">,</span>
    <span class="k">SUM</span><span class="p">(</span><span class="n">OD</span><span class="p">.</span><span class="n">qty</span><span class="p">)</span> <span class="k">AS</span> <span class="n">qty</span>
  <span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span> <span class="k">AS</span> <span class="n">O</span>
    <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">Sales</span><span class="p">.</span><span class="n">OrderDetails</span> <span class="k">AS</span> <span class="n">OD</span>
      <span class="k">ON</span> <span class="n">OD</span><span class="p">.</span><span class="n">orderid</span> <span class="o">=</span> <span class="n">O</span><span class="p">.</span><span class="n">orderid</span>
  <span class="k">GROUP</span> <span class="k">BY</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">);</span>

<span class="k">SELECT</span> <span class="n">Cur</span><span class="p">.</span><span class="n">orderyear</span><span class="p">,</span> <span class="n">Cur</span><span class="p">.</span><span class="n">qty</span> <span class="k">AS</span> <span class="n">curyearqty</span><span class="p">,</span> <span class="n">Prv</span><span class="p">.</span><span class="n">qty</span> <span class="k">AS</span> <span class="n">prvyearqty</span>
<span class="k">FROM</span> <span class="o">@</span><span class="n">MyOrderTotalsByYear</span> <span class="k">AS</span> <span class="n">Cur</span>
  <span class="k">LEFT</span> <span class="k">OUTER</span> <span class="k">JOIN</span> <span class="o">@</span><span class="n">MyOrderTotalsByYear</span> <span class="k">AS</span> <span class="n">Prv</span>
    <span class="k">ON</span> <span class="n">Cur</span><span class="p">.</span><span class="n">orderyear</span> <span class="o">=</span> <span class="n">Prv</span><span class="p">.</span><span class="n">orderyear</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>A table type is a user-defined data structure that defines the schema (columns, data types) of a table to be reused as the table definition of table variables and input parameters of stored procedures and user-defined functions.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- create a table type called dbo.OrderTotalsByYear</span>
<span class="k">DROP</span> <span class="k">TYPE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">OrderTotalsByYear</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TYPE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">OrderTotalsByYear</span> <span class="k">AS</span> <span class="k">TABLE</span>
<span class="p">(</span>
  <span class="n">orderyear</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
  <span class="n">qty</span>       <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
<span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- simply specify dbo.OrderTotalsByYear as the variable’s type</span>
<span class="k">DECLARE</span> <span class="o">@</span><span class="n">MyOrderTotalsByYear</span> <span class="k">AS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">OrderTotalsByYear</span><span class="p">;</span></code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="dynamic-sql">13.6. Dynamic SQL</h3>
<div class="paragraph">
<p>A <em>dynamic SQL</em> in SQL Server is a batch of T-SQL code as a character string that can be executed by using the <code>EXEC</code> command and the <code>sp_executesql</code> stored procedure.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>EXEC</code> (short for <code>EXECUTE</code>) command accepts a regular or Unicode character string in parentheses as input and executes the batch of code within the character string.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DECLARE</span> <span class="o">@</span><span class="k">sql</span> <span class="k">AS</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
<span class="k">SET</span> <span class="o">@</span><span class="k">sql</span> <span class="o">=</span> <span class="s1">'PRINT </span><span class="se">''</span><span class="s1">This message was printed by a dynamic SQL batch</span><span class="se">''</span><span class="s1">'</span>
<span class="k">EXEC</span><span class="p">(</span><span class="o">@</span><span class="k">sql</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <code>sp_executesql</code> stored procedure is an alternative tool to the <code>EXEC</code> command for executing dynamic SQL code.</p>
<div class="ulist">
<ul>
<li>
<p>It’s more secure and more flexible in the sense that it has an interface; that is, it supports input and output parameters.</p>
<div class="paragraph">
<p>In terms of security, parameters that appear in the code cannot be considered part of the code—they can only be considered operands in expressions.</p>
</div>
</li>
<li>
<p>Note that unlike EXEC, <code>sp_executesql</code> supports only Unicode character strings as the input batch of code.</p>
</li>
<li>
<p>The <code>sp_executesql</code> stored procedure can perform better than <code>EXEC</code> because its parameterization aids in reusing cached execution plans, which incur cost when SQL Server needs to create them anew.</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>An <em>execution plan</em> is the physical processing plan SQL Server produces for a query, with the set of instructions describing which objects to access, in what order, which indexes to use, how to access them, which join algorithms to use, and so on.</p>
</li>
<li>
<p>One of the requirements for reusing a previously cached plan is that the query string be the same as the one for which the cached plan was created.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">DECLARE</span> <span class="o">@</span><span class="k">sql</span> <span class="k">AS</span> <span class="n">NVARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>

<span class="k">SET</span> <span class="o">@</span><span class="k">sql</span> <span class="o">=</span> <span class="n">N</span><span class="s1">'SELECT orderid, custid, empid, orderdate
FROM Sales.Orders
WHERE orderid = @orderid;'</span><span class="p">;</span>

<span class="k">EXEC</span> <span class="n">sp_executesql</span>
  <span class="o">@</span><span class="n">stmt</span> <span class="o">=</span> <span class="o">@</span><span class="k">sql</span><span class="p">,</span> <span class="c1">-- a Unicode character string holding the batch of code</span>
  <span class="o">@</span><span class="n">params</span> <span class="o">=</span> <span class="n">N</span><span class="s1">'@orderid AS INT'</span><span class="p">,</span> <span class="c1">-- a Unicode character string holding the declarations of input and output parameters</span>
  <span class="o">@</span><span class="n">orderid</span> <span class="o">=</span> <span class="mi">10248</span><span class="p">;</span> <span class="c1">-- an input parameter called @orderid</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="routines">13.7. Routines</h3>
<div class="paragraph">
<p>Routines are programmable objects that encapsulate code to calculate a result or to execute activity. SQL Server supports three types of routines: user-defined functions, stored procedures, and triggers.</p>
</div>
<div class="sect3">
<h4 id="user-defined-functions">13.7.1. User-defined Functions</h4>
<div class="paragraph">
<p>A user-defined function (UDF) is used to encapsulate logic that calculates something, possibly based on input parameters, and return a result. SQL Server supports scalar and table-valued UDFs.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Scalar UDFs return a single value; table-valued UDFs return a table.</p>
</li>
<li>
<p>Scalar UDFs can appear anywhere in the query where an expression that returns a single value can appear (for example, in the <code>SELECT</code> list).</p>
</li>
<li>
<p>Table UDFs can appear in the <code>FROM</code> clause of a query.</p>
</li>
<li>
<p>UDFs are not allowed to have any side effects, that means UDFs are not allowed to apply any schema or data changes in the database.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">ALTER</span> <span class="k">FUNCTION</span> <span class="n">dbo</span><span class="p">.</span><span class="n">GetNewID</span><span class="p">()</span>
<span class="k">RETURNS</span> <span class="n">UNIQUEIDENTIFIER</span>
<span class="k">AS</span>
<span class="k">BEGIN</span>
  <span class="k">RETURN</span> <span class="n">NEWID</span><span class="p">();</span> <span class="c1">-- Invalid use of a side-effecting operator 'newid' within a function.</span>
<span class="k">END</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- create a UDF called dbo.GetAge that returns the age of a person</span>
<span class="k">DROP</span> <span class="k">FUNCTION</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">GetAge</span><span class="p">;</span>
<span class="k">GO</span>

<span class="k">CREATE</span> <span class="k">OR</span> <span class="k">ALTER</span> <span class="k">FUNCTION</span> <span class="n">dbo</span><span class="p">.</span><span class="n">GetAge</span>
<span class="p">(</span>
  <span class="o">@</span><span class="n">birthdate</span> <span class="k">AS</span> <span class="nb">DATE</span><span class="p">,</span> <span class="c1">-- a specified birth date (@birthdate argument)</span>
  <span class="o">@</span><span class="n">eventdate</span> <span class="k">AS</span> <span class="nb">DATE</span>  <span class="c1">-- a specified event date (@eventdate argument)</span>
<span class="p">)</span>
<span class="k">RETURNS</span> <span class="nb">INT</span>
<span class="k">AS</span>

<span class="k">BEGIN</span>
  <span class="k">RETURN</span> <span class="c1">-- a RETURN clause that returns a value</span>
    <span class="n">DATEDIFF</span><span class="p">(</span><span class="nb">year</span><span class="p">,</span> <span class="o">@</span><span class="n">birthdate</span><span class="p">,</span> <span class="o">@</span><span class="n">eventdate</span><span class="p">)</span>
    <span class="o">-</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="mi">100</span> <span class="o">*</span> <span class="k">MONTH</span><span class="p">(</span><span class="o">@</span><span class="n">eventdate</span><span class="p">)</span> <span class="o">+</span> <span class="k">DAY</span><span class="p">(</span><span class="o">@</span><span class="n">eventdate</span><span class="p">)</span>
              <span class="o">&lt;</span> <span class="mi">100</span> <span class="o">*</span> <span class="k">MONTH</span><span class="p">(</span><span class="o">@</span><span class="n">birthdate</span><span class="p">)</span> <span class="o">+</span> <span class="k">DAY</span><span class="p">(</span><span class="o">@</span><span class="n">birthdate</span><span class="p">)</span>
           <span class="k">THEN</span> <span class="mi">1</span> <span class="k">ELSE</span> <span class="mi">0</span>
      <span class="k">END</span><span class="p">;</span>
<span class="k">END</span><span class="p">;</span>
<span class="k">GO</span>

<span class="c1">-- use a UDF in a query</span>
<span class="k">SELECT</span>
  <span class="n">empid</span><span class="p">,</span> <span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">,</span> <span class="n">birthdate</span><span class="p">,</span>
  <span class="n">dbo</span><span class="p">.</span><span class="n">GetAge</span><span class="p">(</span><span class="n">birthdate</span><span class="p">,</span> <span class="n">SYSDATETIME</span><span class="p">())</span> <span class="k">AS</span> <span class="n">age</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="stored-procedures">13.7.2. Stored Procedures</h4>
<div class="paragraph">
<p>Stored procedures are routines that encapsulate logic with input and output parameters, return result sets of queries, and can have side effects.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Stored procedures encapsulate logic, allowing for centralized modification and ensuring all users utilize the updated implementation.</p>
</li>
<li>
<p>Stored procedures give better control of security.</p>
<div class="ulist">
<ul>
<li>
<p>A user permissions can be granted to execute the procedure without granting the user direct permissions to perform the underlying activities to ensure that all the required validations and auditing always take place.</p>
</li>
<li>
<p>Stored procedures with parameters can help prevent SQL injection.</p>
</li>
</ul>
</div>
</li>
<li>
<p>All error-handling code can be incorporated within a procedure, silently taking corrective action where relevant.</p>
</li>
<li>
<p>Stored procedures give performance benefits.</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>Parameterized queries within stored procedures enhance performance by leveraging cached execution plans.</p>
</li>
<li>
<p>Stored procedures reduce network traffic by minimizing data exchange between the client and server.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- create a stored procedure called Sales.GetCustomerOrders</span>
<span class="k">CREATE</span> <span class="k">OR</span> <span class="k">ALTER</span> <span class="n">PROC</span> <span class="n">Sales</span><span class="p">.</span><span class="n">GetCustomerOrders</span>
  <span class="c1">-- a customer ID (@custid) and a date range (@fromdate and @todate) as inputs</span>
  <span class="o">@</span><span class="n">custid</span>   <span class="k">AS</span> <span class="nb">INT</span><span class="p">,</span>
  <span class="o">@</span><span class="n">fromdate</span> <span class="k">AS</span> <span class="nb">DATETIME</span> <span class="o">=</span> <span class="s1">'19000101'</span><span class="p">,</span> <span class="c1">-- default 19000101</span>
  <span class="o">@</span><span class="n">todate</span>   <span class="k">AS</span> <span class="nb">DATETIME</span> <span class="o">=</span> <span class="s1">'99991231'</span><span class="p">,</span> <span class="c1">-- default 99991231</span>
  <span class="o">@</span><span class="n">numrows</span>  <span class="k">AS</span> <span class="nb">INT</span> <span class="k">OUTPUT</span> <span class="c1">-- the number of affected rows (@numrows) as an output</span>
<span class="k">AS</span>
<span class="k">SET</span> <span class="n">NOCOUNT</span> <span class="k">ON</span><span class="p">;</span> <span class="c1">-- suppress messages indicating affected rows by DML</span>

<span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">orderdate</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">custid</span> <span class="o">=</span> <span class="o">@</span><span class="n">custid</span>
  <span class="k">AND</span> <span class="n">orderdate</span> <span class="o">&gt;=</span> <span class="o">@</span><span class="n">fromdate</span>
  <span class="k">AND</span> <span class="n">orderdate</span> <span class="o">&lt;</span> <span class="o">@</span><span class="n">todate</span><span class="p">;</span>

<span class="k">SET</span> <span class="o">@</span><span class="n">numrows</span> <span class="o">=</span> <span class="o">@@</span><span class="n">rowcount</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- execute the procedure, and absorb the value of the output parameter @numrows in the variable @rc</span>
<span class="k">DECLARE</span> <span class="o">@</span><span class="n">rc</span> <span class="k">AS</span> <span class="nb">INT</span><span class="p">;</span>

<span class="k">EXEC</span> <span class="n">Sales</span><span class="p">.</span><span class="n">GetCustomerOrders</span>
  <span class="o">@</span><span class="n">custid</span>   <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
  <span class="o">@</span><span class="n">fromdate</span> <span class="o">=</span> <span class="s1">'20210101'</span><span class="p">,</span>
  <span class="o">@</span><span class="n">todate</span>   <span class="o">=</span> <span class="s1">'20220101'</span><span class="p">,</span>
  <span class="o">@</span><span class="n">numrows</span>  <span class="o">=</span> <span class="o">@</span><span class="n">rc</span> <span class="k">OUTPUT</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="o">@</span><span class="n">rc</span> <span class="k">AS</span> <span class="n">numrows</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="triggers">13.7.3. Triggers</h4>
<div class="paragraph">
<p>A trigger is a special kind of stored procedure attached to an event—one that cannot be executed explicitly.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>SQL Server supports the association of triggers with two kinds of events: data manipulation events (DML triggers) such as INSERT, and data definition events (DDL triggers) such as CREATE TABLE.</p>
</li>
<li>
<p>A trigger is considered part of the transaction that includes the event that caused the trigger to fire.</p>
</li>
<li>
<p>Triggers in SQL Server fire per statement and not per modified row.</p>
</li>
</ul>
</div>
<div class="sect4">
<h5 id="dml-triggers">13.7.3.1. DML Triggers</h5>
<div class="paragraph">
<p>SQL Server supports two kinds of DML triggers: <em>after</em> and <em>instead of</em>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>An <em>after trigger</em> fires after the event it’s associated with finishes and can be defined only on permanent tables.</p>
</li>
<li>
<p>An <em>instead of trigger</em> fires instead of the event it’s associated with and can be defined on permanent tables and views.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In the trigger’s code, pseudo tables called inserted and deleted that contain the rows that were affected by the modification that caused the trigger to fire can be accessed.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <em>inserted table</em> holds the new image of the affected rows in the case of INSERT and UPDATE actions.</p>
</li>
<li>
<p>The <em>deleted table</em> holds the old image of the affected rows in the case of DELETE and UPDATE actions.</p>
</li>
<li>
<p>In the case of instead of triggers, the inserted and deleted tables contain the rows that were supposed to be affected by the modification that caused the trigger to fire.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- create a table called dbo.T1, and a table called dbo.T1_Audit</span>
<span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1_Audit</span><span class="p">,</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span>
<span class="p">(</span>
  <span class="n">keycol</span>  <span class="nb">INT</span>         <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
  <span class="n">datacol</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span>
<span class="p">);</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1_Audit</span>
<span class="p">(</span>
  <span class="n">audit_lsn</span>  <span class="nb">INT</span>          <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">IDENTITY</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span> <span class="c1">-- audit log serial number</span>
  <span class="n">dt</span>         <span class="n">DATETIME2</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">DEFAULT</span><span class="p">(</span><span class="n">SYSDATETIME</span><span class="p">()),</span>
  <span class="n">login_name</span> <span class="n">sysname</span>      <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">DEFAULT</span><span class="p">(</span><span class="n">ORIGINAL_LOGIN</span><span class="p">()),</span>
  <span class="n">keycol</span>     <span class="nb">INT</span>          <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">datacol</span>    <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>  <span class="k">NOT</span> <span class="k">NULL</span>
<span class="p">);</span>
<span class="k">GO</span>

<span class="c1">-- create the AFTER INSERT trigger trg_T1_insert_audit on the T1 table to audit insertions</span>
<span class="k">CREATE</span> <span class="k">OR</span> <span class="k">ALTER</span> <span class="k">TRIGGER</span> <span class="n">trg_T1_insert_audit</span> <span class="k">ON</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span> <span class="k">AFTER</span> <span class="k">INSERT</span>
<span class="k">AS</span>
<span class="k">SET</span> <span class="n">NOCOUNT</span> <span class="k">ON</span><span class="p">;</span>

<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1_Audit</span><span class="p">(</span><span class="n">keycol</span><span class="p">,</span> <span class="n">datacol</span><span class="p">)</span>
  <span class="k">SELECT</span> <span class="n">keycol</span><span class="p">,</span> <span class="n">datacol</span> <span class="k">FROM</span> <span class="n">inserted</span><span class="p">;</span>
<span class="k">GO</span>

<span class="c1">-- trigger fires after each statement</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">(</span><span class="n">keycol</span><span class="p">,</span> <span class="n">datacol</span><span class="p">)</span> <span class="k">VALUES</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="s1">'a'</span><span class="p">);</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">(</span><span class="n">keycol</span><span class="p">,</span> <span class="n">datacol</span><span class="p">)</span> <span class="k">VALUES</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="s1">'x'</span><span class="p">);</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">(</span><span class="n">keycol</span><span class="p">,</span> <span class="n">datacol</span><span class="p">)</span> <span class="k">VALUES</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="s1">'g'</span><span class="p">);</span>
<span class="k">GO</span>

<span class="k">SELECT</span> <span class="n">audit_lsn</span><span class="p">,</span> <span class="n">dt</span><span class="p">,</span> <span class="n">login_name</span><span class="p">,</span> <span class="n">keycol</span><span class="p">,</span> <span class="n">datacol</span>
<span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1_Audit</span><span class="p">;</span>
<span class="c1">-- 1	2025-01-15 16:03:50.997	sa	10	a</span>
<span class="c1">-- 2	2025-01-15 16:03:51.004	sa	30	x</span>
<span class="c1">-- 3	2025-01-15 16:03:51.008	sa	20	g</span>
<span class="k">GO</span>

<span class="c1">-- cleanup</span>
<span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1_Audit</span><span class="p">,</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">;</span></code></pre>
</div>
</div>
</div>
<div class="sect4">
<h5 id="ddl-triggers">13.7.3.2. DDL Triggers</h5>
<div class="paragraph">
<p>SQL Server supports DDL triggers, which can be used for purposes such as auditing, policy enforcement, and change management.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>SQL Server box product supports the creation of DDL triggers at two scopes, the database scope and the server scope, depending on the scope of the event.</p>
</li>
<li>
<p>Azure SQL Database currently supports only database triggers.</p>
</li>
<li>
<p>SQL Server supports only after DDL triggers; it doesn’t support instead of DDL triggers.</p>
</li>
<li>
<p>Within the trigger, information about the event that caused the trigger to fire can be obtained by querying a function called <code>EVENTDATA</code>, which returns the event information as an XML instance.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- creates the dbo.AuditDDLEvents table to hold the audit information</span>
<span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">AuditDDLEvents</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">AuditDDLEvents</span>
<span class="p">(</span>
  <span class="n">audit_lsn</span>        <span class="nb">INT</span>          <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">IDENTITY</span><span class="p">,</span>
  <span class="n">posttime</span>         <span class="n">DATETIME2</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">eventtype</span>        <span class="n">sysname</span>      <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">loginname</span>        <span class="n">sysname</span>      <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">schemaname</span>       <span class="n">sysname</span>      <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">objectname</span>       <span class="n">sysname</span>      <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">targetobjectname</span> <span class="n">sysname</span>      <span class="k">NULL</span><span class="p">,</span>
  <span class="n">eventdata</span>        <span class="n">XML</span>          <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="k">CONSTRAINT</span> <span class="n">PK_AuditDDLEvents</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">(</span><span class="n">audit_lsn</span><span class="p">)</span>
<span class="p">);</span>
<span class="k">GO</span>

<span class="c1">-- create the trg_audit_ddl_events audit trigger on the database by using the event group DDL_DATABASE_LEVEL_EVENTS</span>
<span class="k">CREATE</span> <span class="k">OR</span> <span class="k">ALTER</span> <span class="k">TRIGGER</span> <span class="n">trg_audit_ddl_events</span>
  <span class="k">ON</span> <span class="k">DATABASE</span> <span class="k">FOR</span> <span class="n">DDL_DATABASE_LEVEL_EVENTS</span>
<span class="k">AS</span>
<span class="k">SET</span> <span class="n">NOCOUNT</span> <span class="k">ON</span><span class="p">;</span>

<span class="k">DECLARE</span> <span class="o">@</span><span class="n">eventdata</span> <span class="k">AS</span> <span class="n">XML</span> <span class="o">=</span> <span class="n">eventdata</span><span class="p">();</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">AuditDDLEvents</span><span class="p">(</span>
  <span class="n">posttime</span><span class="p">,</span> <span class="n">eventtype</span><span class="p">,</span> <span class="n">loginname</span><span class="p">,</span> <span class="n">schemaname</span><span class="p">,</span>
  <span class="n">objectname</span><span class="p">,</span> <span class="n">targetobjectname</span><span class="p">,</span> <span class="n">eventdata</span><span class="p">)</span>
  <span class="k">VALUES</span><span class="p">(</span>
    <span class="o">@</span><span class="n">eventdata</span><span class="p">.</span><span class="n">value</span><span class="p">(</span><span class="s1">'(/EVENT_INSTANCE/PostTime)[1]'</span><span class="p">,</span> <span class="s1">'VARCHAR(23)'</span><span class="p">),</span> <span class="c1">-- XQuery expressions</span>
    <span class="o">@</span><span class="n">eventdata</span><span class="p">.</span><span class="n">value</span><span class="p">(</span><span class="s1">'(/EVENT_INSTANCE/EventType)[1]'</span><span class="p">,</span> <span class="s1">'sysname'</span><span class="p">),</span>
    <span class="o">@</span><span class="n">eventdata</span><span class="p">.</span><span class="n">value</span><span class="p">(</span><span class="s1">'(/EVENT_INSTANCE/LoginName)[1]'</span><span class="p">,</span> <span class="s1">'sysname'</span><span class="p">),</span>
    <span class="o">@</span><span class="n">eventdata</span><span class="p">.</span><span class="n">value</span><span class="p">(</span><span class="s1">'(/EVENT_INSTANCE/SchemaName)[1]'</span><span class="p">,</span> <span class="s1">'sysname'</span><span class="p">),</span>
    <span class="o">@</span><span class="n">eventdata</span><span class="p">.</span><span class="n">value</span><span class="p">(</span><span class="s1">'(/EVENT_INSTANCE/ObjectName)[1]'</span><span class="p">,</span> <span class="s1">'sysname'</span><span class="p">),</span>
    <span class="o">@</span><span class="n">eventdata</span><span class="p">.</span><span class="n">value</span><span class="p">(</span><span class="s1">'(/EVENT_INSTANCE/TargetObjectName)[1]'</span><span class="p">,</span> <span class="s1">'sysname'</span><span class="p">),</span>
    <span class="o">@</span><span class="n">eventdata</span><span class="p">);</span>
<span class="k">GO</span>

<span class="c1">-- test the trigger</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">(</span><span class="n">col1</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">);</span>
<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span> <span class="k">ADD</span> <span class="n">col2</span> <span class="nb">INT</span> <span class="k">NULL</span><span class="p">;</span>
<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span> <span class="k">ALTER</span> <span class="k">COLUMN</span> <span class="n">col2</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="n">NONCLUSTERED</span> <span class="k">INDEX</span> <span class="n">idx1</span> <span class="k">ON</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">(</span><span class="n">col2</span><span class="p">);</span>
<span class="k">GO</span>

<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">dbo</span><span class="p">.</span><span class="n">AuditDDLEvents</span><span class="p">;</span>
<span class="k">GO</span>

<span class="c1">-- cleanup</span>
<span class="k">DROP</span> <span class="k">TRIGGER</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">trg_audit_ddl_events</span> <span class="k">ON</span> <span class="k">DATABASE</span><span class="p">;</span>
<span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">AuditDDLEvents</span><span class="p">,</span> <span class="n">dbo</span><span class="p">.</span><span class="n">T1</span><span class="p">;</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="error-handling-try-catch">13.8. Error Handling: TRY-CATCH</h3>
<div class="paragraph">
<p>The <code>TRY. . .CATCH</code> construct in SQL Server handles errors by placing the usual T-SQL code in a <code>TRY</code> block and placing all the error-handling code in the adjacent <code>CATCH</code> block.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>If the <code>TRY</code> block has no error, the <code>CATCH</code> block is simply skipped.</p>
</li>
<li>
<p>If the <code>TRY</code> block has an error, control is passed to the corresponding <code>CATCH</code> block.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">BEGIN</span> <span class="n">TRY</span>   <span class="c1">-- TRY block (between the BEGIN TRY and END TRY keywords)</span>
  <span class="n">PRINT</span> <span class="mi">10</span><span class="o">/</span><span class="mi">0</span><span class="p">;</span>
  <span class="n">PRINT</span> <span class="s1">'No error'</span><span class="p">;</span>
<span class="k">END</span> <span class="n">TRY</span>
<span class="k">BEGIN</span> <span class="n">CATCH</span> <span class="c1">-- CATCH block (between the BEGIN CATCH and END CATCH keywords)</span>
  <span class="n">PRINT</span> <span class="s1">'    Error Message : '</span> <span class="o">+</span> <span class="n">ERROR_MESSAGE</span><span class="p">();</span>
  <span class="n">PRINT</span> <span class="s1">'    Error Line    : '</span> <span class="o">+</span> <span class="k">CAST</span><span class="p">(</span><span class="n">ERROR_LINE</span><span class="p">()</span> <span class="k">AS</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
<span class="k">END</span> <span class="n">CATCH</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>SQL Server also provides a set of functions to get information about the error.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>ERROR_NUMBER</code> function returns an integer with the number of the error.</p>
</li>
<li>
<p>The <code>ERROR_MESSAGE</code> function returns error-message text.</p>
<div class="paragraph">
<p>To get the list of error numbers and messages, query the <code>sys.messages</code> catalog view.</p>
</div>
</li>
<li>
<p>The <code>ERROR_SEVERITY</code> and <code>ERROR_STATE</code> functions return the error severity and state.</p>
</li>
<li>
<p>The <code>ERROR_LINE</code> function returns the line number in the code where the error happened.</p>
</li>
<li>
<p>The <code>ERROR_PROCEDURE</code> function returns the name of the procedure in which the error happened and returns <code>NULL</code> if the error did not happen within a procedure.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- create a table called dbo.Employees</span>
<span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span>
<span class="p">(</span>
  <span class="n">empid</span>   <span class="nb">INT</span>         <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">empname</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">25</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">mgrid</span>   <span class="nb">INT</span>         <span class="k">NULL</span><span class="p">,</span>
  <span class="k">CONSTRAINT</span> <span class="n">PK_Employees</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">(</span><span class="n">empid</span><span class="p">),</span>
  <span class="k">CONSTRAINT</span> <span class="n">CHK_Employees_empid</span> <span class="k">CHECK</span><span class="p">(</span><span class="n">empid</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">),</span>
  <span class="k">CONSTRAINT</span> <span class="n">FK_Employees_Employees</span>
    <span class="k">FOREIGN</span> <span class="k">KEY</span><span class="p">(</span><span class="n">mgrid</span><span class="p">)</span> <span class="k">REFERENCES</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span><span class="p">(</span><span class="n">empid</span><span class="p">)</span>
<span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">BEGIN</span> <span class="n">TRY</span>
  <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span><span class="p">(</span><span class="n">empid</span><span class="p">,</span> <span class="n">empname</span><span class="p">,</span> <span class="n">mgrid</span><span class="p">)</span>
    <span class="k">VALUES</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">'Emp1'</span><span class="p">,</span> <span class="k">NULL</span><span class="p">);</span>
  <span class="c1">-- Also try with empid = 0, 'A', NULL</span>
<span class="k">END</span> <span class="n">TRY</span>
<span class="k">BEGIN</span> <span class="n">CATCH</span>
  <span class="n">IF</span> <span class="n">ERROR_NUMBER</span><span class="p">()</span> <span class="o">=</span> <span class="mi">2627</span>
  <span class="k">BEGIN</span>
    <span class="n">PRINT</span> <span class="s1">'    Handling PK violation...'</span><span class="p">;</span>
  <span class="k">END</span><span class="p">;</span>
  <span class="k">ELSE</span> <span class="n">IF</span> <span class="n">ERROR_NUMBER</span><span class="p">()</span> <span class="o">=</span> <span class="mi">547</span>
  <span class="k">BEGIN</span>
    <span class="n">PRINT</span> <span class="s1">'    Handling CHECK/FK constraint violation...'</span><span class="p">;</span>
  <span class="k">END</span><span class="p">;</span>
  <span class="k">ELSE</span> <span class="n">IF</span> <span class="n">ERROR_NUMBER</span><span class="p">()</span> <span class="o">=</span> <span class="mi">515</span>
  <span class="k">BEGIN</span>
    <span class="n">PRINT</span> <span class="s1">'    Handling NULL violation...'</span><span class="p">;</span>
  <span class="k">END</span><span class="p">;</span>
  <span class="k">ELSE</span> <span class="n">IF</span> <span class="n">ERROR_NUMBER</span><span class="p">()</span> <span class="o">=</span> <span class="mi">245</span>
  <span class="k">BEGIN</span>
    <span class="n">PRINT</span> <span class="s1">'    Handling conversion error...'</span><span class="p">;</span>
  <span class="k">END</span><span class="p">;</span>
  <span class="k">ELSE</span>
  <span class="k">BEGIN</span>
    <span class="n">PRINT</span> <span class="s1">'Re-throwing error...'</span><span class="p">;</span>
  <span class="n">THROW</span><span class="p">;</span>    <span class="c1">--  re-throws the error</span>
  <span class="k">END</span><span class="p">;</span>
  <span class="n">PRINT</span> <span class="s1">'    Error Number  : '</span> <span class="o">+</span> <span class="k">CAST</span><span class="p">(</span><span class="n">ERROR_NUMBER</span><span class="p">()</span> <span class="k">AS</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
  <span class="n">PRINT</span> <span class="s1">'    Error Message : '</span> <span class="o">+</span> <span class="n">ERROR_MESSAGE</span><span class="p">();</span>
  <span class="n">PRINT</span> <span class="s1">'    Error Severity: '</span> <span class="o">+</span> <span class="k">CAST</span><span class="p">(</span><span class="n">ERROR_SEVERITY</span><span class="p">()</span> <span class="k">AS</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
  <span class="n">PRINT</span> <span class="s1">'    Error State   : '</span> <span class="o">+</span> <span class="k">CAST</span><span class="p">(</span><span class="n">ERROR_STATE</span><span class="p">()</span> <span class="k">AS</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
  <span class="n">PRINT</span> <span class="s1">'    Error Line    : '</span> <span class="o">+</span> <span class="k">CAST</span><span class="p">(</span><span class="n">ERROR_LINE</span><span class="p">()</span> <span class="k">AS</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
  <span class="n">PRINT</span> <span class="s1">'    Error Proc    : '</span> <span class="o">+</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">ERROR_PROCEDURE</span><span class="p">(),</span> <span class="s1">'Not within a procedure'</span><span class="p">);</span>
<span class="k">END</span> <span class="n">CATCH</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- a stored procedure that encapsulates reusable error-handling code</span>
<span class="k">CREATE</span> <span class="k">OR</span> <span class="k">ALTER</span> <span class="n">PROC</span> <span class="n">dbo</span><span class="p">.</span><span class="n">ErrInsertHandler</span>
<span class="k">AS</span>
<span class="k">SET</span> <span class="n">NOCOUNT</span> <span class="k">ON</span><span class="p">;</span>
<span class="n">IF</span> <span class="n">ERROR_NUMBER</span><span class="p">()</span> <span class="o">=</span> <span class="mi">2627</span>
<span class="k">BEGIN</span>
  <span class="n">PRINT</span> <span class="s1">'Handling PK violation...'</span><span class="p">;</span>
<span class="k">END</span><span class="p">;</span>
<span class="k">ELSE</span> <span class="n">IF</span> <span class="n">ERROR_NUMBER</span><span class="p">()</span> <span class="o">=</span> <span class="mi">547</span>
<span class="k">BEGIN</span>
  <span class="n">PRINT</span> <span class="s1">'Handling CHECK/FK constraint violation...'</span><span class="p">;</span>
<span class="k">END</span><span class="p">;</span>
<span class="k">ELSE</span> <span class="n">IF</span> <span class="n">ERROR_NUMBER</span><span class="p">()</span> <span class="o">=</span> <span class="mi">515</span>
<span class="k">BEGIN</span>
  <span class="n">PRINT</span> <span class="s1">'Handling NULL violation...'</span><span class="p">;</span>
<span class="k">END</span><span class="p">;</span>
<span class="k">ELSE</span> <span class="n">IF</span> <span class="n">ERROR_NUMBER</span><span class="p">()</span> <span class="o">=</span> <span class="mi">245</span>
<span class="k">BEGIN</span>
  <span class="n">PRINT</span> <span class="s1">'Handling conversion error...'</span><span class="p">;</span>
<span class="k">END</span><span class="p">;</span>
<span class="n">PRINT</span> <span class="s1">'Error Number  : '</span> <span class="o">+</span> <span class="k">CAST</span><span class="p">(</span><span class="n">ERROR_NUMBER</span><span class="p">()</span> <span class="k">AS</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
<span class="n">PRINT</span> <span class="s1">'Error Number  : '</span> <span class="o">+</span> <span class="k">CAST</span><span class="p">(</span><span class="n">ERROR_NUMBER</span><span class="p">()</span> <span class="k">AS</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
<span class="n">PRINT</span> <span class="s1">'Error Message : '</span> <span class="o">+</span> <span class="n">ERROR_MESSAGE</span><span class="p">();</span>
<span class="n">PRINT</span> <span class="s1">'Error Severity: '</span> <span class="o">+</span> <span class="k">CAST</span><span class="p">(</span><span class="n">ERROR_SEVERITY</span><span class="p">()</span> <span class="k">AS</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
<span class="n">PRINT</span> <span class="s1">'Error State   : '</span> <span class="o">+</span> <span class="k">CAST</span><span class="p">(</span><span class="n">ERROR_STATE</span><span class="p">()</span> <span class="k">AS</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
<span class="n">PRINT</span> <span class="s1">'Error Line    : '</span> <span class="o">+</span> <span class="k">CAST</span><span class="p">(</span><span class="n">ERROR_LINE</span><span class="p">()</span> <span class="k">AS</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
<span class="n">PRINT</span> <span class="s1">'Error Proc    : '</span> <span class="o">+</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">ERROR_PROCEDURE</span><span class="p">(),</span> <span class="s1">'Not within a procedure'</span><span class="p">);</span>
<span class="k">GO</span>

<span class="k">BEGIN</span> <span class="n">TRY</span>
  <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span><span class="p">(</span><span class="n">empid</span><span class="p">,</span> <span class="n">empname</span><span class="p">,</span> <span class="n">mgrid</span><span class="p">)</span>
    <span class="k">VALUES</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">'Emp1'</span><span class="p">,</span> <span class="k">NULL</span><span class="p">);</span>
<span class="k">END</span> <span class="n">TRY</span>
<span class="k">BEGIN</span> <span class="n">CATCH</span>
  <span class="n">IF</span> <span class="n">ERROR_NUMBER</span><span class="p">()</span> <span class="k">IN</span> <span class="p">(</span><span class="mi">2627</span><span class="p">,</span> <span class="mi">547</span><span class="p">,</span> <span class="mi">515</span><span class="p">,</span> <span class="mi">245</span><span class="p">)</span>
    <span class="k">EXEC</span> <span class="n">dbo</span><span class="p">.</span><span class="n">ErrInsertHandler</span><span class="p">;</span>
<span class="k">ELSE</span> <span class="n">THROW</span><span class="p">;</span>
<span class="k">END</span> <span class="n">CATCH</span><span class="p">;</span>
<span class="k">GO</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- clean up</span>
<span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">Employees</span><span class="p">;</span>
<span class="k">DROP</span> <span class="n">PROC</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">dbo</span><span class="p">.</span><span class="n">ErrInsertHandler</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="data-types">Appendix A: Data Types</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A data type is an attribute that specifies the type of data that the object can hold: integer data, character data, monetary data, date and time data, binary strings, and so on. <a href="#3">[3]</a></p>
</div>
<div class="paragraph">
<p>Data types can be converted either implicitly or explicitly.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Implicit conversions are not visible to the user. SQL Server automatically converts the data from one data type to another.</p>
</li>
<li>
<p>Explicit conversions use the <code>CAST</code> or <code>CONVERT</code> functions.</p>
<div class="ulist">
<ul>
<li>
<p>Use <code>CAST</code> instead of <code>CONVERT</code> to write Transact-SQL program code to comply with ISO.</p>
</li>
<li>
<p>Use <code>CONVERT</code> instead of <code>CAST</code> to take advantage of the style functionality in CONVERT.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">CAST</span> <span class="p">(</span> <span class="n">expression</span> <span class="k">AS</span> <span class="n">data_type</span> <span class="p">[</span> <span class="p">(</span> <span class="k">length</span> <span class="p">)</span> <span class="p">]</span> <span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">CONVERT</span> <span class="p">(</span> <span class="n">data_type</span> <span class="p">[</span> <span class="p">(</span> <span class="k">length</span> <span class="p">)</span> <span class="p">]</span> <span class="p">,</span> <span class="n">expression</span> <span class="p">[</span> <span class="p">,</span> <span class="n">style</span> <span class="p">]</span> <span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="k">CAST</span><span class="p">(</span><span class="mi">123</span> <span class="k">AS</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">)),</span> <span class="k">CONVERT</span><span class="p">(</span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="mi">123</span><span class="p">)</span> <span class="c1">-- same result: integer to string</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="k">CONVERT</span><span class="p">(</span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="n">GETDATE</span><span class="p">(),</span> <span class="mi">101</span><span class="p">)</span> <span class="c1">-- date to string in MM/dd/yyyy format</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="character">A.1. Character</h3>
<div class="paragraph">
<p>SQL Server supports two kinds of character data type pairs: regular kind (<code>CHAR</code> and <code>VARCHAR</code>) and N-kind (<code>NCHAR</code> and <code>NVARCHAR</code>).</p>
</div>
<div class="paragraph">
<p>Each of the type pairs can support different character encoding systems, and can result in different encoded byte lengths and on-disk storage sizes, based on the effective collation of the data and the character code range in use.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The regular types, with UTF-8 collation, use the UTF-8 encoding system and support full range of Unicode characters.</p>
</li>
<li>
<p>The N-kind types, with supplementary character collation (SC), use the UTF-16 encoding system and support the full range of Unicode characters. Otherwise, they support only the subset of characters from the UCS-2 character encoding system.</p>
</li>
<li>
<p>The <code>VARCHAR(size)</code> defines the maximum size in bytes, while the <code>NVARCHAR(size)</code> defines the size in byte pairs.</p>
</li>
<li>
<p>The literals of regular type character are enclosed in single quotes, while N-kind type require a preceding <code>'N'</code>.</p>
</li>
<li>
<p>Any data type without the <code>VAR</code> element (<code>CHAR</code>, <code>NCHAR</code>) in its name has a fixed length, that is, SQL Server preserves the maximum space in the row based on the column’s defined size and not on the actual user data that is stored.</p>
</li>
<li>
<p>A data type with the <code>VAR</code> element (<code>VARCHAR</code>, <code>NVARCHAR</code>) in its name has a variable length, that is, SQL Server uses as much storage space in the row as required to store the actual character string, plus two extra bytes for offset data.</p>
<div class="ulist">
<ul>
<li>
<p>Updates of variable-length data types can be less efficient than those of fixed-length types due to potential row expansion and data movement.</p>
</li>
<li>
<p>Variable-length data types can use the <code>MAX</code> specifier, allowing for up to 2GB per value.</p>
</li>
<li>
<p>Any value with a size up to a certain threshold (8,000 bytes by default) can be stored inline in the row. Any value with a size above the threshold is stored external to the row as a large object (LOB).</p>
</li>
</ul>
</div>
</li>
<li>
<p>The collation is a property of character data that encapsulates several aspects: language support, sort order, case sensitivity, accent sensitivity, and more.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- get the set of supported collations and their descriptions</span>
<span class="k">SELECT</span> <span class="n">name</span><span class="p">,</span> <span class="n">description</span>
<span class="k">FROM</span> <span class="n">sys</span><span class="p">.</span><span class="n">fn_helpcollations</span><span class="p">();</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>In an on-premises SQL Server implementation and Azure SQL Managed Instance, collation can be defined at four different levels: instance, database, column, and expression. The lowest level is the effective one that is used.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">DATABASEPROPERTYEX</span><span class="p">(</span><span class="n">DB_NAME</span><span class="p">(),</span> <span class="s1">'Collation'</span><span class="p">);</span> <span class="c1">-- SQL_Latin1_General_CP1_CI_AS</span></code></pre>
</div>
</div>
</li>
<li>
<p>In Azure SQL Database, collation can be defined at the database, column, and expression levels.</p>
</li>
</ul>
</div>
</li>
<li>
<p>T-SQL provides the plus-sign (<code>+</code>) operator and the <code>CONCAT</code> and <code>CONCAT_WS</code> functions to concatenate strings.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">firstname</span> <span class="o">+</span> <span class="n">N</span><span class="s1">' '</span> <span class="o">+</span> <span class="n">lastname</span> <span class="k">AS</span> <span class="n">fullname</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Standard SQL dictates that a concatenation with a <code>NULL</code> should yield a <code>NULL</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">custid</span><span class="p">,</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span><span class="p">,</span>
  <span class="n">country</span> <span class="o">+</span> <span class="n">N</span><span class="s1">','</span> <span class="o">+</span> <span class="n">region</span> <span class="o">+</span> <span class="n">N</span><span class="s1">','</span> <span class="o">+</span> <span class="n">city</span> <span class="k">AS</span> <span class="k">location</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">custid	country    	region       	city           	location
9     	France     	NULL         	Marseille      	NULL
10    	Canada     	BC           	Tsawassen      	Canada,BC,Tsawassen</span></code></pre>
</div>
</div>
</li>
<li>
<p>To treat a <code>NULL</code> as an empty string—or more accurately, to substitute a <code>NULL</code> with an empty string—use the <code>COALESCE</code> function that accepts a list of input values and returns the first that is not <code>NULL</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">custid</span><span class="p">,</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span><span class="p">,</span>
  <span class="n">country</span> <span class="o">+</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">N</span><span class="s1">','</span> <span class="o">+</span> <span class="n">region</span><span class="p">,</span> <span class="n">N</span><span class="s1">''</span><span class="p">)</span> <span class="o">+</span> <span class="n">N</span><span class="s1">','</span> <span class="o">+</span> <span class="n">city</span> <span class="k">AS</span> <span class="k">location</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">custid	country    	region       	city           	location
8     	Spain      	NULL         	Madrid         	Spain,Madrid
9     	France     	NULL         	Marseille      	France,Marseille</span></code></pre>
</div>
</div>
</li>
<li>
<p>T-SQL supports a function called <code>CONCAT</code>, which accepts a list of inputs for concatenation and automatically substitutes NULLs with empty strings.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">custid</span><span class="p">,</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span><span class="p">,</span>
  <span class="n">CONCAT</span><span class="p">(</span><span class="n">country</span><span class="p">,</span> <span class="n">N</span><span class="s1">','</span> <span class="o">+</span> <span class="n">region</span><span class="p">,</span> <span class="n">N</span><span class="s1">','</span> <span class="o">+</span> <span class="n">city</span><span class="p">)</span> <span class="k">AS</span> <span class="k">location</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p>T-SQL also supports a function called <code>CONCAT_WS</code>, which accepts the separator as the first parameter, specifying it only once, and then the list of inputs for concatenation.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">custid</span><span class="p">,</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span><span class="p">,</span>
  <span class="n">CONCAT_WS</span><span class="p">(</span><span class="n">N</span><span class="s1">','</span><span class="p">,</span> <span class="n">country</span><span class="p">,</span> <span class="n">region</span><span class="p">,</span> <span class="n">city</span><span class="p">)</span> <span class="k">AS</span> <span class="k">location</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Customers</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>The <code>PATINDEX</code> function returns the position of the first occurrence of a pattern, similar to the patterns used by the <code>LIKE</code> predicate in T-SQL, within a string.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="n">PATINDEX</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">PATINDEX</span><span class="p">(</span><span class="s1">'%[0-9]%'</span><span class="p">,</span> <span class="s1">'abcd123efgh'</span><span class="p">);</span>
<span class="c1">-- 5</span></code></pre>
</div>
</div>
</li>
<li>
<p>T-SQL provides a predicate called <code>LIKE</code> to check whether a character string matches a specified pattern.</p>
<div class="ulist">
<ul>
<li>
<p>The <code>%</code> (percent sign) wildcard represents a string of any size, including an empty string.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">lastname</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span>
<span class="k">WHERE</span> <span class="n">lastname</span> <span class="k">LIKE</span> <span class="n">N</span><span class="s1">'D%'</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">empid	lastname
1    	Davis
9    	Doyle</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <code>_</code> (underscore) wildcard represents a single character.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">lastname</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span>
<span class="k">WHERE</span> <span class="n">lastname</span> <span class="k">LIKE</span> <span class="n">N</span><span class="s1">'_e%'</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">empid	lastname
3    	Lew
4    	Peled</span></code></pre>
</div>
</div>
</li>
<li>
<p>The square bracket wildcard <code>[&lt;list of characters&gt;]</code>, with a list of characters (such as <code>[ABC]</code>), represents a single character that must be one of the characters specified in the list.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">lastname</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span>
<span class="k">WHERE</span> <span class="n">lastname</span> <span class="k">LIKE</span> <span class="n">N</span><span class="s1">'[ABC]%'</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="n">empid</span>	<span class="n">lastname</span>
<span class="mi">8</span>    	<span class="n">Cameron</span></code></pre>
</div>
</div>
</li>
<li>
<p>The square bracket wildcard <code>[&lt;character&gt;-&lt;character&gt;]</code>, with a character range (such as <code>[A–E]</code>), represents a single character that must be within the specified range.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">lastname</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span>
<span class="k">WHERE</span> <span class="n">lastname</span> <span class="k">LIKE</span> <span class="n">N</span><span class="s1">'[A-E]%'</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="n">empid</span>	<span class="n">lastname</span>
<span class="mi">8</span>    	<span class="n">Cameron</span>
<span class="mi">1</span>    	<span class="n">Davis</span>
<span class="mi">9</span>    	<span class="n">Doyle</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>The square bracket wildcard <code>[^&lt;character list or range&gt;]</code>, with a caret sign (<code>^</code>) followed by a character list or range (such as <code>[^A–E]</code>), represents a single character that is not in the specified character list or range.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">empid</span><span class="p">,</span> <span class="n">lastname</span>
<span class="k">FROM</span> <span class="n">HR</span><span class="p">.</span><span class="n">Employees</span>
<span class="k">WHERE</span> <span class="n">lastname</span> <span class="k">LIKE</span> <span class="n">N</span><span class="s1">'[^A-E]%'</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">empid	lastname
2    	Funk
7    	King</span></code></pre>
</div>
</div>
</li>
<li>
<p>To search for a character that is also a wildcard, use an escape character before it in the <code>LIKE</code> pattern, and specify the escape character using the <code>ESCAPE</code> keyword.</p>
<div class="ulist">
<ul>
<li>
<p>A character put in front of a wildcard character to indicate that the wildcard is interpreted as a regular character and not as a wildcard.</p>
</li>
<li>
<p><code>escape_character</code> is a character expression that has no default and must evaluate to only one character.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- specify character (!, @, $, or #) as the escape character</span>
<span class="n">col1</span> <span class="k">LIKE</span> <span class="s1">'%!_%'</span> <span class="k">ESCAPE</span> <span class="s1">'!'</span>
<span class="n">col1</span> <span class="k">LIKE</span> <span class="s1">'%@_%'</span> <span class="k">ESCAPE</span> <span class="s1">'@'</span>
<span class="n">col1</span> <span class="k">LIKE</span> <span class="s1">'%$%_'</span> <span class="k">ESCAPE</span> <span class="s1">'$'</span>
<span class="n">col1</span> <span class="k">LIKE</span> <span class="s1">'%#%_'</span> <span class="k">ESCAPE</span> <span class="s1">'#'</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="date-and-time">A.2. Date and Time</h3>
<div class="paragraph">
<p>T-SQL supports six date and time data types:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The legacy types <code>DATETIME</code> and <code>SMALLDATETIME</code> include date and time components that are inseparable.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">DATETIME      	'YYYYMMDD hh:mm:ss.nnn'               	'20220212 12:30:15.123'
DATETIME      	'YYYYMMDD'                            	'20220212'
SMALLDATETIME 	'YYYYMMDD hh:mm'                      	'20220212 12:30'
SMALLDATETIME 	'YYYYMMDD'                            	'20220212'</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <code>DATE</code> and <code>TIME</code> data types provide a separation between the date and time components.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">DATE          	'YYYYMMDD'                            	'20220212'
TIME          	'hh:mm:ss.nnnnnnn'                    	'12:30:15.1234567'</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <code>DATETIME2</code> data type has a bigger date range and better precision than the legacy types.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">DATETIME2     	'YYYYMMDD hh:mm:ss.nnnnnnn'           	'20220212 12:30:15.1234567'</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <code>DATETIMEOFFSET</code> data type is similar to <code>DATETIME2</code>, but it also includes the offset from UTC.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">DATETIMEOFFSET	'YYYYMMDD hh:mm:ss.nnnnnnn [+|-]hh:mm'	'20220212 12:30:15.1234567 +02:00'</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">GETDATE</span><span class="p">()</span> <span class="k">UNION</span> <span class="k">ALL</span>          <span class="c1">-- DATETIME   current date and time</span>
<span class="k">SELECT</span> <span class="k">CURRENT_TIMESTAMP</span> <span class="k">UNION</span> <span class="k">ALL</span>  <span class="c1">-- DATETIME   same as GETDATE but SQL-compliant</span>
<span class="k">SELECT</span> <span class="n">GETUTCDATE</span><span class="p">()</span> <span class="k">UNION</span> <span class="k">ALL</span>       <span class="c1">-- DATETIME   current date and time in UTC</span>
<span class="k">SELECT</span> <span class="n">SYSDATETIME</span><span class="p">()</span> <span class="k">UNION</span> <span class="k">ALL</span>      <span class="c1">-- DATETIME2  current date and time</span>
<span class="k">SELECT</span> <span class="n">SYSUTCDATETIME</span><span class="p">()</span> <span class="k">UNION</span> <span class="k">ALL</span>   <span class="c1">-- DATETIME2  current date and time in UTC</span>
<span class="k">SELECT</span> <span class="n">SYSDATETIMEOFFSET</span><span class="p">()</span>          <span class="c1">-- DATETIME2  current date and time in UTC with Time Zone</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">2025-01-18 15:07:52.9766667 +00:00
2025-01-18 15:07:52.9766667 +00:00
2025-01-18 07:07:52.9766667 +00:00
2025-01-18 15:07:52.9755919 +00:00
2025-01-18 07:07:52.9755919 +00:00
2025-01-18 15:07:52.9755919 +08:00</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>T-SQL doesn’t provide the means to express a date and time literal; instead, a convertible literal of a different type can be specified—explicitly or implicitly—to a date and time data type.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>It is a best practice to use character strings with language-neutral formats to express date and time values.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">orderdate</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">orderdate</span> <span class="o">=</span> <span class="s1">'20220212'</span><span class="p">;</span> <span class="c1">-- equivalent to: WHERE orderdate = CAST('20220212' AS DATE);</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Each login has a default language, which affects how date and time literals are interpreted.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SET</span> <span class="k">LANGUAGE</span> <span class="n">British</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">'02/12/2022'</span> <span class="k">AS</span> <span class="nb">DATE</span><span class="p">);</span> <span class="c1">-- 2022-12-02</span>

<span class="k">SET</span> <span class="k">LANGUAGE</span> <span class="n">us_english</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">'02/12/2022'</span> <span class="k">AS</span> <span class="nb">DATE</span><span class="p">);</span> <span class="c1">-- 2022-02-12</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <code>DATEFORMAT</code> setting, expressed as a combination of the characters <code>d</code>, <code>m</code>, and <code>y</code>, determines how SQL Server interprets date and time literals from character strings (e.g., <code>'mdy'</code> for US English, <code>'dmy'</code> for British English).</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SET</span> <span class="n">DATEFORMAT</span> <span class="n">dmy</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">'02/12/2022'</span> <span class="k">AS</span> <span class="nb">DATE</span><span class="p">);</span> <span class="c1">-- 2022-12-02</span>

<span class="k">SET</span> <span class="n">DATEFORMAT</span> <span class="n">mdy</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">'02/12/2022'</span> <span class="k">AS</span> <span class="nb">DATE</span><span class="p">);</span> <span class="c1">-- 2022-02-12</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <code>LANGUAGE/DATEFORMAT</code> setting affects only the way the values inputed are interpreted, and have no impact on the format used in the output for presentation purposes.</p>
</li>
</ul>
</div>
</li>
<li>
<p>SQL Server may not efficiently utilize indexes when functions like <code>YEAR</code> are applied to the column within the <code>WHERE</code> clause.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">orderdate</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="nb">YEAR</span><span class="p">(</span><span class="n">orderdate</span><span class="p">)</span> <span class="o">=</span> <span class="mi">2021</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sql"><span class="c1">-- better</span>
<span class="k">SELECT</span> <span class="n">orderid</span><span class="p">,</span> <span class="n">custid</span><span class="p">,</span> <span class="n">empid</span><span class="p">,</span> <span class="n">orderdate</span>
<span class="k">FROM</span> <span class="n">Sales</span><span class="p">.</span><span class="n">Orders</span>
<span class="k">WHERE</span> <span class="n">orderdate</span> <span class="o">&gt;=</span> <span class="s1">'20210101'</span> <span class="k">AND</span> <span class="n">orderdate</span> <span class="o">&lt;</span> <span class="s1">'20220101'</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="references">References</h2>
<div class="sectionbody">
<div class="ulist bibliography">
<ul class="bibliography">
<li>
<p><a id="t-sql-fund"></a>[1] Itzik Ben-Gan <em>T-SQL Fundamentals</em>. 3rd edition, Microsoft Press; August 3, 2016</p>
</li>
<li>
<p><a id="t-sql-query"></a>[2] Itzik Ben-Gan, Adam Machanic, Dejan Sarka, Kevin Farlee <em>T-SQL Querying</em>. 1st Edition Microsoft Press; March 6, 2015</p>
</li>
<li>
<p><a id="t-sql-ref"></a>[3] <a href="https://learn.microsoft.com/en-us/sql/t-sql/language-reference" class="bare">https://learn.microsoft.com/en-us/sql/t-sql/language-reference</a></p>
</li>
</ul>
</div>
</div>
</div>]]></content><author><name></name></author><category term="sql" /><category term="sql" /><category term="mssql" /><category term="t-sql" /></entry><entry><title type="html">WPF (.NET) Learning Notes</title><link href="https://blog.codefarm.me/2024/09/18/wpf-dotnet-learning-notes/" rel="alternate" type="text/html" title="WPF (.NET) Learning Notes" /><published>2024-09-18T09:10:49+08:00</published><updated>2024-09-18T09:10:49+08:00</updated><id>https://blog.codefarm.me/2024/09/18/wpf-dotnet-learning-notes</id><content type="html" xml:base="https://blog.codefarm.me/2024/09/18/wpf-dotnet-learning-notes/"><![CDATA[<div id="toc" class="toc">
<div id="toctitle"></div>
<ul class="sectlevel1">
<li><a href="#mvvm-pattern-and-toolkit">1. MVVM pattern and toolkit</a>
<ul class="sectlevel2">
<li><a href="#mvvm-pattern">1.1. MVVM pattern</a>
<ul class="sectlevel3">
<li><a href="#view">1.1.1. View</a></li>
<li><a href="#viewmodel">1.1.2. ViewModel</a></li>
<li><a href="#model">1.1.3. Model</a></li>
<li><a href="#connecting-view-models-to-views">1.1.4. Connecting view models to views</a>
<ul class="sectlevel5">
<li><a href="#creating-a-view-model-declaratively">Creating a view model declaratively</a></li>
<li><a href="#creating-a-view-model-programmatically">Creating a view model programmatically</a></li>
</ul>
</li>
<li><a href="#updating-views-in-response-to-changes-in-the-underlying-view-model-or-model">1.1.5. Updating views in response to changes in the underlying view model or model</a></li>
</ul>
</li>
<li><a href="#mvvm-toolkit">1.2. MVVM Toolkit</a></li>
</ul>
</li>
<li><a href="#data-binding">2. Data binding</a>
<ul class="sectlevel2">
<li><a href="#data-context">2.1. Data context</a></li>
<li><a href="#data-flow">2.2. Data flow</a></li>
<li><a href="#data-conversion">2.3. Data conversion</a></li>
<li><a href="#data-validation">2.4. Data validation</a></li>
<li><a href="#binding-path">2.5. Binding path</a></li>
<li><a href="#binding-source">2.6. Binding source</a></li>
<li><a href="#binding-in-xaml">2.7. Binding in XAML</a></li>
<li><a href="#binding-in-code">2.8. Binding in code</a></li>
</ul>
</li>
<li><a href="#property-system">3. Property system</a>
<ul class="sectlevel2">
<li><a href="#dependency-properties-and-clr-properties">3.1. Dependency properties and CLR properties</a></li>
<li><a href="#dependency-properties-back-clr-properties">3.2. Dependency properties back CLR properties</a></li>
<li><a href="#attached-properties">3.3. Attached properties</a></li>
<li><a href="#property-value-inheritance">3.4. Property value inheritance</a></li>
</ul>
</li>
<li><a href="#routed-events">4. Routed events</a>
<ul class="sectlevel2">
<li><a href="#routed-event-and-event-handler">4.1. Routed event and event handler</a></li>
<li><a href="#attached-events">4.2. Attached events</a></li>
<li><a href="#wpf-input-events">4.3. WPF input events</a></li>
<li><a href="#weak-event-patterns">4.4. Weak event patterns</a></li>
</ul>
</li>
<li><a href="#commands">5. Commands</a></li>
<li><a href="#windows">6. Windows</a>
<ul class="sectlevel2">
<li><a href="#lifetime">6.1. Lifetime</a></li>
<li><a href="#appearance">6.2. Appearance</a></li>
<li><a href="#dialog-boxes">6.3. Dialog boxes</a></li>
<li><a href="#multiple-windows-multiple-threads">6.4. Multiple windows, multiple threads</a></li>
</ul>
</li>
<li><a href="#styles-templates-and-triggers">7. Styles, templates, and triggers</a>
<ul class="sectlevel2">
<li><a href="#styles">7.1. Styles</a></li>
<li><a href="#control-templates">7.2. Control templates</a></li>
<li><a href="#data-templates">7.3. Data templates</a></li>
<li><a href="#triggers">7.4. Triggers</a></li>
</ul>
</li>
<li><a href="#references">References</a></li>
</ul>
</div>
<div class="sect1">
<h2 id="mvvm-pattern-and-toolkit">1. MVVM pattern and toolkit</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The MVVM pattern <a href="#1">[1]</a> helps cleanly separate an application&#8217;s business and presentation logic from its user interface (UI).</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Maintaining a clean separation between application logic and the UI helps address numerous development issues and makes an application easier to test, maintain, and evolve.</p>
</li>
<li>
<p>It can also significantly improve code re-use opportunities and allows developers and UI designers to collaborate more easily when developing their respective parts of an app.</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="mvvm-pattern">1.1. MVVM pattern</h3>
<div class="paragraph">
<p>There are three core components in the MVVM pattern: the model, the view, and the view model.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://learn.microsoft.com/en-us/dotnet/architecture/maui/media/mvvm-pattern.png" alt="The MVVM pattern" width="55%" height="55%">
</div>
</div>
<div class="paragraph">
<p>Using the MVVM pattern, the UI of the app and the underlying presentation and business logic are separated into three separate classes: the view, which encapsulates the UI and UI logic; the view model, which encapsulates presentation logic and state; and the model, which encapsulates the app&#8217;s business logic and data.</p>
</div>
<div class="sect3">
<h4 id="view">1.1.1. View</h4>
<div class="paragraph">
<p>The view is responsible for defining the structure, layout, and appearance of what the user sees on screen.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Ideally, each view is defined in XAML, with a limited code-behind that does not contain business logic.</p>
<div class="paragraph">
<p>However, in some cases, the code-behind might contain UI logic that implements visual behavior that is difficult to express in XAML, such as animations.</p>
</div>
</li>
<li>
<p>Enable and disable UI elements by binding to view model properties, rather than enabling and disabling them in code-behind.</p>
<div class="paragraph">
<p>Ensure that the view models are responsible for defining logical state changes that affect some aspects of the view&#8217;s display, such as whether a command is available, or an indication that an operation is pending.</p>
</div>
</li>
<li>
<p>There are several options for executing code on the view model in response to interactions on the view, such as a button click or item selection.</p>
<div class="ulist">
<ul>
<li>
<p>If a control supports commands, the control&#8217;s <code>Command</code> property can be data-bound to an <code>ICommand</code> property on the view model.</p>
<div class="paragraph">
<p>When the control&#8217;s command is invoked, the code in the view model will be executed.</p>
</div>
</li>
<li>
<p>In addition to commands, behaviors can be attached to an object in the view and can listen for either a command to be invoked or the event to be raised.</p>
<div class="paragraph">
<p>In response, the behavior can then invoke an ICommand on the view model or a method on the view model.</p>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="viewmodel">1.1.2. ViewModel</h4>
<div class="paragraph">
<p>The view model implements properties and commands to which the view can data bind to, and notifies the view of any state changes through change notification events. The properties and commands that the view model provides define the functionality to be offered by the UI, but the view determines how that functionality is to be displayed.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Multi-platform apps should keep the <strong>UI thread</strong> unblocked to improve the user&#8217;s perception of performance.</p>
<div class="paragraph">
<p>Therefore, in the view model, use <strong>asynchronous methods</strong> for I/O operations and raise <strong>events</strong> to asynchronously notify views of property changes.</p>
</div>
</li>
<li>
<p>The view model is also responsible for coordinating the view&#8217;s interactions with one or many model classes that are required.</p>
<div class="paragraph">
<p>The view model might choose to expose model classes directly to the view so that controls in the view can data bind directly to them. In this case, the model classes will need to be designed to support data binding and change notification events.</p>
</div>
</li>
<li>
<p>Each view model provides data from a model in a form that the view can easily consume.</p>
<div class="ulist">
<ul>
<li>
<p>Placing the data conversion in the view model is a good idea because it provides properties that the view can bind to. For example, the view model might combine the values of two properties to make it easier to display by the view.</p>
</li>
<li>
<p>It&#8217;s also possible to use converters as a separate data conversion layer that sits between the view model and the view. This can be necessary, for example, when data requires special formatting that the view model doesn&#8217;t provide.</p>
</li>
</ul>
</div>
</li>
<li>
<p>In order for the view model to participate in two-way data binding with the view, its properties must raise the <code>PropertyChanged</code> event.</p>
<div class="ulist">
<ul>
<li>
<p>View models satisfy this requirement by implementing the <code>INotifyPropertyChanged</code> interface, and raising the <code>PropertyChanged</code> event when a property is changed.</p>
</li>
<li>
<p>For collections, the view-friendly <code>ObservableCollection&lt;T&gt;</code> is provided.</p>
<div class="paragraph">
<p>This collection implements collection changed notification, relieving the developer from having to implement the <code>INotifyCollectionChanged</code> interface on collections.</p>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="model">1.1.3. Model</h4>
<div class="paragraph">
<p>Model classes are non-visual classes that encapsulate the app&#8217;s data.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Model classes can be thought of as representing the app&#8217;s domain model that includes a data model along with business and validation logic.</p>
</li>
<li>
<p>Examples of model objects include data transfer objects (DTOs), Plain Old CLR Objects (POCOs), and generated entity and proxy objects.</p>
</li>
<li>
<p>Model classes are typically used in conjunction with services or repositories that encapsulate data access and caching.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="connecting-view-models-to-views">1.1.4. Connecting view models to views</h4>
<div class="paragraph">
<p>View models can be connected to views by using the data-binding capabilities.</p>
</div>
<div class="sect5">
<h6 id="creating-a-view-model-declaratively">Creating a view model declaratively</h6>
<div class="paragraph">
<p>The simplest approach is for the view to declaratively instantiate its corresponding view model in XAML. When the view is constructed, the corresponding view model object will also be constructed.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;Grid.DataContext&gt;</span>
    <span class="nt">&lt;vm:MainViewModel</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/Grid.DataContext&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Though the declarative construction and assignment of the view model by the view has the advantage that it&#8217;s simple, but has the disadvantage that it requires a default (parameter-less) constructor in the view model.</p>
</div>
</div>
<div class="sect5">
<h6 id="creating-a-view-model-programmatically">Creating a view model programmatically</h6>
<div class="paragraph">
<p>A view can have code in the code-behind file, resulting in the view-model being assigned to its <code>DataContext</code> property.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">MainWindow</span> <span class="p">:</span> <span class="n">Window</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nf">MainWindow</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nf">InitializeComponent</span><span class="p">();</span>
        <span class="n">DataContext</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MainViewModel</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The programmatic construction and assignment of the view model within the view&#8217;s code-behind has the advantage that it&#8217;s simple.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>However, the main disadvantage of this approach is that the view needs to provide the view model with any required dependencies.</p>
</li>
<li>
<p>Using a <a href="https://learn.microsoft.com/en-us/dotnet/architecture/maui/dependency-injection">dependency injection</a> container can help to maintain loose coupling between the view and view model.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect3">
<h4 id="updating-views-in-response-to-changes-in-the-underlying-view-model-or-model">1.1.5. Updating views in response to changes in the underlying view model or model</h4>
<div class="paragraph">
<p>All view model and model classes that are accessible to a view should implement the <code>INotifyPropertyChanged</code> interface. Implementing this interface in a view model or model class allows the class to provide change notifications to any data-bound controls in the view when the underlying property value changes.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Always raising a <code>PropertyChanged</code> event if a public property&#8217;s value changes.</p>
</li>
<li>
<p>Always raising a <code>PropertyChanged</code> event for any calculated properties whose values are used by other properties in the view model or model.</p>
</li>
<li>
<p>Always raising the <code>PropertyChanged</code> event at the end of the method that makes a property change, or when the object is known to be in a safe state.</p>
</li>
<li>
<p>Never raising a <code>PropertyChanged</code> event if the property does not change.</p>
</li>
<li>
<p>Never raising the <code>PropertyChanged</code> event during a view model&#8217;s constructor if you are initializing a property.</p>
</li>
<li>
<p>Never raising more than one <code>PropertyChanged</code> event with the same property name argument within a single synchronous invocation of a public method of a class.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">MainViewModel</span> <span class="p">:</span> <span class="n">INotifyPropertyChanged</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="kt">string</span><span class="p">?</span> <span class="n">_title</span><span class="p">;</span>

    <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Title</span>
    <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_title</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">set</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_title</span> <span class="p">!=</span> <span class="k">value</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">_title</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
                <span class="nf">OnPropertyChanged</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">event</span> <span class="n">PropertyChangedEventHandler</span><span class="p">?</span> <span class="n">PropertyChanged</span><span class="p">;</span>

    <span class="k">private</span> <span class="k">void</span> <span class="nf">OnPropertyChanged</span><span class="p">([</span><span class="n">CallerMemberName</span><span class="p">]</span> <span class="kt">string</span><span class="p">?</span> <span class="n">propertyName</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">PropertyChanged</span><span class="p">?.</span><span class="nf">Invoke</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="nf">PropertyChangedEventArgs</span><span class="p">(</span><span class="n">propertyName</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mvvm-toolkit">1.2. MVVM Toolkit</h3>
<div class="paragraph">
<p>The <code>CommunityToolkit.Mvvm</code> package (aka MVVM Toolkit, formerly named <code>Microsoft.Toolkit.Mvvm</code>) is a modern, fast, and modular MVVM library. <a href="#communitytoolkit">[2]</a></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">dotnet add package CommunityToolkit.Mvvm <span class="c"># --version 8.3.1</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/api//communitytoolkit.mvvm.componentmodel"><em>CommunityToolkit.Mvvm.ComponentModel</em></a></p>
<div class="ulist">
<ul>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/observableobject">ObservableObject</a></p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">ObservableObject</span> <span class="p">:</span> <span class="n">INotifyPropertyChanged</span><span class="p">,</span> <span class="n">INotifyPropertyChanging</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">MainViewModel</span> <span class="p">:</span> <span class="n">ObservableObject</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="kt">string</span><span class="p">?</span> <span class="n">_title</span><span class="p">;</span>

    <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Title</span>
    <span class="p">{</span>
        <span class="k">get</span> <span class="p">=&gt;</span> <span class="n">_title</span><span class="p">;</span>
        <span class="k">set</span> <span class="p">=&gt;</span> <span class="nf">SetProperty</span><span class="p">(</span><span class="k">ref</span> <span class="n">_title</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="n">TaskNotifier</span><span class="p">?</span> <span class="n">myTask</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">Task</span><span class="p">?</span> <span class="n">MyTask</span>
    <span class="p">{</span>
        <span class="k">get</span> <span class="p">=&gt;</span> <span class="n">myTask</span><span class="p">;</span>
        <span class="k">set</span> <span class="p">=&gt;</span> <span class="nf">SetPropertyAndNotifyOnCompletion</span><span class="p">(</span><span class="k">ref</span> <span class="n">myTask</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;StackPanel&gt;</span>
    <span class="nt">&lt;Label</span> <span class="na">Content=</span><span class="s">"{Binding MyTask.Status}"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;TextBox</span> <span class="na">Text=</span><span class="s">"{Binding Title}"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/StackPanel&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/observablerecipient">ObservableRecipient</a></p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">ObservableRecipient</span> <span class="p">:</span> <span class="n">ObservableObject</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">MainViewModel</span> <span class="p">:</span> <span class="n">ObservableRecipient</span><span class="p">,</span> <span class="n">IRecipient</span><span class="p">&lt;</span><span class="n">RequestMessage</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;&gt;</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Receive</span><span class="p">(</span><span class="n">RequestMessage</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">message</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">MainViewModel</span> <span class="p">:</span> <span class="n">ObservableRecipient</span>
<span class="p">{</span>
    <span class="c1">// For best results and to avoid memory leaks, it's recommended to use OnActivated to register</span>
    <span class="c1">// to messages, and to use OnDeactivated to do cleanup operations.</span>
    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnActivated</span><span class="p">()</span>
        <span class="p">=&gt;</span> <span class="n">Messenger</span><span class="p">.</span><span class="n">Register</span><span class="p">&lt;</span><span class="n">MainViewModel</span><span class="p">,</span> <span class="n">RequestMessage</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;&gt;(</span><span class="k">this</span><span class="p">,</span> <span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">r</span><span class="p">.</span><span class="nf">Receive</span><span class="p">(</span><span class="n">m</span><span class="p">));</span>

    <span class="c1">// By default, OnDeactivated automatically unregisters the current instance from all registered messages.</span>
    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnDeactivated</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="k">base</span><span class="p">.</span><span class="nf">OnDeactivated</span><span class="p">();</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">Receive</span><span class="p">(</span><span class="n">RequestMessage</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">message</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
<span class="p">}</span></code></pre>
</div>
</div>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/observablevalidator">ObservableValidator</a></p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">ObservableValidator</span> <span class="p">:</span> <span class="n">ObservableObject</span><span class="p">,</span> <span class="n">INotifyDataErrorInfo</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">RegistrationForm</span> <span class="p">:</span> <span class="n">ObservableValidator</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="kt">string</span> <span class="n">name</span><span class="p">;</span>

    <span class="p">[</span><span class="n">Required</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">MinLength</span><span class="p">(</span><span class="m">2</span><span class="p">)]</span>
    <span class="p">[</span><span class="nf">MaxLength</span><span class="p">(</span><span class="m">100</span><span class="p">)]</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span>
    <span class="p">{</span>
        <span class="k">get</span> <span class="p">=&gt;</span> <span class="n">name</span><span class="p">;</span>
        <span class="c1">// Here we are calling the SetProperty&lt;T&gt;(ref T, T, bool, string) method exposed</span>
        <span class="c1">// by ObservableValidator, and that additional bool parameter set to true indicates</span>
        <span class="c1">// that we also want to validate the property when its value is updated.</span>
        <span class="k">set</span> <span class="p">=&gt;</span> <span class="nf">SetProperty</span><span class="p">(</span><span class="k">ref</span> <span class="n">name</span><span class="p">,</span> <span class="k">value</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;TextBox</span> <span class="na">Text=</span><span class="s">"{Binding Name, ValidatesOnDataErrors=True}"</span> <span class="nt">/&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/generators/observableproperty">ObservableProperty</a></p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="p">[</span><span class="n">ObservableProperty</span><span class="p">]</span>
<span class="p">[</span><span class="nf">NotifyPropertyChangedFor</span><span class="p">(</span><span class="k">nameof</span><span class="p">(</span><span class="n">FullName</span><span class="p">))]</span> <span class="c1">// Notifying dependent properties</span>
<span class="p">[</span><span class="nf">NotifyCanExecuteChangedFor</span><span class="p">(</span><span class="k">nameof</span><span class="p">(</span><span class="n">MyCommand</span><span class="p">))]</span> <span class="c1">// Notifying dependent commands</span>
<span class="p">[</span><span class="n">NotifyDataErrorInfo</span><span class="p">]</span> <span class="c1">// Requesting property validation</span>
<span class="p">[</span><span class="n">Required</span><span class="p">]</span>
<span class="p">[</span><span class="nf">MinLength</span><span class="p">(</span><span class="m">2</span><span class="p">)]</span> <span class="c1">// Any other validation attributes too...</span>
<span class="p">[</span><span class="n">NotifyPropertyChangedRecipients</span><span class="p">]</span> <span class="c1">// Sending notification messages [PropertyChangedMessage&lt;T&gt;]</span>
<span class="p">[</span><span class="n">property</span><span class="p">:</span> <span class="nf">JsonPropertyName</span><span class="p">(</span><span class="s">"name"</span><span class="p">)]</span> <span class="c1">// Adding custom attributes</span>
<span class="k">private</span> <span class="kt">string</span><span class="p">?</span> <span class="n">_name</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/generators/inotifypropertychanged">INotifyPropertyChanged</a></p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="c1">// only use in cases where the target types cannot just inherit from the equivalent</span>
<span class="c1">// types (eg. from ObservableObject).</span>
<span class="p">[</span><span class="n">INotifyPropertyChanged</span><span class="p">]</span>
<span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">MyViewModel</span> <span class="p">:</span> <span class="n">SomeOtherType</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/api//communitytoolkit.mvvm.dependencyinjection"><em>CommunityToolkit.Mvvm.DependencyInjection</em></a></p>
<div class="ulist">
<ul>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/ioc">Ioc</a></p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">dotnet add package Microsoft.Extensions.DependencyInjection <span class="c"># --version 8.0.0</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">App</span> <span class="p">:</span> <span class="n">Application</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">IServiceProvider</span> <span class="n">Services</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">App</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Services</span> <span class="p">=</span> <span class="nf">ConfigureServices</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnStartup</span><span class="p">(</span><span class="n">StartupEventArgs</span> <span class="n">e</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">mainWindow</span> <span class="p">=</span> <span class="n">Services</span><span class="p">.</span><span class="n">GetRequiredService</span><span class="p">&lt;</span><span class="n">MainWindow</span><span class="p">&gt;();</span>
        <span class="n">mainWindow</span><span class="p">.</span><span class="nf">Show</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="n">ServiceProvider</span> <span class="nf">ConfigureServices</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">services</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ServiceCollection</span><span class="p">();</span>

        <span class="n">services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">MainWindow</span><span class="p">&gt;();</span>
        <span class="n">services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">MainViewModel</span><span class="p">&gt;();</span>

        <span class="k">return</span> <span class="n">services</span><span class="p">.</span><span class="nf">BuildServiceProvider</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/api//communitytoolkit.mvvm.input"><em>CommunityToolkit.Mvvm.Input</em></a></p>
<div class="ulist">
<ul>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/relaycommand">RelayCommand</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/relaycommand">RelayCommand&lt;T&gt;</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/asyncrelaycommand">AsyncRelayCommand</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/asyncrelaycommand">AsyncRelayCommand&lt;T&gt;</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/irelaycommand">IRelayCommand</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/irelaycommand">IRelayCommand&lt;T&gt;</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/iasyncrelaycommand">IAsyncRelayCommand</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/iasyncrelaycommand">IAsyncRelayCommand&lt;T&gt;</a></p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">MainViewModel</span> <span class="p">:</span> <span class="n">ObservableObject</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">IRelayCommand</span> <span class="n">OKCommand</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">RelayCommand</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="p">},</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">true</span><span class="p">);</span>

    <span class="k">public</span> <span class="n">IAsyncRelayCommand</span> <span class="n">CancelCommand</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">AsyncRelayCommand</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">);</span>
<span class="p">}</span></code></pre>
</div>
</div>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/generators/relaycommand">RelayCommand</a></p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="p">[</span><span class="nf">RelayCommand</span><span class="p">(</span><span class="n">CanExecute</span> <span class="p">=</span> <span class="k">nameof</span><span class="p">(</span><span class="n">CanGreetUser</span><span class="p">))]</span>
<span class="k">private</span> <span class="k">void</span> <span class="nf">GreetUser</span><span class="p">(</span><span class="n">User</span><span class="p">?</span> <span class="n">user</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Hello </span><span class="p">{</span><span class="n">user</span><span class="p">!.</span><span class="n">Name</span><span class="p">}</span><span class="s">!"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">private</span> <span class="kt">bool</span> <span class="nf">CanGreetUser</span><span class="p">(</span><span class="n">User</span><span class="p">?</span> <span class="n">user</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">user</span> <span class="k">is</span> <span class="k">not</span> <span class="k">null</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">[</span><span class="n">ObservableProperty</span><span class="p">]</span>
<span class="p">[</span><span class="nf">NotifyCanExecuteChangedFor</span><span class="p">(</span><span class="k">nameof</span><span class="p">(</span><span class="n">GreetUserCommand</span><span class="p">))]</span>
<span class="k">private</span> <span class="n">User</span><span class="p">?</span> <span class="n">selectedUser</span><span class="p">;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="c1">// Call IAsyncRelayCommand.Cancel to signal that token.</span>
<span class="p">[</span><span class="nf">RelayCommand</span><span class="p">(</span><span class="n">IncludeCancelCommand</span> <span class="p">=</span> <span class="k">true</span><span class="p">)]</span>
<span class="k">private</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">DoWorkAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">token</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Do some long running work...</span>
<span class="p">}</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/api//communitytoolkit.mvvm.messaging"><em>CommunityToolkit.Mvvm.Messaging</em></a></p>
<div class="ulist">
<ul>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/messenger">IMessenger</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/messenger">WeakReferenceMessenger</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/messenger">StrongReferenceMessenger</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/messenger">IRecipient&lt;TMessage&gt;</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/messenger">MessageHandler&lt;TRecipient, TMessage&gt;</a></p>
</li>
</ul>
</div>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/api//communitytoolkit.mvvm.messaging.messages"><em>CommunityToolkit.Mvvm.Messaging.Messages</em></a></p>
<div class="ulist">
<ul>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/api//CommunityToolkit.mvvm.Messaging.Messages.PropertyChangedMessage-1">PropertyChangedMessage&lt;T&gt;</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/api//CommunityToolkit.mvvm.Messaging.Messages.RequestMessage-1">RequestMessage&lt;T&gt;</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/api//CommunityToolkit.mvvm.Messaging.Messages.AsyncRequestMessage-1">AsyncRequestMessage&lt;T&gt;</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/api//CommunityToolkit.mvvm.Messaging.Messages.CollectionRequestMessage-1">CollectionRequestMessage&lt;T&gt;</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/api//CommunityToolkit.mvvm.Messaging.Messages.AsyncCollectionRequestMessage-1">AsyncCollectionRequestMessage&lt;T&gt;</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/api//CommunityToolkit.mvvm.Messaging.Messages.ValueChangedMessage-1">ValueChangedMessage&lt;T&gt;</a></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="data-binding">2. Data binding</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Data binding is the process that establishes a connection between the app UI and the data it displays.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>If the binding has the correct settings and the data provides the proper notifications, when the data changes its value, the elements that are bound to the data reflect changes automatically.</p>
</li>
<li>
<p>Data binding can also mean that if an outer representation of the data in an element changes, then the underlying data can be automatically updated to reflect the change.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Typically, each binding has four components:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://learn.microsoft.com/en-us/dotnet/desktop/wpf/data/media/index/basic-data-binding-diagram.png" alt="Diagram that shows the basic data binding model.">
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>A binding target object.</p>
</li>
<li>
<p>A target property.</p>
</li>
<li>
<p>A binding source.</p>
</li>
<li>
<p>A path to the value in the binding source to use.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For example, to bound the content of a <code>TextBox</code> to the <code>Employee.Name</code> property:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Target: <code>TextBox</code></p>
</li>
<li>
<p>Target property: 	<code>Text</code></p>
</li>
<li>
<p>Source object: 	<code>Employee</code></p>
</li>
<li>
<p>Source object value path: 	<code>Name</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>A binding contains all the information that can be shared across several binding expressions. A <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.data.bindingexpression">BindingExpression</a> is an instance expression that cannot be shared and contains all the instance information of the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.data.binding">Binding</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="c1">// Make a new source</span>
<span class="kt">var</span> <span class="n">myDataObject</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MyData</span><span class="p">();</span>
<span class="kt">var</span> <span class="n">myBinding</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Binding</span><span class="p">(</span><span class="s">"ColorName"</span><span class="p">)</span> <span class="p">{</span> <span class="n">Source</span> <span class="p">=</span> <span class="n">myDataObject</span> <span class="p">};</span>

<span class="c1">// Bind the data source to the TextBox control's Text dependency property</span>
<span class="n">myText</span><span class="p">.</span><span class="nf">SetBinding</span><span class="p">(</span><span class="n">TextBlock</span><span class="p">.</span><span class="n">TextProperty</span><span class="p">,</span> <span class="n">myBinding</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>A binding source object can be treated either as a single object whose properties contain data or as a data collection of polymorphic objects that are often grouped together (such as the result of a query to a database).</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://learn.microsoft.com/en-us/dotnet/desktop/wpf/data/media/index/data-binding-itemscontrol.png" alt="Diagram that shows the data binding ItemsControl object.">
</div>
</div>
<div class="paragraph">
<p>Any collection that implements the <code>IEnumerable</code> interface can be enumerated over. However, to set up dynamic bindings so that insertions or deletions in the collection update the UI automatically, the collection must implement the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.collections.specialized.inotifycollectionchanged">INotifyCollectionChanged</a> interface.</p>
</div>
<div class="paragraph">
<p>WPF provides the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.collections.objectmodel.observablecollection-1">ObservableCollection&lt;T&gt;</a> class, which is a built-in implementation of a data collection that exposes the <code>INotifyCollectionChanged</code> interface.</p>
</div>
<div class="paragraph">
<p>To fully support transferring data values from source objects to targets, each object in your collection that supports bindable properties must also implement the <code>INotifyPropertyChanged</code> interface.</p>
</div>
<div class="paragraph">
<p>A collection view is a layer on top of a binding source collection that allows you to navigate and display the source collection based on sort, filter, and group queries, without having to change the underlying source collection itself.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A collection view also maintains a pointer to the current item in the collection.</p>
<div class="paragraph">
<p>If the source collection implements the <code>INotifyCollectionChanged</code> interface, the changes raised by the <code>CollectionChanged</code> event are propagated to the views.</p>
</div>
</li>
<li>
<p>Because views do not change the underlying source collections, each source collection can have multiple views associated with it.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Once <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.itemscontrol">ItemsControl</a> is bound to a data collection, the data may need to be sorted, filtered, or grouped. To do that, use collection views, which are classes that implement the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.icollectionview">ICollectionView</a> interface.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A collection view is a layer on top of a binding source collection that allows to navigate and display the source collection based on sort, filter, and group queries, without having to change the underlying source collection itself.</p>
</li>
<li>
<p>A collection view also maintains a pointer to the current item in the collection.</p>
<div class="paragraph">
<p>If the source collection implements the <code>INotifyCollectionChanged</code> interface, the changes raised by the <code>CollectionChanged</code> event are propagated to the views.</p>
</div>
</li>
<li>
<p>Because views do not change the underlying source collections, each source collection can have multiple views associated with it.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;Window.Resources&gt;</span>
    <span class="nt">&lt;CollectionViewSource</span>
      <span class="na">Source=</span><span class="s">"{Binding Source={x:Static Application.Current}, Path=AuctionItems}"</span>
      <span class="na">x:Key=</span><span class="s">"listingDataView"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/Window.Resources&gt;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;ListBox</span> <span class="na">Name=</span><span class="s">"Master"</span> <span class="na">Grid.Row=</span><span class="s">"2"</span> <span class="na">Grid.ColumnSpan=</span><span class="s">"3"</span> <span class="na">Margin=</span><span class="s">"8"</span>
         <span class="na">ItemsSource=</span><span class="s">"{Binding Source={StaticResource listingDataView}}"</span> <span class="nt">/&gt;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">private</span> <span class="k">void</span> <span class="nf">AddSortCheckBox_Checked</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">RoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Sort the items first by Category and then by StartDate</span>
    <span class="n">listingDataView</span><span class="p">.</span><span class="n">SortDescriptions</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SortDescription</span><span class="p">(</span><span class="s">"Category"</span><span class="p">,</span> <span class="n">ListSortDirection</span><span class="p">.</span><span class="n">Ascending</span><span class="p">));</span>
    <span class="n">listingDataView</span><span class="p">.</span><span class="n">SortDescriptions</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SortDescription</span><span class="p">(</span><span class="s">"StartDate"</span><span class="p">,</span> <span class="n">ListSortDirection</span><span class="p">.</span><span class="n">Ascending</span><span class="p">));</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">private</span> <span class="k">void</span> <span class="nf">AddFilteringCheckBox_Checked</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">RoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(((</span><span class="n">CheckBox</span><span class="p">)</span><span class="n">sender</span><span class="p">).</span><span class="n">IsChecked</span> <span class="p">==</span> <span class="k">true</span><span class="p">)</span>
        <span class="n">listingDataView</span><span class="p">.</span><span class="n">Filter</span> <span class="p">+=</span> <span class="n">ListingDataView_Filter</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">listingDataView</span><span class="p">.</span><span class="n">Filter</span> <span class="p">-=</span> <span class="n">ListingDataView_Filter</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">void</span> <span class="nf">ListingDataView_Filter</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">FilterEventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Start with everything excluded</span>
    <span class="n">e</span><span class="p">.</span><span class="n">Accepted</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

    <span class="c1">// Only inlcude items with a price less than 25</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">Item</span> <span class="k">is</span> <span class="n">AuctionItem</span> <span class="n">product</span> <span class="p">&amp;&amp;</span> <span class="n">product</span><span class="p">.</span><span class="n">CurrentPrice</span> <span class="p">&lt;</span> <span class="m">25</span><span class="p">)</span>
        <span class="n">e</span><span class="p">.</span><span class="n">Accepted</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="c1">// This groups the items in the view by the property "Category"</span>
<span class="kt">var</span> <span class="n">groupDescription</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PropertyGroupDescription</span><span class="p">();</span>
<span class="n">groupDescription</span><span class="p">.</span><span class="n">PropertyName</span> <span class="p">=</span> <span class="s">"Category"</span><span class="p">;</span>
<span class="n">listingDataView</span><span class="p">.</span><span class="n">GroupDescriptions</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">groupDescription</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="sect2">
<h3 id="data-context">2.1. Data context</h3>
<div class="paragraph">
<p>When data binding is declared on XAML elements, they resolve data binding by looking at their immediate <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.datacontext">DataContext</a> property.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The data context is typically the <strong>binding source object</strong> for the <strong>binding source value path</strong> evaluation.</p>
</li>
<li>
<p>If the <code>DataContext</code> property for the object hosting the binding isn&#8217;t set, the parent element&#8217;s <code>DataContext</code> property is checked, and so on, up until the root of the XAML object tree.</p>
</li>
<li>
<p>In short, the data context used to resolve binding is inherited from the parent unless explicitly set on the object.</p>
</li>
<li>
<p>Bindings can be configured to resolve with a specific object, as opposed to using the data context for binding resolution.</p>
</li>
<li>
<p>When the <code>DataContext</code> property changes, all bindings that could be affected by the data context are reevaluated.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="data-flow">2.2. Data flow</h3>
<div class="imageblock">
<div class="content">
<img src="https://learn.microsoft.com/en-us/dotnet/desktop/wpf/data/media/index/databinding-dataflow.png" alt="Data binding data flow">
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>OneWay</strong> binding causes changes to the source property to automatically update the target property, but changes to the target property are not propagated back to the source property, which is appropriate if the control being bound is implicitly read-only.</p>
</li>
<li>
<p><strong>TwoWay</strong> binding causes changes to either the source property or the target property to automatically update the other, which is appropriate for editable forms or other fully interactive UI scenarios..</p>
<div class="paragraph">
<p>Most properties default to <code>OneWay</code> binding, but some dependency properties (typically properties of user-editable controls such as the <code>TextBox.Text</code> and <code>CheckBox.IsChecked</code> default to <code>TwoWay</code> binding. A programmatic way to determine whether a dependency property binds one-way or two-way by default is to get the property metadata with <code>DependencyProperty.GetMetadata</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">if</span> <span class="p">(</span><span class="n">TextBox</span><span class="p">.</span><span class="n">TextProperty</span><span class="p">.</span><span class="nf">GetMetadata</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">TextBox</span><span class="p">))</span> <span class="k">is</span> <span class="n">FrameworkPropertyMetadata</span> <span class="n">meta</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"</span><span class="p">{</span><span class="n">meta</span><span class="p">.</span><span class="n">BindsTwoWayByDefault</span><span class="p">}</span><span class="s">"</span><span class="p">);</span> <span class="c1">// True</span>
<span class="p">}</span></code></pre>
</div>
</div>
</li>
<li>
<p><strong>OneWayToSource</strong> is the reverse of <strong>OneWay</strong> binding; it updates the source property when the target property changes, which is appropriate if you only need to reevaluate the source value from the UI.</p>
</li>
<li>
<p><strong>OneTime</strong> binding causes the source property to initialize the target property but doesn&#8217;t propagate subsequent changes which is appropriate if either a snapshot of the current state is appropriate or the data is truly static.</p>
<div class="paragraph">
<p>If the data context changes or the object in the data context changes, the change is not reflected in the target property.</p>
</div>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
To detect source changes (applicable to <strong>OneWay</strong> and <strong>TwoWay</strong> bindings), the source must implement a suitable property change notification mechanism such as <a href="https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.inotifypropertychanged">INotifyPropertyChanged</a>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Bindings that are <strong>TwoWay</strong> or <strong>OneWayToSource</strong> listen for changes in the target property and propagate them back to the source, known as updating the source.</p>
</div>
<div class="paragraph">
<p>The <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.data.binding.updatesourcetrigger#system-windows-data-binding-updatesourcetrigger">Binding.UpdateSourceTrigger</a> property determines what triggers the update of the source.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://learn.microsoft.com/en-us/dotnet/desktop/wpf/data/media/index/data-binding-updatesource-trigger.png" alt="Diagram that shows the role of the UpdateSourceTrigger property.">
</div>
</div>
<div class="paragraph">
<p>If the <code>UpdateSourceTrigger</code> value is <code>UpdateSourceTrigger.PropertyChanged</code>, then the value pointed to by the right arrow of <code>TwoWay</code> or the <code>OneWayToSource</code> bindings is updated as soon as the target property changes.</p>
</div>
<div class="paragraph">
<p>However, if the <code>UpdateSourceTrigger</code> value is <code>LostFocus</code>, then that value only is updated with the new value when the target property loses focus.</p>
</div>
<div class="paragraph">
<p>If the UpdateSourceTrigger value of the binding is set to <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.data.updatesourcetrigger?view=windowsdesktop-8.0#system-windows-data-updatesourcetrigger-explicit">Explicit</a>, the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.data.bindingexpression.updatesource">UpdateSource</a> method must be called or the changes will not propagate back to the source.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="kt">var</span> <span class="n">textBlock</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TextBlock</span><span class="p">();</span>
<span class="kt">var</span> <span class="n">nameBindingObject</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Binding</span><span class="p">(</span><span class="s">"Name"</span><span class="p">);</span>
<span class="n">nameBindingObject</span><span class="p">.</span><span class="n">UpdateSourceTrigger</span> <span class="p">=</span> <span class="n">UpdateSourceTrigger</span><span class="p">.</span><span class="n">Explicit</span><span class="p">;</span>

<span class="c1">// ...</span>

<span class="n">textBlock</span><span class="p">.</span><span class="nf">SetBinding</span><span class="p">(</span><span class="n">TextBlock</span><span class="p">.</span><span class="n">TextProperty</span><span class="p">,</span> <span class="n">nameBindingObject</span><span class="p">);</span>
<span class="kt">var</span> <span class="n">bindingExpression</span> <span class="p">=</span> <span class="n">textBlock</span><span class="p">.</span><span class="nf">GetBindingExpression</span><span class="p">(</span><span class="n">TextBlock</span><span class="p">.</span><span class="n">TextProperty</span><span class="p">);</span>
<span class="n">bindingExpression</span><span class="p">.</span><span class="nf">UpdateSource</span><span class="p">();</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="data-conversion">2.3. Data conversion</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="p">[</span><span class="nf">ValueConversion</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">Color</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">SolidColorBrush</span><span class="p">))]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">ColorBrushConverter</span> <span class="p">:</span> <span class="n">IValueConverter</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">object</span> <span class="nf">Convert</span><span class="p">(</span><span class="kt">object</span> <span class="k">value</span><span class="p">,</span> <span class="n">Type</span> <span class="n">targetType</span><span class="p">,</span> <span class="kt">object</span> <span class="n">parameter</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Globalization</span><span class="p">.</span><span class="n">CultureInfo</span> <span class="n">culture</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Color</span> <span class="n">color</span> <span class="p">=</span> <span class="p">(</span><span class="n">Color</span><span class="p">)</span><span class="k">value</span><span class="p">;</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">SolidColorBrush</span><span class="p">(</span><span class="n">color</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="kt">object</span> <span class="nf">ConvertBack</span><span class="p">(</span><span class="kt">object</span> <span class="k">value</span><span class="p">,</span> <span class="n">Type</span> <span class="n">targetType</span><span class="p">,</span> <span class="kt">object</span> <span class="n">parameter</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Globalization</span><span class="p">.</span><span class="n">CultureInfo</span> <span class="n">culture</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="https://learn.microsoft.com/en-us/dotnet/desktop/wpf/data/media/index/data-binding-button-default-conversion.png" alt="Diagram that shows the data binding Default property.">
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="c1">/// &lt;summary&gt;</span>
<span class="c1">/// Provides a way to apply custom logic to a binding.</span>
<span class="c1">/// &lt;/summary&gt;</span>
<span class="c1">/// &lt;remarks&gt;Value converters are culture-aware. Both the Convert and ConvertBack methods have a culture parameter that indicates the cultural information.&lt;/remarks&gt;</span>
<span class="k">public</span> <span class="k">interface</span> <span class="nc">IValueConverter</span>
<span class="p">{</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// The data binding engine calls this method when it propagates a value from the binding source to the binding target.</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="c1">/// &lt;param name="value"&gt;The value produced by the binding source.&lt;/param&gt;</span>
    <span class="c1">/// &lt;param name="targetType"&gt;The type of the binding target property.&lt;/param&gt;</span>
    <span class="c1">/// &lt;param name="parameter"&gt;The converter parameter to use.&lt;/param&gt;</span>
    <span class="c1">/// &lt;param name="culture"&gt;The culture to use in the converter.&lt;/param&gt;</span>
    <span class="c1">/// &lt;returns&gt;A converted value. If the method returns null, the valid null value is used.&lt;/returns&gt;</span>
    <span class="c1">/// &lt;remarks&gt;</span>
    <span class="c1">/// A return value of &lt;see cref="DependencyProperty.UnsetValue"/&gt; indicates that the converter produced no value and that the binding uses the &lt;see cref="BindingBase.FallbackValue"/&gt;, if available, or the default value instead.</span>
    <span class="c1">/// A return value of &lt;see cref="Binding.DoNothing"/&gt; indicates that the binding does not transfer the value or use the &lt;see cref="BindingBase.FallbackValue"/&gt; or default value.</span>
    <span class="c1">/// &lt;/remarks&gt;</span>
    <span class="kt">object</span> <span class="nf">Convert</span><span class="p">(</span><span class="kt">object</span> <span class="k">value</span><span class="p">,</span> <span class="n">Type</span> <span class="n">targetType</span><span class="p">,</span> <span class="kt">object</span> <span class="n">parameter</span><span class="p">,</span> <span class="n">CultureInfo</span> <span class="n">culture</span><span class="p">);</span>

    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// The data binding engine calls this method when it propagates a value from the binding target to the binding source.</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="c1">/// &lt;param name="value"&gt;The value that is produced by the binding target.&lt;/param&gt;</span>
    <span class="c1">/// &lt;param name="targetType"&gt;The type to convert to.&lt;/param&gt;</span>
    <span class="c1">/// &lt;param name="parameter"&gt;The converter parameter to use.&lt;/param&gt;</span>
    <span class="c1">/// &lt;param name="culture"&gt;The culture to use in the converter.&lt;/param&gt;</span>
    <span class="c1">/// &lt;returns&gt;A converted value. If the method returns null, the valid null value is used.&lt;/returns&gt;</span>
    <span class="c1">/// &lt;remarks&gt;</span>
    <span class="c1">/// A return value of &lt;see cref="DependencyProperty.UnsetValue"/&gt; indicates that the converter produced no value and that the binding uses the &lt;see cref="BindingBase.FallbackValue"/&gt;, if available, or the default value instead.</span>
    <span class="c1">/// A return value of &lt;see cref="Binding.DoNothing"/&gt; indicates that the binding does not transfer the value or use the &lt;see cref="BindingBase.FallbackValue"/&gt; or default value.</span>
    <span class="c1">/// &lt;/remarks&gt;</span>
    <span class="kt">object</span> <span class="nf">ConvertBack</span><span class="p">(</span><span class="kt">object</span> <span class="k">value</span><span class="p">,</span> <span class="n">Type</span> <span class="n">targetType</span><span class="p">,</span> <span class="kt">object</span> <span class="n">parameter</span><span class="p">,</span> <span class="n">CultureInfo</span> <span class="n">culture</span><span class="p">);</span>
<span class="p">}</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="data-validation">2.4. Data validation</h3>
<div class="paragraph">
<p>WPF has two types of built-in <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.validationrule">ValidationRule</a> objects to check whether the value of a property is valid.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.exceptionvalidationrule">ExceptionValidationRule</a> checks for exceptions thrown during the update of the binding source property.</p>
<div class="paragraph">
<p>An alternative syntax to setting the <code>ExceptionValidationRule</code> explicitly is to set the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.data.binding.validatesonexceptions">ValidatesOnExceptions</a> property to <code>true</code> on a <code>Binding</code> or <code>MultiBinding</code> object.</p>
</div>
</li>
<li>
<p>A <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.dataerrorvalidationrule">DataErrorValidationRule</a> object checks for errors that are raised by objects that implement the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.idataerrorinfo">IDataErrorInfo</a> or <a href="https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.inotifydataerrorinfo">INotifyDataErrorInfo</a> interface.</p>
<div class="paragraph">
<p>An alternative syntax to setting the <code>DataErrorValidationRule</code> explicitly is to set the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.data.binding.validatesondataerrors">ValidatesOnDataErrors</a> property to <code>true</code> on a <code>Binding</code> or <code>MultiBinding</code> object.</p>
</div>
</li>
<li>
<p>Custom validation rule  objects can also be defined by deriving from the <code>ValidationRule</code> class and implementing the <code>Validate</code> method.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>One way to provide some feedback about the error on the app UI is to set the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.validation.errortemplate">Validation.ErrorTemplate</a> attached property to a custom <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.controltemplate">ControlTemplate</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;ControlTemplate</span> <span class="na">x:Key=</span><span class="s">"validationTemplate"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;DockPanel&gt;</span>
        <span class="nt">&lt;TextBlock</span> <span class="na">Foreground=</span><span class="s">"Red"</span> <span class="na">FontSize=</span><span class="s">"20"</span><span class="nt">&gt;</span>!<span class="nt">&lt;/TextBlock&gt;</span>
        <span class="c">&lt;!-- The AdornedElementPlaceholder element specifies where the control being adorned should be placed. --&gt;</span>
        <span class="nt">&lt;AdornedElementPlaceholder/&gt;</span>
    <span class="nt">&lt;/DockPanel&gt;</span>
<span class="nt">&lt;/ControlTemplate&gt;</span></code></pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="https://learn.microsoft.com/en-us/dotnet/desktop/wpf/data/media/index/demo-validation-date.png?view=netdesktop-8.0" alt="Data binding validation error for date">
</div>
</div>
<div class="paragraph">
<p>In addition, the error message may also be displayed using a <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.tooltip">ToolTip</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;Style</span> <span class="na">x:Key=</span><span class="s">"textStyleTextBox"</span> <span class="na">TargetType=</span><span class="s">"TextBox"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"Foreground"</span> <span class="na">Value=</span><span class="s">"#333333"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"MaxLength"</span> <span class="na">Value=</span><span class="s">"40"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"Width"</span> <span class="na">Value=</span><span class="s">"392"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;Style.Triggers&gt;</span>
        <span class="nt">&lt;Trigger</span> <span class="na">Property=</span><span class="s">"Validation.HasError"</span> <span class="na">Value=</span><span class="s">"true"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"ToolTip"</span>
                    <span class="na">Value=</span><span class="s">"{Binding (Validation.Errors).CurrentItem.ErrorContent, RelativeSource={RelativeSource Self}}"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/Trigger&gt;</span>
    <span class="nt">&lt;/Style.Triggers&gt;</span>
<span class="nt">&lt;/Style&gt;</span></code></pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="https://learn.microsoft.com/en-us/dotnet/desktop/wpf/data/media/index/demo-validation-price.png?view=netdesktop-8.0" alt="Data binding validation error for price">
</div>
</div>
</div>
<div class="sect2">
<h3 id="binding-path">2.5. Binding path</h3>
<div class="paragraph">
<p>If the binding source is an object, use the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.data.binding.path#system-windows-data-binding-path">Binding.Path</a> property to specify the value to use for the binding. If binding to XML data, use the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.data.binding.xpath#system-windows-data-binding-xpath">Binding.XPath</a> property to specify the value.</p>
</div>
<div class="paragraph">
<p>Use the <code>Path</code> property to specify the source value to bind to:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>In the simplest case, the <code>Path</code> property value is the name of the property of the source object to use for the binding, such as <code>Path=PropertyName</code>.</p>
</li>
<li>
<p>Subproperties of a property can be specified by a similar syntax as in C#.</p>
<div class="paragraph">
<p>For instance, the clause <code>Path=ShoppingCart.Order</code> sets the binding to the subproperty <code>Order</code> of the object or property <code>ShoppingCart</code>.</p>
</div>
</li>
<li>
<p>To bind to an attached property, place parentheses around the attached property.</p>
<div class="paragraph">
<p>For example, to bind to the attached property <code>DockPanel.Dock</code>, the syntax is <code>Path=(DockPanel.Dock)</code>.</p>
</div>
</li>
<li>
<p>Indexers of a property can be specified within square brackets following the property name where the indexer is applied.</p>
<div class="paragraph">
<p>For instance, the clause <code>Path=ShoppingCart[0]</code> sets the binding to the index that corresponds to how your property&#8217;s internal indexing handles the literal string "0".</p>
</div>
<div class="paragraph">
<p>Nested indexers are also supported.</p>
</div>
</li>
<li>
<p>Indexers and subproperties can be mixed in a <code>Path</code> clause; for example, <code>Path=ShoppingCart.ShippingInfo[MailingAddress,Street]</code>.</p>
</li>
<li>
<p>Inside indexers, there can be multiple indexer parameters separated by commas (<code>,</code>). The type of each parameter can be specified with parentheses.</p>
<div class="paragraph">
<p>For example, <code>Path="[(sys:Int32)42,(sys:Int32)24]"</code>, where <code>sys</code> is mapped to the <code>System</code> namespace.</p>
</div>
</li>
<li>
<p>When the source is a collection view, the current item can be specified with a slash (<code>/</code>).</p>
<div class="paragraph">
<p>For example, the clause <code>Path=/</code> sets the binding to the current item in the view.</p>
</div>
<div class="paragraph">
<p>When the source is a collection, this syntax specifies the current item of the default collection view.</p>
</div>
</li>
<li>
<p>Property names and slashes can be combined to traverse properties that are collections.</p>
<div class="paragraph">
<p>For example, <code>Path=/Offices/ManagerName</code> specifies the current item of the source collection, which contains an <code>Offices</code> property that is also a collection. Its current item is an object that contains a <code>ManagerName</code> property.</p>
</div>
</li>
<li>
<p>Optionally, a period (<code>.</code>) path can be used to bind to the current source.</p>
<div class="paragraph">
<p>For example, <code>Text="{Binding}"</code> is equivalent to <code>Text="{Binding Path=.}"</code>.</p>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="binding-source">2.6. Binding source</h3>
<div class="paragraph">
<p>Using the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.datacontext">DataContext</a> property on a parent element is useful when binding multiple properties to the same source. However, sometimes it may be more appropriate to specify the binding source on individual binding declarations.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;DockPanel</span> <span class="na">xmlns=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
           <span class="na">xmlns:x=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml"</span>
           <span class="na">xmlns:c=</span><span class="s">"clr-namespace:SDKSample"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;DockPanel.Resources&gt;</span>
        <span class="nt">&lt;c:MyData</span> <span class="na">x:Key=</span><span class="s">"myDataSource"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/DockPanel.Resources&gt;</span>
    <span class="nt">&lt;DockPanel.DataContext&gt;</span>
        <span class="nt">&lt;Binding</span> <span class="na">Source=</span><span class="s">"{StaticResource myDataSource}"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/DockPanel.DataContext&gt;</span>
    <span class="nt">&lt;Button</span> <span class="na">Background=</span><span class="s">"{Binding Path=ColorName}"</span>
            <span class="na">Width=</span><span class="s">"150"</span> <span class="na">Height=</span><span class="s">"30"</span><span class="nt">&gt;</span>
        I am bound to be RED!
    <span class="nt">&lt;/Button&gt;</span>
<span class="nt">&lt;/DockPanel&gt;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;DockPanel</span> <span class="na">xmlns=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
           <span class="na">xmlns:x=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml"</span>
           <span class="na">xmlns:c=</span><span class="s">"clr-namespace:SDKSample"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;DockPanel.Resources&gt;</span>
        <span class="nt">&lt;c:MyData</span> <span class="na">x:Key=</span><span class="s">"myDataSource"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/DockPanel.Resources&gt;</span>
    <span class="nt">&lt;Button</span> <span class="na">Background=</span><span class="s">"{Binding Source={StaticResource myDataSource}, Path=ColorName}"</span>
            <span class="na">Width=</span><span class="s">"150"</span> <span class="na">Height=</span><span class="s">"30"</span><span class="nt">&gt;</span>
        I am bound to be RED!
    <span class="nt">&lt;/Button&gt;</span>
<span class="nt">&lt;/DockPanel&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.data.binding.elementname?view=windowsdesktop-8.0">Binding.ElementName</a> and <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.data.binding.relativesource?view=windowsdesktop-8.0">Binding.RelativeSource</a> properties also be used to set the source of the binding explicitly.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;StackPanel&gt;</span>
    <span class="nt">&lt;Slider</span>
        <span class="na">Name=</span><span class="s">"RectangleHeight"</span>
        <span class="na">Width=</span><span class="s">"100"</span>
        <span class="na">HorizontalAlignment=</span><span class="s">"Left"</span>
        <span class="na">Maximum=</span><span class="s">"72"</span>
        <span class="na">Minimum=</span><span class="s">"5"</span>
        <span class="na">Orientation=</span><span class="s">"Horizontal"</span>
        <span class="na">Value=</span><span class="s">"16"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;Button</span> <span class="na">FontSize=</span><span class="s">"{Binding ElementName=RectangleHeight, Path=Value}"</span><span class="nt">&gt;</span>Hello World!<span class="nt">&lt;/Button&gt;</span>
<span class="nt">&lt;/StackPanel&gt;</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="binding-in-xaml">2.7. Binding in XAML</h3>
<div class="paragraph">
<p><a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.data.binding">Binding</a> is a markup extension.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>When using the binding extension to declare a binding, the declaration consists of a series of clauses following the Binding keyword and separated by commas (,).</p>
</li>
<li>
<p>The clauses in the binding declaration can be in any order and there are many possible combinations.</p>
</li>
<li>
<p>The clauses are <code>Name=Value</code> pairs, where <code>Name</code> is the name of the Binding property and <code>Value</code> is the value for the property.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>When creating binding declaration strings in markup, they must be attached to the specific dependency property of a target object.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding Source={StaticResource myDataSource}, Path=Name}"</span><span class="nt">/&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Object element syntax is an alternative to creating the binding declaration. In most cases, there&#8217;s no particular advantage to using either the markup extension or the object element syntax.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;TextBlock&gt;</span>
    <span class="nt">&lt;TextBlock.Text&gt;</span>
        <span class="nt">&lt;Binding</span> <span class="na">Source=</span><span class="s">"{StaticResource myDataSource}"</span> <span class="na">Path=</span><span class="s">"Name"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/TextBlock.Text&gt;</span>
<span class="nt">&lt;/TextBlock&gt;</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="binding-in-code">2.8. Binding in code</h3>
<div class="paragraph">
<p>Another way to specify a binding is to set properties directly on a <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.data.binding">Binding</a> object in code, and then assign the binding to a property.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">private</span> <span class="k">void</span> <span class="nf">Window_Loaded</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">RoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Make a new data source object</span>
    <span class="kt">var</span> <span class="n">personDetails</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Name</span> <span class="p">=</span> <span class="s">"John"</span><span class="p">,</span>
        <span class="n">Birthdate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="s">"2001-02-03"</span><span class="p">)</span>
    <span class="p">};</span>

    <span class="c1">// New binding object using the path of 'Name' for whatever source object is used</span>
    <span class="kt">var</span> <span class="n">nameBindingObject</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Binding</span><span class="p">(</span><span class="s">"Name"</span><span class="p">);</span>

    <span class="c1">// Configure the binding</span>
    <span class="n">nameBindingObject</span><span class="p">.</span><span class="n">Mode</span> <span class="p">=</span> <span class="n">BindingMode</span><span class="p">.</span><span class="n">OneWay</span><span class="p">;</span>
    <span class="n">nameBindingObject</span><span class="p">.</span><span class="n">Source</span> <span class="p">=</span> <span class="n">personDetails</span><span class="p">;</span>
    <span class="n">nameBindingObject</span><span class="p">.</span><span class="n">Converter</span> <span class="p">=</span> <span class="n">NameConverter</span><span class="p">.</span><span class="n">Instance</span><span class="p">;</span>
    <span class="n">nameBindingObject</span><span class="p">.</span><span class="n">ConverterCulture</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CultureInfo</span><span class="p">(</span><span class="s">"en-US"</span><span class="p">);</span>

    <span class="c1">// Set the binding to a target object. The TextBlock.Name property on the NameBlock UI element</span>
    <span class="n">BindingOperations</span><span class="p">.</span><span class="nf">SetBinding</span><span class="p">(</span><span class="n">NameBlock</span><span class="p">,</span> <span class="n">TextBlock</span><span class="p">.</span><span class="n">TextProperty</span><span class="p">,</span> <span class="n">nameBindingObject</span><span class="p">);</span>
<span class="p">}</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="property-system">3. Property system</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Windows Presentation Foundation (WPF) provides a set of services that can be used to extend the functionality of a type&#8217;s property. Collectively, these services are referred to as the <strong>WPF property system</strong>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A property that&#8217;s backed by the WPF property system is known as a <strong>dependency property</strong>.</p>
</li>
<li>
<p><strong>Attached properties</strong> are a XAML concept, dependency properties are a WPF concept.</p>
</li>
<li>
<p>Attached properties enable extra property/value pairs to be set on any XAML element that derives from <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.dependencyobject">DependencyObject</a>, even though the element doesn&#8217;t define those extra properties in its object model.</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="dependency-properties-and-clr-properties">3.1. Dependency properties and CLR properties</h3>
<div class="paragraph">
<p>WPF properties are typically exposed as standard .NET properties. The purpose of dependency properties is to provide a way to compute the value of a property based on the value of other inputs, such as:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>System properties, such as themes and user preference.</p>
</li>
<li>
<p>Just-in-time property determination mechanisms, such as data binding and animations/storyboards.</p>
</li>
<li>
<p>Multiple-use templates, such as resources and styles.</p>
</li>
<li>
<p>Values known through parent-child relationships with other elements in the element tree.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Also, a dependency property can provide:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Self-contained validation.</p>
</li>
<li>
<p>Default values.</p>
</li>
<li>
<p>Callbacks that monitor changes to other properties.</p>
</li>
<li>
<p>A system that can coerce property values based on runtime information.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Derived classes can change some characteristics of an existing property by overriding the metadata of a dependency property, rather than overriding the actual implementation of existing properties or creating new properties.</p>
</div>
</div>
<div class="sect2">
<h3 id="dependency-properties-back-clr-properties">3.2. Dependency properties back CLR properties</h3>
<div class="paragraph">
<p>Dependency properties and the WPF property system extend property functionality by providing a <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.dependencyproperty">DependencyProperty</a> type that backs a property, as an alternative to the standard pattern of backing a property with a private field.</p>
</div>
<div class="paragraph">
<p>Here&#8217;s some commonly used terminology:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Dependency property</strong>, which is a property that&#8217;s backed by a <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.dependencyproperty">DependencyProperty</a>.</p>
</li>
<li>
<p><strong>Dependency property identifier</strong>, which is a <code>DependencyProperty</code> instance obtained as a return value when registering a dependency property, and then stored as a static member of a class. Many of the APIs that interact with the WPF property system use the dependency property identifier as a parameter.</p>
</li>
<li>
<p><strong>CLR "wrapper"</strong>, which is the get and set implementations for the property. These implementations incorporate the dependency property identifier by using it in the <code>GetValue</code> and <code>SetValue</code> calls. In this way, the WPF property system provides the backing for the property.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The following example defines the <code>IsSpinning</code> dependency property to show the relationship of the <code>DependencyProperty</code> identifier to the property that it backs.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">public</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">DependencyProperty</span> <span class="n">IsSpinningProperty</span> <span class="p">=</span> <span class="n">DependencyProperty</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span>
    <span class="s">"IsSpinning"</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">bool</span><span class="p">),</span>
    <span class="k">typeof</span><span class="p">(</span><span class="n">MainWindow</span><span class="p">)</span>
    <span class="p">);</span>

<span class="k">public</span> <span class="kt">bool</span> <span class="n">IsSpinning</span>
<span class="p">{</span>
    <span class="k">get</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span><span class="nf">GetValue</span><span class="p">(</span><span class="n">IsSpinningProperty</span><span class="p">);</span>
    <span class="k">set</span> <span class="p">=&gt;</span> <span class="nf">SetValue</span><span class="p">(</span><span class="n">IsSpinningProperty</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The naming convention of the property and its backing <code>DependencyProperty</code> field is important. The name of the field is always the name of the property, with the suffix <code>Property</code> appended.</p>
</div>
</div>
<div class="sect2">
<h3 id="attached-properties">3.3. Attached properties</h3>
<div class="paragraph">
<p>Although any object can set an attached property value, that doesn&#8217;t mean setting a value will produce a tangible result or the value will be used by another object.</p>
</div>
<div class="paragraph">
<p>Attached property usage typically follows one of these models:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The type that defines the attached property is the parent of the elements that set values for the attached property. The parent type iterates its child objects through internal logic that acts on the object tree structure, obtains the values, and acts on those values in some manner.</p>
</li>
<li>
<p>The type that defines the attached property is used as the child element for various possible parent elements and content models.</p>
</li>
<li>
<p>The type that defines the attached property represents a service. Other types set values for the attached property. Then, when the element that set the property is evaluated in the context of the service, the attached property values are obtained through internal logic of the service class.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Attached properties in WPF don&#8217;t have the typical CLR <code>get</code> and <code>set</code> wrapper methods because the properties might be set from outside of the CLR namespace.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>To permit a XAML processor to set those values when parsing XAML, the class that defines the attached property must implement dedicated accessor methods in the form of <code>Get&lt;property name&gt;</code> and <code>Set&lt;property name&gt;</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="c1">// Attached properties in code</span>
<span class="n">DockPanel</span> <span class="n">myDockPanel</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>
<span class="n">TextBox</span> <span class="n">myTextBox</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>
<span class="n">myTextBox</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="s">"Enter text"</span><span class="p">;</span>

<span class="c1">// Add child element to the DockPanel.</span>
<span class="n">myDockPanel</span><span class="p">.</span><span class="n">Children</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">myTextBox</span><span class="p">);</span>

<span class="c1">// Set the attached property value.</span>
<span class="n">DockPanel</span><span class="p">.</span><span class="nf">SetDock</span><span class="p">(</span><span class="n">myTextBox</span><span class="p">,</span> <span class="n">Dock</span><span class="p">.</span><span class="n">Top</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">public</span> <span class="k">static</span> <span class="n">Dock</span> <span class="nf">GetDock</span><span class="p">(</span><span class="n">UIElement</span> <span class="n">element</span><span class="p">);</span>
<span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">SetDock</span><span class="p">(</span><span class="n">UIElement</span> <span class="n">element</span><span class="p">,</span> <span class="n">Dock</span> <span class="n">dock</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="c">&lt;!-- Attached properties in XAML --&gt;</span>
<span class="nt">&lt;DockPanel&gt;</span>
    <span class="nt">&lt;TextBox</span> <span class="na">DockPanel.Dock=</span><span class="s">"Top"</span><span class="nt">&gt;</span>Enter text<span class="nt">&lt;/TextBox&gt;</span>
<span class="nt">&lt;/DockPanel&gt;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>Define attached property as a dependency in the defining class by declaring a <code>public static readonly</code> field of type <code>DependencyProperty</code>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Then, assign the return value of the <code>RegisterAttached</code> method to the field, which is also known as the <em>dependency property identifier</em>.</p>
</li>
<li>
<p>Follow the WPF property naming convention that distinguishes fields from the properties that they represent, by naming the identifier field <code>&lt;property name&gt;Property</code>.</p>
</li>
<li>
<p>Also, provide static <code>Get&lt;property name&gt;</code> and <code>Set&lt;property name&gt;</code> accessor methods, which lets the property system access the attached property.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">Aquarium</span> <span class="p">:</span> <span class="n">UIElement</span>
<span class="p">{</span>
    <span class="c1">// Register an attached dependency property with the specified</span>
    <span class="c1">// property name, property type, owner type, and property metadata.</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">DependencyProperty</span> <span class="n">HasFishProperty</span> <span class="p">=</span>
        <span class="n">DependencyProperty</span><span class="p">.</span><span class="nf">RegisterAttached</span><span class="p">(</span>
      <span class="s">"HasFish"</span><span class="p">,</span>
      <span class="k">typeof</span><span class="p">(</span><span class="kt">bool</span><span class="p">),</span>
      <span class="k">typeof</span><span class="p">(</span><span class="n">Aquarium</span><span class="p">),</span>
      <span class="k">new</span> <span class="nf">FrameworkPropertyMetadata</span><span class="p">(</span><span class="n">defaultValue</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span>
          <span class="n">flags</span><span class="p">:</span> <span class="n">FrameworkPropertyMetadataOptions</span><span class="p">.</span><span class="n">AffectsRender</span><span class="p">)</span>
    <span class="p">);</span>

    <span class="c1">// Declare a get accessor method.</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">GetHasFish</span><span class="p">(</span><span class="n">UIElement</span> <span class="n">target</span><span class="p">)</span> <span class="p">=&gt;</span>
        <span class="p">(</span><span class="kt">bool</span><span class="p">)</span><span class="n">target</span><span class="p">.</span><span class="nf">GetValue</span><span class="p">(</span><span class="n">HasFishProperty</span><span class="p">);</span>

    <span class="c1">// Declare a set accessor method.</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">SetHasFish</span><span class="p">(</span><span class="n">UIElement</span> <span class="n">target</span><span class="p">,</span> <span class="kt">bool</span> <span class="k">value</span><span class="p">)</span> <span class="p">=&gt;</span>
        <span class="n">target</span><span class="p">.</span><span class="nf">SetValue</span><span class="p">(</span><span class="n">HasFishProperty</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span>
<span class="p">}</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <code>get</code> accessor method signature is <code>public static object Get&lt;property name&gt;(DependencyObject target)</code>, where:</p>
<div class="ulist">
<ul>
<li>
<p><code>target</code> is the <code>DependencyObject</code> from which the attached property is read.</p>
<div class="paragraph">
<p>The target type can be more specific than <code>DependencyObject</code>. For example, the <code>DockPanel.GetDock</code> accessor method types the target as <code>UIElement</code> because the attached property is intended to be set on <code>UIElement</code> instances.</p>
</div>
</li>
<li>
<p>The return type can be more specific than <code>object</code>. For example, the <code>GetDock</code> method types the returned value as <code>Dock</code> because the return value should be a <code>Dock</code> enumeration.</p>
</li>
</ul>
</div>
</li>
<li>
<p>The <code>set</code> accessor method signature is <code>public static void Set&lt;property name&gt;(DependencyObject target, object value)</code>, where:</p>
<div class="ulist">
<ul>
<li>
<p><code>target</code> is the <code>DependencyObject</code> on which the attached property is written.</p>
<div class="paragraph">
<p>The <code>target</code> type can be more specific than <code>DependencyObject</code>. For example, the <code>SetDock</code> method types the target as <code>UIElement</code> because the attached property is intended to be set on <code>UIElement</code> instances.</p>
</div>
</li>
<li>
<p>The <code>value</code> type can be more specific than <code>object</code>. For example, the <code>SetDock</code> method requires a <code>Dock</code> value.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="property-value-inheritance">3.4. Property value inheritance</h3>
<div class="paragraph">
<p>Property value inheritance is a feature of the Windows Presentation Foundation (WPF) property system and applies to dependency properties.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Property value inheritance lets child elements in a tree of elements obtain the value of a particular property from the nearest parent element.</p>
</li>
<li>
<p>Since a parent element might also have obtained its property value through property value inheritance, the system potentially recurses back to the page root.</p>
</li>
<li>
<p>The WPF property system doesn&#8217;t enable property value inheritance by default, and value inheritance is inactive unless specifically enabled in dependency property <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.frameworkpropertymetadata.inherits#system-windows-frameworkpropertymetadata-inherits">metadata</a>.</p>
</li>
<li>
<p>Even with property value inheritance enabled, a child element will only inherit a property value in the absence of a higher <a href="https://learn.microsoft.com/en-us/dotnet/desktop/wpf/properties/dependency-property-value-precedence?view=netdesktop-8.0#dependency-property-precedence-list">precedence</a> value.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="routed-events">4. Routed events</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Windows Presentation Foundation (WPF) application developers and component authors can use routed events to propagate events through an element tree, and invoke event handlers on multiple listeners in the tree.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>From a <strong>functional</strong> perspective, a routed event is a type of event that can invoke handlers on multiple listeners in an element tree, not just on the event source.</p>
<div class="ulist">
<ul>
<li>
<p>An <em>event listener</em> is the element where an <em>event handler</em> is attached and invoked.</p>
</li>
<li>
<p>An <em>event source</em> is the element or object that originally raised an event.</p>
</li>
</ul>
</div>
</li>
<li>
<p>From an <strong>implementation</strong> perspective, a routed event is an event registered with the WPF event system, backed by an instance of the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.routedevent">RoutedEvent</a> class, and processed by the WPF event system.</p>
<div class="ulist">
<ul>
<li>
<p>Typically, a routed event is implemented with a CLR event "wrapper" to enable attaching handlers in XAML and in code-behind as you would a CLR event.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>Depending on how a routed event is defined, when the event is raised on a source element it:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Bubbles</strong> up through element tree from the source element to the root element, which is typically a page or window.</p>
</li>
<li>
<p><strong>Tunnels</strong> down through the element tree from the root element to the source element.</p>
</li>
<li>
<p>Doesn&#8217;t travel through the element tree, and only occurs on the source element <strong>directly</strong>.</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="routed-event-and-event-handler">4.1. Routed event and event handler</h3>
<div class="paragraph">
<p>A routed event is an event registered with the WPF event system, backed by an instance of the <code>RoutedEvent</code> class, and processed by the WPF event system.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>RoutedEvent</code> instance, obtained from <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.eventmanager.registerroutedevent">registration</a>, is typically stored as a <code>public static readonly</code> member of the "owner" class, that registered it.</p>
</li>
<li>
<p>Typically, a routed event implements an identically named CLR event "wrapper" that is similar to how a dependency property is a CLR property.</p>
<div class="ulist">
<ul>
<li>
<p>The CLR event wrapper contains <code>add</code> and <code>remove</code> accessors to enable attaching handlers in XAML and in code-behind through language-specific event syntax.</p>
</li>
<li>
<p>The <code>add</code> and <code>remove</code> accessors override their CLR implementation and call the routed event <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.uielement.addhandler">AddHandler</a> and <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.uielement.removehandler">RemoveHandler</a> methods.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="c1">// Register a custom routed event using the Bubble routing strategy.</span>
<span class="k">public</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">RoutedEvent</span> <span class="n">TapEvent</span> <span class="p">=</span> <span class="n">EventManager</span><span class="p">.</span><span class="nf">RegisterRoutedEvent</span><span class="p">(</span>
    <span class="n">name</span><span class="p">:</span> <span class="s">"Tap"</span><span class="p">,</span>
    <span class="n">routingStrategy</span><span class="p">:</span> <span class="n">RoutingStrategy</span><span class="p">.</span><span class="n">Bubble</span><span class="p">,</span>
    <span class="n">handlerType</span><span class="p">:</span> <span class="k">typeof</span><span class="p">(</span><span class="n">RoutedEventHandler</span><span class="p">),</span>
    <span class="n">ownerType</span><span class="p">:</span> <span class="k">typeof</span><span class="p">(</span><span class="n">CustomButton</span><span class="p">));</span>

<span class="c1">// Provide CLR accessors for adding and removing an event handler.</span>
<span class="k">public</span> <span class="k">event</span> <span class="n">RoutedEventHandler</span> <span class="n">Tap</span>
<span class="p">{</span>
    <span class="k">add</span> <span class="p">{</span> <span class="nf">AddHandler</span><span class="p">(</span><span class="n">TapEvent</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span> <span class="p">}</span>
    <span class="k">remove</span> <span class="p">{</span> <span class="nf">RemoveHandler</span><span class="p">(</span><span class="n">TapEvent</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span> <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>In XAML, attach an event handler to an element by declaring the event name as an attribute on the event listener element.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The attribute value is the handler method name.</p>
</li>
<li>
<p>The handler method must be implemented in the code-behind partial class for the XAML page.</p>
</li>
<li>
<p>The event listener is the element where the event handler is attached and invoked.</p>
</li>
<li>
<p>If the event isn&#8217;t a member of the listener&#8217;s class, use the qualified event name in the form of <code>&lt;owner type&gt;.&lt;event name&gt;</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;StackPanel</span> <span class="na">Button.Click=</span><span class="s">"YesNoCancelButton_Click"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Button</span> <span class="na">Name=</span><span class="s">"YesButton"</span> <span class="na">Click=</span><span class="s">"YesButtonClick"</span><span class="nt">&gt;</span>Yes<span class="nt">&lt;/Button&gt;</span>
    <span class="nt">&lt;Button</span> <span class="na">Name=</span><span class="s">"NoButton"</span> <span class="na">Click=</span><span class="s">"NoButtonClick"</span><span class="nt">&gt;</span>No<span class="nt">&lt;/Button&gt;</span>
    <span class="nt">&lt;Button</span> <span class="na">Name=</span><span class="s">"CancelButton"</span> <span class="na">Click=</span><span class="s">"CancelClick"</span><span class="nt">&gt;</span>Cancel<span class="nt">&lt;/Button&gt;</span>
<span class="nt">&lt;/StackPanel&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p>The signature of the event handler method in code-behind must match the delegate type for the routed event.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">private</span> <span class="k">void</span> <span class="nf">YesNoCancelButtonClick</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">RoutedEventArgs</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>To attach an event handler for a routed event to an element using code:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Directly call the <code>AddHandler</code> method.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="c1">// Routed event handlers can always be attached this way.</span>
<span class="n">Button1</span><span class="p">.</span><span class="nf">AddHandler</span><span class="p">(</span><span class="n">ButtonBase</span><span class="p">.</span><span class="n">ClickEvent</span><span class="p">,</span> <span class="k">new</span> <span class="nf">RoutedEventHandler</span><span class="p">(</span><span class="n">Button_Click</span><span class="p">));</span>
<span class="n">StackPanel1</span><span class="p">.</span><span class="nf">AddHandler</span><span class="p">(</span><span class="n">ButtonBase</span><span class="p">.</span><span class="n">ClickEvent</span><span class="p">,</span> <span class="k">new</span> <span class="nf">RoutedEventHandler</span><span class="p">(</span><span class="n">Button_Click</span><span class="p">));</span></code></pre>
</div>
</div>
</li>
<li>
<p>If the routed event implements a CLR event wrapper, use language-specific event syntax to add event handlers.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="n">Button1</span><span class="p">.</span><span class="n">Click</span> <span class="p">+=</span> <span class="n">Button_Click</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="attached-events">4.2. Attached events</h3>
<div class="paragraph">
<p>WPF attached events are implemented as routed events backed by a <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.routedevent">RoutedEvent</a> field.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">AquariumFilter</span>
<span class="p">{</span>
    <span class="c1">// Register a custom routed event using the bubble routing strategy.</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">RoutedEvent</span> <span class="n">CleanEvent</span> <span class="p">=</span> <span class="n">EventManager</span><span class="p">.</span><span class="nf">RegisterRoutedEvent</span><span class="p">(</span>
        <span class="s">"Clean"</span><span class="p">,</span> <span class="n">RoutingStrategy</span><span class="p">.</span><span class="n">Bubble</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="n">RoutedEventHandler</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">AquariumFilter</span><span class="p">));</span>

    <span class="c1">// Provide an add handler accessor method for the Clean event.</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">AddCleanHandler</span><span class="p">(</span><span class="n">DependencyObject</span> <span class="n">dependencyObject</span><span class="p">,</span> <span class="n">RoutedEventHandler</span> <span class="n">handler</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">dependencyObject</span> <span class="k">is</span> <span class="k">not</span> <span class="n">UIElement</span> <span class="n">uiElement</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>

        <span class="n">uiElement</span><span class="p">.</span><span class="nf">AddHandler</span><span class="p">(</span><span class="n">CleanEvent</span><span class="p">,</span> <span class="n">handler</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Provide a remove handler accessor method for the Clean event.</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">RemoveCleanHandler</span><span class="p">(</span><span class="n">DependencyObject</span> <span class="n">dependencyObject</span><span class="p">,</span> <span class="n">RoutedEventHandler</span> <span class="n">handler</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">dependencyObject</span> <span class="k">is</span> <span class="k">not</span> <span class="n">UIElement</span> <span class="n">uiElement</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>

        <span class="n">uiElement</span><span class="p">.</span><span class="nf">RemoveHandler</span><span class="p">(</span><span class="n">CleanEvent</span><span class="p">,</span> <span class="n">handler</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>An <code>Add&lt;event name&gt;Handler</code> method, with a first parameter that&#8217;s the element on which the event handler is attached, and a second parameter that&#8217;s the event handler to add.</p>
<div class="ulist">
<ul>
<li>
<p>The method must be <code>public</code> and <code>static</code>, with no return value.</p>
</li>
<li>
<p>The method calls the <code>AddHandler</code> base class method, passing in the routed event and handler as arguments.</p>
<div class="ulist">
<ul>
<li>
<p>This method supports the XAML attribute syntax for attaching an event handler to an element.</p>
</li>
<li>
<p>This method also enables code access to the event handler store for the attached event.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>A <code>Remove&lt;event name&gt;Handler</code> method, with a first parameter that&#8217;s the element on which the event handler is attached, and a second parameter that&#8217;s the event handler to remove.</p>
<div class="ulist">
<ul>
<li>
<p>The method must be <code>public</code> and <code>static</code>, with no return value.</p>
</li>
<li>
<p>The method calls the <code>RemoveHandler</code> base class method, passing in the routed event and handler as arguments.</p>
<div class="ulist">
<ul>
<li>
<p>This method enables code access to the event handler store for the attached event.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>WPF implements attached events as routed events because the identifier for a <code>RoutedEvent</code> is defined by the WPF event system.</p>
</li>
<li>
<p>The <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.eventmanager.registerroutedevent">RegisterRoutedEvent</a> method that returns the attached event identifier is the same method used to register non-attached routed events.</p>
</li>
<li>
<p>Unlike the CLR event "wrapper" used to back non-attached routed events, the attached event accessor methods can be implemented in classes that don&#8217;t derive from <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.uielement">UIElement</a> or <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.contentelement">ContentElement</a>.</p>
<div class="ulist">
<ul>
<li>
<p>It is possible because the attached event backing code calls the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.uielement.addhandler">UIElement.AddHandler</a> and <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.uielement.removehandler">UIElement.RemoveHandler</a> methods on a passed in <code>UIElement</code> instance.</p>
</li>
<li>
<p>In contrast, the CLR wrapper for non-attached routed events calls those methods directly on the owning class, so that class must derive from <code>UIElement</code>.</p>
</li>
</ul>
</div>
</li>
<li>
<p>When defining a custom attached event using the WPF model of basing attached events on routed events, use the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.uielement.raiseevent">UIElement.RaiseEvent</a> method to raise an attached event on any <code>UIElement</code> or <code>ContentElement</code>.</p>
<div class="ulist">
<ul>
<li>
<p>When raising a routed event, whether it&#8217;s attached or not, an element is required to designate in the element tree as the event source.</p>
</li>
<li>
<p>That source is then reported as the <code>RaiseEvent</code> caller. For example, to raise the <code>AquariumFilter.Clean</code> attached routed event on <code>aquarium1</code>:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="n">aquarium1</span><span class="p">.</span><span class="nf">RaiseEvent</span><span class="p">(</span><span class="k">new</span> <span class="nf">RoutedEventArgs</span><span class="p">(</span><span class="n">AquariumFilter</span><span class="p">.</span><span class="n">CleanEvent</span><span class="p">));</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>In XAML syntax, an attached event is specified by its event name and its owner type, in the form of <code>&lt;owner type&gt;.&lt;event name&gt;</code>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Because the event name is qualified with the name of its owner type, the syntax allows the event to be attached to any element that can be instantiated.</p>
</li>
<li>
<p>It is also applicable to handlers for regular routed events that attach to an arbitrary element along the event route.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="c">&lt;!-- attaches the AquariumFilter_Clean handler for the AquariumFilter.Clean attached event
     to the aquarium1 element --&gt;</span>
<span class="nt">&lt;aqua:Aquarium</span> <span class="na">x:Name=</span><span class="s">"aquarium1"</span> <span class="na">Height=</span><span class="s">"300"</span> <span class="na">Width=</span><span class="s">"400"</span> <span class="na">aqua:AquariumFilter.Clean=</span><span class="s">"AquariumFilter_Clean"</span><span class="nt">/&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p>Event handlers can also be attached for attached events in code behind, by calling the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.uielement.addhandler">AddHandler</a> method on the object that the handler should attach to and pass the event identifier and handler as parameters to the method.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="n">aquarium1</span><span class="p">.</span><span class="nf">AddHandler</span><span class="p">(</span><span class="n">AquariumFilter</span><span class="p">.</span><span class="n">Clean</span><span class="p">,</span> <span class="k">new</span> <span class="nf">RoutedEventHandler</span><span class="p">(</span><span class="n">AquariumFilter_Clean</span><span class="p">),</span> <span class="k">true</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="wpf-input-events">4.3. WPF input events</h3>
<div class="ulist">
<ul>
<li>
<p>By convention, WPF routed events that follow a tunneling route have a name that&#8217;s prefixed with "Preview".</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/desktop/wpf/advanced/input-overview?view=netframeworkdesktop-4.8&amp;preserve-view=true">Input events</a> often come in pairs, with one being a preview event and the other a bubbling routed event.</p>
</li>
<li>
<p>The <code>Preview</code> prefix signifies that the preview event completes before the paired bubbling event starts.</p>
</li>
<li>
<p>A preview input event that&#8217;s marked as handled won&#8217;t invoke any normally registered event handlers for the remainder of the preview route, and the paired bubbling event won&#8217;t be raised.</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="https://learn.microsoft.com/en-us/dotnet/desktop/wpf/events/media/routed-events-overview/input-event-routing.png?view=netdesktop-8.0" alt="Event routing diagram.">
</div>
</div>
<div class="paragraph">
<p>The order of event processing following a mouse-down action on leaf element #2 is:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>PreviewMouseDown</code> tunneling event on the root element.</p>
</li>
<li>
<p><code>PreviewMouseDown</code> tunneling event on intermediate element #1.</p>
</li>
<li>
<p><code>PreviewMouseDown</code> tunneling event on leaf element #2, which is the source element.</p>
</li>
<li>
<p><code>MouseDown</code> bubbling event on leaf element #2, which is the source element.</p>
</li>
<li>
<p><code>MouseDown</code> bubbling event on intermediate element #1.</p>
</li>
<li>
<p><code>MouseDown</code> bubbling event on the root element.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="weak-event-patterns">4.4. Weak event patterns</h3>
<div class="paragraph">
<p>Listening for events can lead to memory leaks.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The typical technique for listening to an event is to use the language-specific syntax that attaches a handler to an event on a source.</p>
</li>
<li>
<p>For example, in C#, that syntax is: <code>source.SomeEvent += new SomeEventHandler(MyEventHandler)</code> that creates a strong reference from the event source to the event listener.</p>
</li>
<li>
<p>Ordinarily, attaching an event handler for a listener causes the listener to have an object lifetime that is influenced by the object lifetime of the source (unless the event handler is explicitly removed).</p>
</li>
<li>
<p>Whenever the source object lifetime extends beyond the object lifetime of the listener, the normal event pattern leads to a memory leak: the listener is kept alive longer than intended.</p>
</li>
<li>
<p>The weak event pattern can be used whenever a listener needs to register for an event, but the listener does not explicitly know when to unregister, and can also be used whenever the object lifetime of the source exceeds the useful object lifetime of the listener.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="commands">5. Commands</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A command can be used to:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>separate the semantics and the object that invokes a command from the logic that executes the command.</p>
</li>
<li>
<p>indicate whether an action is possible by implementing the <code>CanExecute</code> method.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.input.routedcommand">routed command model</a> in WPF can be broken up into four main concepts:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <em>command</em> is the action to be executed.</p>
</li>
<li>
<p>The <em>command source</em> is the object which invokes the command.</p>
</li>
<li>
<p>The <em>command target</em> is the object that the command is being executed on.</p>
</li>
<li>
<p>The <em>command binding</em> is the object which maps the command logic to the command.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>A commands is created by implementing the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.input.icommand">ICommand</a> interface.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Execute</code> method performs the actions that are associated with the command.</p>
</li>
<li>
<p><code>CanExecute</code> method determines whether the command can execute on the current command target.</p>
</li>
<li>
<p><code>CanExecuteChanged</code> event is raised if the command manager that centralizes the commanding operations detects a change in the command source that might invalidate a command that has been raised but not yet executed by the command binding.</p>
</li>
</ul>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.toolkit.mvvm.input.RelayCommand">RelayCommand</a> and <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.toolkit.mvvm.input.RelayCommand-1">RelayCommand&lt;T&gt;</a> are <code>ICommand</code> implementations that can expose a method or delegate to the view. These types act as a way to bind commands between the viewmodel and UI elements.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>They provide a base implementation of the <code>ICommand</code> interface.</p>
</li>
<li>
<p>They also implement the <code>IRelayCommand</code> (and <code>IRelayCommand&lt;T&gt;</code>) interface, which exposes a <code>NotifyCanExecuteChanged</code> method to raise the <code>CanExecuteChanged</code> event.</p>
</li>
<li>
<p>They expose constructors taking delegates like <code>Action</code> and <code>Func&lt;T&gt;</code>, which allow the wrapping of standard methods and lambda expressions.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">MyViewModel</span> <span class="p">:</span> <span class="n">ObservableObject</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nf">MyViewModel</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">IncrementCounterCommand</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">RelayCommand</span><span class="p">(</span><span class="n">IncrementCounter</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="kt">int</span> <span class="n">counter</span><span class="p">;</span>

    <span class="k">public</span> <span class="kt">int</span> <span class="n">Counter</span>
    <span class="p">{</span>
        <span class="k">get</span> <span class="p">=&gt;</span> <span class="n">counter</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">set</span> <span class="p">=&gt;</span> <span class="nf">SetProperty</span><span class="p">(</span><span class="k">ref</span> <span class="n">counter</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">ICommand</span> <span class="n">IncrementCounterCommand</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">private</span> <span class="k">void</span> <span class="nf">IncrementCounter</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Counter</span><span class="p">++;</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;Page</span>
    <span class="na">x:Class=</span><span class="s">"MyApp.Views.MyPage"</span>
    <span class="na">xmlns:viewModels=</span><span class="s">"using:MyApp.ViewModels"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Page.DataContext&gt;</span>
        <span class="nt">&lt;viewModels:MyViewModel</span> <span class="na">x:Name=</span><span class="s">"ViewModel"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/Page.DataContext&gt;</span>

    <span class="nt">&lt;StackPanel</span> <span class="na">Spacing=</span><span class="s">"8"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{x:Bind ViewModel.Counter, Mode=OneWay}"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;Button</span>
            <span class="na">Content=</span><span class="s">"Click me!"</span>
            <span class="na">Command=</span><span class="s">"{x:Bind ViewModel.IncrementCounterCommand}"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/StackPanel&gt;</span>
<span class="nt">&lt;/Page&gt;</span></code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>A command source is the object that generally implements the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.input.icommandsource">ICommandSource</a> interface, which invokes the command.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Examples of command sources are <code>MenuItem</code>, <code>Button</code>, and <code>KeyGesture</code>.</p>
</li>
<li>
<p>A command source like a <code>Button</code> can subscribe to the <code>CanExecuteChanged</code> event and be disabled if <code>CanExecute</code> returns <code>false</code> or be enabled if <code>CanExecute</code> returns <code>true</code>.</p>
</li>
<li>
<p><code>Command</code> is the command to execute when the command source is invoked.</p>
</li>
<li>
<p><code>CommandTarget</code> is the object on which to execute the command, which is only applicable when the <code>ICommand</code> is a <code>RoutedCommand</code>.</p>
<div class="ulist">
<ul>
<li>
<p>If the <code>CommandTarget</code> is set on an <code>ICommandSource</code> and the corresponding command is not a <code>RoutedCommand</code>, the command target is ignored.</p>
</li>
<li>
<p>If the <code>CommandTarget</code> is not set, the element with keyboard focus will be the command target.</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>CommandParameter</code> is a user-defined data type used to pass information to the handlers implementing the command.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>A <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.input.commandbinding">CommandBinding</a> associates a command with the event handlers that implement the command.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>CommandBinding</code> class contains a <code>Command</code> property, and <code>PreviewExecuted</code>, <code>Executed</code>, <code>PreviewCanExecute</code>, and <code>CanExecute</code> events.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;Window.CommandBindings&gt;</span>
  <span class="nt">&lt;CommandBinding</span> <span class="na">Command=</span><span class="s">"ApplicationCommands.Open"</span>
                  <span class="na">Executed=</span><span class="s">"OpenCmdExecuted"</span>
                  <span class="na">CanExecute=</span><span class="s">"OpenCmdCanExecute"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/Window.CommandBindings&gt;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="c1">// Creating CommandBinding and attaching an Executed and CanExecute handler</span>
<span class="n">CommandBinding</span> <span class="n">OpenCmdBinding</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CommandBinding</span><span class="p">(</span>
    <span class="n">ApplicationCommands</span><span class="p">.</span><span class="n">Open</span><span class="p">,</span>
    <span class="n">OpenCmdExecuted</span><span class="p">,</span>
    <span class="n">OpenCmdCanExecute</span><span class="p">);</span>

<span class="k">this</span><span class="p">.</span><span class="n">CommandBindings</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">OpenCmdBinding</span><span class="p">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">void</span> <span class="nf">OpenCmdExecuted</span><span class="p">(</span><span class="kt">object</span> <span class="n">target</span><span class="p">,</span> <span class="n">ExecutedRoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">String</span> <span class="n">command</span><span class="p">,</span> <span class="n">targetobj</span><span class="p">;</span>
    <span class="n">command</span> <span class="p">=</span> <span class="p">((</span><span class="n">RoutedCommand</span><span class="p">)</span><span class="n">e</span><span class="p">.</span><span class="n">Command</span><span class="p">).</span><span class="n">Name</span><span class="p">;</span>
    <span class="n">targetobj</span> <span class="p">=</span> <span class="p">((</span><span class="n">FrameworkElement</span><span class="p">)</span><span class="n">target</span><span class="p">).</span><span class="n">Name</span><span class="p">;</span>
    <span class="n">MessageBox</span><span class="p">.</span><span class="nf">Show</span><span class="p">(</span><span class="s">"The "</span> <span class="p">+</span> <span class="n">command</span> <span class="p">+</span>  <span class="s">" command has been invoked on target object "</span> <span class="p">+</span> <span class="n">targetobj</span><span class="p">);</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">void</span> <span class="nf">OpenCmdCanExecute</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">CanExecuteRoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">e</span><span class="p">.</span><span class="n">CanExecute</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
<span class="p">}</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>A command target is the element on which the command is executed. With regards to a <code>RoutedCommand</code>, the command target is the element at which routing of the <code>Executed</code> and <code>CanExecute</code> starts.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The command source can explicitly set the command target. If the command target is not defined, the element with keyboard focus will be used as the command target.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;StackPanel&gt;</span>
  <span class="nt">&lt;Menu&gt;</span>
    <span class="nt">&lt;MenuItem</span> <span class="na">Command=</span><span class="s">"ApplicationCommands.Paste"</span>
              <span class="na">CommandTarget=</span><span class="s">"{Binding ElementName=mainTextBox}"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/Menu&gt;</span>
  <span class="nt">&lt;TextBox</span> <span class="na">Name=</span><span class="s">"mainTextBox"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/StackPanel&gt;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="c1">// Creating the UI objects</span>
<span class="n">StackPanel</span> <span class="n">mainStackPanel</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StackPanel</span><span class="p">();</span>
<span class="n">TextBox</span> <span class="n">pasteTextBox</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TextBox</span><span class="p">();</span>
<span class="n">Menu</span> <span class="n">stackPanelMenu</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Menu</span><span class="p">();</span>
<span class="n">MenuItem</span> <span class="n">pasteMenuItem</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MenuItem</span><span class="p">();</span>

<span class="c1">// Adding objects to the panel and the menu</span>
<span class="n">stackPanelMenu</span><span class="p">.</span><span class="n">Items</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">pasteMenuItem</span><span class="p">);</span>
<span class="n">mainStackPanel</span><span class="p">.</span><span class="n">Children</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">stackPanelMenu</span><span class="p">);</span>
<span class="n">mainStackPanel</span><span class="p">.</span><span class="n">Children</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">pasteTextBox</span><span class="p">);</span>

<span class="c1">// Setting the command to the Paste command</span>
<span class="n">pasteMenuItem</span><span class="p">.</span><span class="n">Command</span> <span class="p">=</span> <span class="n">ApplicationCommands</span><span class="p">.</span><span class="n">Paste</span><span class="p">;</span>

<span class="c1">// Setting the command target to the TextBox</span>
<span class="n">pasteMenuItem</span><span class="p">.</span><span class="n">CommandTarget</span> <span class="p">=</span> <span class="n">pasteTextBox</span><span class="p">;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>The <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.input.commandmanager">CommandManager</a> serves a number of command related functions.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>It provides a set of static methods for adding and removing <code>PreviewExecuted</code>, <code>Executed</code>, <code>PreviewCanExecute</code>, and <code>CanExecute</code> event handlers to and from a specific element.</p>
</li>
<li>
<p>It provides a means to register <code>CommandBinding</code> and <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.input.inputbinding"><code>InputBinding</code></a> objects onto a specific class.</p>
</li>
<li>
<p>The <code>CommandManager</code> also provides a means, through the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.input.commandmanager.requerysuggested#system-windows-input-commandmanager-requerysuggested">RequerySuggested</a> event, to notify a command when it should raise the <code>CanExecuteChanged</code> event.</p>
</li>
<li>
<p>The <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.input.commandmanager.invalidaterequerysuggested">InvalidateRequerySuggested</a> method forces the <code>CommandManager</code> to raise the <code>RequerySuggested</code> event, which is useful for conditions that should disable/enable a command but are not conditions that the <code>CommandManager</code> is aware of.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="windows">6. Windows</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In WPF, a window is encapsulated by the Window class that used to do the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Display a window.</p>
</li>
<li>
<p>Configure the size, position, and appearance of a window.</p>
</li>
<li>
<p>Host application-specific content.</p>
</li>
<li>
<p>Manage the lifetime of a window.</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="https://learn.microsoft.com/en-us/dotnet/desktop/wpf/windows/media/index/window-parts.png?view=netdesktop-8.0" alt="Screenshot that shows parts of a WPF window.">
</div>
</div>
<div class="paragraph">
<p>A window is divided into two areas: the non-client area and client area.</p>
</div>
<div class="paragraph">
<p>The <em>non-client area</em> of a window is implemented by WPF and includes the parts of a window that are common to most windows, including the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A title bar (1-5).</p>
</li>
<li>
<p>An icon (1).</p>
</li>
<li>
<p>Title (2).</p>
</li>
<li>
<p>Minimize (3), Maximize (4), and Close (5) buttons.</p>
</li>
<li>
<p>System menu (6) with menu items. Appears when clicking on the icon (1).</p>
</li>
<li>
<p>Border (7).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The <em>client area</em> of a window is the area within a window&#8217;s non-client area and is used by developers to add application-specific content, such as menu bars, tool bars, and controls.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Client area (8).</p>
</li>
<li>
<p>Resize grip (9). This is a control added to the Client area (8).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For a window that is defined using both XAML markup and code-behind:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>XAML markup files are configured as MSBuild <code>Page</code> items.</p>
</li>
<li>
<p>Code-behind files are configured as MSBuild <code>Compile</code> items.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>.NET SDK projects automatically import the correct <code>Page</code> and <code>Compile</code> items. When the project is configured for WPF, the XAML markup files are automatically imported as <code>Page</code> items, and the corresponding code-behind file is imported as <code>Compile</code>.</p>
</div>
<div class="sect2">
<h3 id="lifetime">6.1. Lifetime</h3>
<div class="paragraph">
<p>A window that is opened by using the <code>Show</code> method doesn&#8217;t have an implicit relationship with the window that created it. Users can interact with either window independently of the other, which means that either window can do the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Cover the other (unless one of the windows has its <code>Topmost</code> property set to <code>true</code>).</p>
</li>
<li>
<p>Be minimized, maximized, and restored without affecting the other.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>After ownership by setting the <code>Owner</code> property of the <em>owned window</em> with a reference to the <em>owner window</em> is established:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The owned window can reference its owner window by inspecting the value of its <code>Owner</code> property.</p>
</li>
<li>
<p>The owner window can discover all the windows it owns by inspecting the value of its <code>OwnedWindows</code> property.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>A window opened by calling <code>Show</code> is a <em>modeless</em> window, and the application doesn&#8217;t prevent users from interacting with other windows in the application.</p>
</div>
<div class="paragraph">
<p>Opening a window with <code>ShowDialog</code> opens a window as <em>modal</em> and restricts user interaction to the specific window.</p>
</div>
<div class="paragraph">
<p>The life of a window starts coming to an end when a user closes it. Once a window is closed, it can&#8217;t be reopened.</p>
</div>
<div class="paragraph">
<p>A window can be closed by using elements in the non-client area, including the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>Close</code> item of the System menu.</p>
</li>
<li>
<p>Pressing <code>ALT + F4</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">public</span> <span class="nf">MainWindow</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nf">InitializeComponent</span><span class="p">();</span>
    <span class="n">KeyDown</span> <span class="p">+=</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="c1">// inhibit the ALT + F4</span>
        <span class="n">e</span><span class="p">.</span><span class="n">Handled</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">SystemKey</span> <span class="p">==</span> <span class="n">Key</span><span class="p">.</span><span class="n">F4</span> <span class="p">&amp;&amp;</span> <span class="n">Keyboard</span><span class="p">.</span><span class="n">Modifiers</span> <span class="p">==</span> <span class="n">ModifierKeys</span><span class="p">.</span><span class="n">Alt</span><span class="p">;</span>
    <span class="p">};</span>
<span class="p">}</span></code></pre>
</div>
</div>
</li>
<li>
<p>Pressing the <code>Close</code> button.</p>
</li>
<li>
<p>Pressing <code>ESC</code> when a button has the <code>IsCancel</code> property set to <code>true</code> on a modal window.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The following illustration shows the sequence of the principal events in the lifetime of a window:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://learn.microsoft.com/en-us/dotnet/desktop/wpf/windows/media/index/window-lifetime-events.png?view=netdesktop-8.0" alt="Diagram that shows events in a window&#8217;s lifetime.">
</div>
</div>
<div class="paragraph">
<p>The following illustration shows the sequence of the principal events in the lifetime of a window that is shown without activation (<code>ShowActivated</code> is set to <code>false</code> before the window is shown):</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://learn.microsoft.com/en-us/dotnet/desktop/wpf/windows/media/index/window-lifetime-events.png?view=netdesktop-8.0" alt="Diagram that shows events in a window&#8217;s lifetime without activation.">
</div>
</div>
</div>
<div class="sect2">
<h3 id="appearance">6.2. Appearance</h3>
<div class="paragraph">
<p>To configure the non-client area, Window provides several properties, which include <code>Icon</code> to set a window&#8217;s icon and <code>Title</code> to set its title.</p>
</div>
<div class="paragraph">
<p>The appearance and behavior of non-client area border can also be changed by configuring a window&#8217;s <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.window.resizemode">resize mode</a>, <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.window.windowstyle">window style</a>, and whether it appears as a button in the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.window.showintaskbar">desktop task bar</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://learn.microsoft.com/en-us/dotnet/desktop/wpf/windows/media/index/window-transparent.png?view=netdesktop-8.0" alt="Screenshot of a WPF window that has a clipped area and custom shape.">
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="c">&lt;!--  Non-rectangular window style  --&gt;</span>
<span class="nt">&lt;Window</span> <span class="na">x:Class=</span><span class="s">"WindowsOverview.ClippedWindow"</span>
        <span class="na">xmlns=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
        <span class="na">xmlns:x=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml"</span>
        <span class="na">Title=</span><span class="s">"ClippedWindow"</span> <span class="na">SizeToContent=</span><span class="s">"WidthAndHeight"</span>
        <span class="na">WindowStyle=</span><span class="s">"None"</span> <span class="na">AllowsTransparency=</span><span class="s">"True"</span> <span class="na">Background=</span><span class="s">"Transparent"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Grid</span> <span class="na">Margin=</span><span class="s">"20"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;Grid.RowDefinitions&gt;</span>
            <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">"*"</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">"20"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/Grid.RowDefinitions&gt;</span>

        <span class="nt">&lt;Rectangle</span> <span class="na">Stroke=</span><span class="s">"#FF000000"</span> <span class="na">RadiusX=</span><span class="s">"10"</span> <span class="na">RadiusY=</span><span class="s">"10"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;Path</span> <span class="na">Fill=</span><span class="s">"White"</span> <span class="na">Stretch=</span><span class="s">"Fill"</span> <span class="na">Stroke=</span><span class="s">"#FF000000"</span> <span class="na">HorizontalAlignment=</span><span class="s">"Left"</span> <span class="na">Margin=</span><span class="s">"15,-5.597,0,-0.003"</span> <span class="na">Width=</span><span class="s">"30"</span> <span class="na">Grid.Row=</span><span class="s">"1"</span> <span class="na">Data=</span><span class="s">"M22.166642,154.45381 L29.999666,187.66699 40.791059,154.54395"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;Rectangle</span> <span class="na">Fill=</span><span class="s">"White"</span> <span class="na">RadiusX=</span><span class="s">"10"</span> <span class="na">RadiusY=</span><span class="s">"10"</span> <span class="na">Margin=</span><span class="s">"1"</span><span class="nt">/&gt;</span>

        <span class="nt">&lt;TextBlock</span> <span class="na">HorizontalAlignment=</span><span class="s">"Left"</span> <span class="na">VerticalAlignment=</span><span class="s">"Center"</span> <span class="na">FontSize=</span><span class="s">"25"</span> <span class="na">Text=</span><span class="s">"Greetings!"</span> <span class="na">TextWrapping=</span><span class="s">"Wrap"</span> <span class="na">Margin=</span><span class="s">"5,5,50,5"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;Button</span> <span class="na">HorizontalAlignment=</span><span class="s">"Right"</span> <span class="na">VerticalAlignment=</span><span class="s">"Top"</span> <span class="na">Background=</span><span class="s">"Transparent"</span> <span class="na">BorderBrush=</span><span class="s">"{x:Null}"</span> <span class="na">Foreground=</span><span class="s">"Red"</span> <span class="na">Content=</span><span class="s">"❌"</span> <span class="na">FontSize=</span><span class="s">"15"</span> <span class="nt">/&gt;</span>

        <span class="nt">&lt;Grid.Effect&gt;</span>
            <span class="nt">&lt;DropShadowEffect</span> <span class="na">BlurRadius=</span><span class="s">"10"</span> <span class="na">ShadowDepth=</span><span class="s">"3"</span> <span class="na">Color=</span><span class="s">"LightBlue"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/Grid.Effect&gt;</span>
    <span class="nt">&lt;/Grid&gt;</span>
<span class="nt">&lt;/Window&gt;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="c1">// Hide the Minimize, Maximize, and Close buttons</span>
<span class="k">public</span> <span class="nf">MainWindow</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nf">InitializeComponent</span><span class="p">();</span>
    <span class="n">SourceInitialized</span> <span class="p">+=</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="k">const</span> <span class="kt">int</span> <span class="n">WM_SYSTEM_MENU</span> <span class="p">=</span> <span class="m">0x80000</span><span class="p">;</span>
        <span class="k">const</span> <span class="kt">int</span> <span class="n">WM_GW_STYLE</span> <span class="p">=</span> <span class="p">-</span><span class="m">16</span><span class="p">;</span>
        <span class="kt">var</span> <span class="n">hWnd</span> <span class="p">=</span> <span class="k">new</span> <span class="n">System</span><span class="p">.</span><span class="n">Windows</span><span class="p">.</span><span class="n">Interop</span><span class="p">.</span><span class="nf">WindowInteropHelper</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="n">Handle</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">hWnd</span> <span class="p">==</span> <span class="n">IntPtr</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidOperationException</span><span class="p">(</span><span class="s">"The window has not yet been completely initialized"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="c1">// Hide the Minimize, Maximize, and Close buttons</span>
        <span class="nf">SetWindow</span><span class="p">(</span><span class="n">hWnd</span><span class="p">,</span> <span class="n">WM_GW_STYLE</span><span class="p">,</span> <span class="nf">GetWindow</span><span class="p">(</span><span class="n">hWnd</span><span class="p">,</span> <span class="n">WM_GW_STYLE</span><span class="p">)</span> <span class="p">&amp;</span> <span class="p">~</span><span class="n">WM_SYSTEM_MENU</span><span class="p">);</span>
    <span class="p">};</span>
<span class="p">}</span>

<span class="p">[</span><span class="nf">DllImport</span><span class="p">(</span><span class="s">"user32.dll"</span><span class="p">,</span> <span class="n">EntryPoint</span> <span class="p">=</span> <span class="s">"GetWindowLong"</span><span class="p">)]</span>
<span class="k">private</span> <span class="k">static</span> <span class="k">extern</span> <span class="kt">int</span> <span class="nf">GetWindow</span><span class="p">(</span><span class="n">IntPtr</span> <span class="n">hWnd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nIndex</span><span class="p">);</span>

<span class="p">[</span><span class="nf">DllImport</span><span class="p">(</span><span class="s">"user32.dll"</span><span class="p">,</span> <span class="n">EntryPoint</span> <span class="p">=</span> <span class="s">"SetWindowLong"</span><span class="p">,</span> <span class="n">SetLastError</span> <span class="p">=</span> <span class="k">true</span><span class="p">)]</span>
<span class="k">private</span> <span class="k">static</span> <span class="k">extern</span> <span class="kt">int</span> <span class="nf">SetWindow</span><span class="p">(</span><span class="n">IntPtr</span> <span class="n">hWnd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nIndex</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dwNew</span><span class="p">);</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="dialog-boxes">6.3. Dialog boxes</h3>
<div class="paragraph">
<p>When designing a dialog box, follow these suggestions to create a good user experience:</p>
</div>
<div class="paragraph">
<p>❌ DON&#8217;T clutter the dialog window. The dialog experience is for the user to enter some data, or to make a choice.</p>
</div>
<div class="paragraph">
<p>✔️ DO provide an <code>OK</code> button to close the window.</p>
</div>
<div class="paragraph">
<p>✔️ DO set the <code>OK</code> button&#8217;s <code>IsDefault</code> property to <code>true</code> to allow the user to press the <code>ENTER</code> key to accept and close the window.</p>
</div>
<div class="paragraph">
<p>✔️ CONSIDER adding a <code>Cancel</code> button so that the user can close the window and indicate that they don&#8217;t want to continue.</p>
</div>
<div class="paragraph">
<p>✔️ DO set the <code>Cancel</code> button&#8217;s <code>IsCancel</code> property to <code>true</code> to allow the user to press the <code>ESC</code> key to close the window.</p>
</div>
<div class="paragraph">
<p>✔️ DO set the title of the window to accurately describe what the dialog represents, or what the user should do with the dialog.</p>
</div>
<div class="paragraph">
<p>✔️ DO set minimum width and height values for the window, preventing the user from resizing the window too small.</p>
</div>
<div class="paragraph">
<p>✔️ CONSIDER disabling the ability to resize the window if <code>ShowInTaskbar</code> is set to <code>false</code>.</p>
</div>
<div class="paragraph">
<p>✔️ DO When a menu item or button runs a function that requires user interaction through a dialog box before the function can continue, the control should use an ellipsis at the end of its header text:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;MenuItem</span> <span class="na">Header=</span><span class="s">"_Open..."</span> <span class="na">Click=</span><span class="s">"openMenuItem_Click"</span> <span class="nt">/&gt;</span>
<span class="c">&lt;!-- or --&gt;</span>
<span class="nt">&lt;Button</span> <span class="na">Content=</span><span class="s">"_Save As..."</span> <span class="na">Click=</span><span class="s">"saveAsButton_Click"</span> <span class="nt">/&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>✔️ DO When a menu item or button runs a function that displays a dialog box that does NOT require user interaction, such as an <em>About</em> dialog box, an ellipsis isn&#8217;t required.</p>
</div>
</div>
<div class="sect2">
<h3 id="multiple-windows-multiple-threads">6.4. Multiple windows, multiple threads</h3>
<div class="paragraph">
<p>Typically, WPF applications start with two threads: one for handling rendering and another for managing the UI.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <strong>rendering thread</strong> effectively runs hidden in the background while the <strong>UI thread</strong> receives input, handles events, paints the screen, and runs application code.</p>
</li>
<li>
<p>Most applications use a single UI thread, although in some situations it is best to use several.</p>
</li>
</ul>
</div>
<div class="ulist">
<ul>
<li>
<p>The UI thread queues work items inside an object called a <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.threading.dispatcher">Dispatcher</a> that selects work items on a <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.threading.dispatcherpriority">priority</a> basis and runs each one to completion.</p>
</li>
<li>
<p>Every UI thread must have at least one <code>Dispatcher</code>, and each <code>Dispatcher</code> can execute work items in exactly one thread.</p>
</li>
<li>
<p>The trick to building responsive, user-friendly applications is to maximize the <code>Dispatcher</code> throughput by keeping the work items small.</p>
</li>
</ul>
</div>
<div class="ulist">
<ul>
<li>
<p>Most classes derive from <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.threading.dispatcherobject">DispatcherObject</a> that stores a reference to the <code>Dispatcher</code> linked to the currently running thread that creates it at construction.</p>
<div class="ulist">
<ul>
<li>
<p>A <code>DispatcherObject</code> can call its public <code>VerifyAccess</code> method that examines the <code>Dispatcher</code> associated with the current thread and compares it to the <code>Dispatcher</code> reference stored during construction, and if they don&#8217;t match, <code>VerifyAccess</code> throws an exception.</p>
</li>
<li>
<p><code>VerifyAccess</code> is intended to be called at the beginning of every method belonging to a <code>DispatcherObject</code>.</p>
</li>
</ul>
</div>
</li>
<li>
<p>A background thread can ask the UI thread to perform an operation on its behalf by registering a work item with the <code>Dispatcher</code> of the UI thread.</p>
<div class="ulist">
<ul>
<li>
<p>The <code>Dispatcher</code> class provides the methods for registering work items: <code>InvokeAsync</code>, <code>BeginInvoke</code>, and <code>Invoke</code>.</p>
</li>
<li>
<p><code>Invoke</code> is a synchronous call – that is, it doesn&#8217;t return until the UI thread actually finishes executing the delegate.</p>
</li>
<li>
<p><code>InvokeAsync</code> and <code>BeginInvoke</code> are asynchronous and return immediately.</p>
</li>
</ul>
</div>
</li>
<li>
<p>The <code>Dispatcher</code> orders the elements in its queue by priority that maintained in the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.threading.dispatcherpriority"><code>DispatcherPriority</code></a> enumeration.</p>
</li>
<li>
<p>WPF application may require multiple top-level windows to do a better job, which is especially true if there&#8217;s any chance that one of the windows will monopolize the thread.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">private</span> <span class="k">void</span> <span class="nf">NewThreadWindow_Click</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">RoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Thread</span> <span class="n">newWindowThread</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Thread</span><span class="p">(</span><span class="n">ThreadStartingPoint</span><span class="p">);</span>
    <span class="n">newWindowThread</span><span class="p">.</span><span class="nf">SetApartmentState</span><span class="p">(</span><span class="n">ApartmentState</span><span class="p">.</span><span class="n">STA</span><span class="p">);</span>
    <span class="n">newWindowThread</span><span class="p">.</span><span class="n">IsBackground</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="n">newWindowThread</span><span class="p">.</span><span class="nf">Start</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">void</span> <span class="nf">ThreadStartingPoint</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">new</span> <span class="nf">MultiWindow</span><span class="p">().</span><span class="nf">Show</span><span class="p">();</span>

    <span class="n">System</span><span class="p">.</span><span class="n">Windows</span><span class="p">.</span><span class="n">Threading</span><span class="p">.</span><span class="n">Dispatcher</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Windows Explorer works in multiple top-level windows within multiple threads fashion.</p>
</li>
<li>
<p>Each new Explorer window belongs to the original process, but it&#8217;s created under the control of an independent thread.</p>
</li>
<li>
<p>When Explorer becomes nonresponsive, such as when looking for network resources, other Explorer windows continue to be responsive and usable.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="styles-templates-and-triggers">7. Styles, templates, and triggers</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="styles">7.1. Styles</h3>
<div class="paragraph">
<p>A <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.style">Style</a>, commonly declared as a resource, can apply a set of property values to one or more elements.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>When setting the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.style.targettype">TargetType</a> of a style and omit the <code>x:Key</code> attribute, the style is applied to all the <code>TargetType</code> elements scoped to the style, which is generally the XAML file itself.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;Window.Resources&gt;</span>
    <span class="c">&lt;!--A Style that affects all TextBlocks--&gt;</span>
    <span class="nt">&lt;Style</span> <span class="na">TargetType=</span><span class="s">"TextBlock"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"HorizontalAlignment"</span> <span class="na">Value=</span><span class="s">"Center"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"FontFamily"</span> <span class="na">Value=</span><span class="s">"Comic Sans MS"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"FontSize"</span> <span class="na">Value=</span><span class="s">"14"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/Style&gt;</span>
<span class="nt">&lt;/Window.Resources&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p>If adding an <code>x:Key</code> attribute with value to the style, the style is no longer implicitly applied to all elements of <code>TargetType</code>. Only elements that explicitly reference the style will have the style applied to them.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;Window.Resources&gt;</span>
    <span class="nt">&lt;Style</span> <span class="na">x:Key=</span><span class="s">"TitleText"</span> <span class="na">TargetType=</span><span class="s">"TextBlock"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"HorizontalAlignment"</span> <span class="na">Value=</span><span class="s">"Center"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"FontFamily"</span> <span class="na">Value=</span><span class="s">"Comic Sans MS"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"FontSize"</span> <span class="na">Value=</span><span class="s">"14"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/Style&gt;</span>
<span class="nt">&lt;/Window.Resources&gt;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;StackPanel&gt;</span>
    <span class="nt">&lt;TextBlock</span> <span class="na">Style=</span><span class="s">"{StaticResource TitleText}"</span><span class="nt">&gt;</span>My Pictures<span class="nt">&lt;/TextBlock&gt;</span>
    <span class="nt">&lt;TextBlock&gt;</span>Check out my new pictures!<span class="nt">&lt;/TextBlock&gt;</span>
<span class="nt">&lt;/StackPanel&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p>To assign a named style to an element programmatically, get the style from the resources collection and assign it to the element&#8217;s <code>Style</code> property.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="n">textblock1</span><span class="p">.</span><span class="n">Style</span> <span class="p">=</span> <span class="p">(</span><span class="n">Style</span><span class="p">)</span><span class="n">Resources</span><span class="p">[</span><span class="s">"TitleText"</span><span class="p">];</span></code></pre>
</div>
</div>
</li>
<li>
<p>A style can extend another style with the <code>BaseOn</code> property.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;Window.Resources&gt;</span>
    <span class="c">&lt;!-- .... other resources .... --&gt;</span>

    <span class="c">&lt;!--A Style that affects all TextBlocks--&gt;</span>
    <span class="nt">&lt;Style</span> <span class="na">TargetType=</span><span class="s">"TextBlock"</span><span class="nt">&gt;</span> <span class="c">&lt;!-- x:Key is implicitly set to {x:Type TextBlock} --&gt;</span>
        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"HorizontalAlignment"</span> <span class="na">Value=</span><span class="s">"Center"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"FontFamily"</span> <span class="na">Value=</span><span class="s">"Comic Sans MS"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"FontSize"</span> <span class="na">Value=</span><span class="s">"14"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/Style&gt;</span>

    <span class="c">&lt;!--A Style that extends the previous TextBlock Style with an x:Key of TitleText--&gt;</span>
    <span class="nt">&lt;Style</span> <span class="na">BasedOn=</span><span class="s">"{StaticResource {x:Type TextBlock}}"</span>
           <span class="na">TargetType=</span><span class="s">"TextBlock"</span>
           <span class="na">x:Key=</span><span class="s">"TitleText"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"FontSize"</span> <span class="na">Value=</span><span class="s">"26"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"Foreground"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Setter.Value&gt;</span>
                <span class="nt">&lt;LinearGradientBrush</span> <span class="na">StartPoint=</span><span class="s">"0.5,0"</span> <span class="na">EndPoint=</span><span class="s">"0.5,1"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;LinearGradientBrush.GradientStops&gt;</span>
                        <span class="nt">&lt;GradientStop</span> <span class="na">Offset=</span><span class="s">"0.0"</span> <span class="na">Color=</span><span class="s">"#90DDDD"</span> <span class="nt">/&gt;</span>
                        <span class="nt">&lt;GradientStop</span> <span class="na">Offset=</span><span class="s">"1.0"</span> <span class="na">Color=</span><span class="s">"#5BFFFF"</span> <span class="nt">/&gt;</span>
                    <span class="nt">&lt;/LinearGradientBrush.GradientStops&gt;</span>
                <span class="nt">&lt;/LinearGradientBrush&gt;</span>
            <span class="nt">&lt;/Setter.Value&gt;</span>
        <span class="nt">&lt;/Setter&gt;</span>
    <span class="nt">&lt;/Style&gt;</span>
<span class="nt">&lt;/Window.Resources&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <code>x:Key</code> of a style is implicitly set to <code>{x:Type TargetType}</code>.</p>
<div class="paragraph">
<p>It means that if explicitly setting the <code>x:Key</code> value to anything other than <code>{x:Type TargetType}</code>, the <code>Style</code> isn&#8217;t applied to all <code>TargetType</code> elements automatically.</p>
</div>
</li>
<li>
<p>If <code>TargetType</code> isn&#8217;t specified, the properties must be qualified in the <code>Setter</code> objects with a class name by using the syntax <code>Property="ClassName.Property"</code>.</p>
</li>
<li>
<p>Also note that many WPF controls consist of a combination of other WPF controls. If creating a style that applies to all controls of a type, unexpected results might happen.</p>
<div class="paragraph">
<p>For example, if creating a style that targets the <code>TextBlock</code> type in a <code>Window</code>, the style is applied to all <code>TextBlock</code> controls in the window, even if the <code>TextBlock</code> is part of another control, such as a <code>ListBox</code>.</p>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="control-templates">7.2. Control templates</h3>
<div class="paragraph">
<p>In WPF, the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.controltemplate">ControlTemplate</a> of a control, Commonly declared as a resource, defines the appearance of the control.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Each control has a default template assigned to the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.control.template#system-windows-controls-control-template">Control.Template</a> property.</p>
</li>
<li>
<p>A control template rewrites the visual appearance of the entire control, while a style simply applies property changes to the existing control.</p>
<div class="paragraph">
<p>However, since the template of a control is applied by setting the <code>Control.Template</code> property, a template can be defined or set using a style.</p>
</div>
</li>
<li>
<p>A <a href="https://learn.microsoft.com/en-us/dotnet/desktop/wpf/advanced/templatebinding-markup-extension?view=netdesktop-8.0">TemplateBinding</a> is an optimized form of a binding for template scenarios, analogous to a binding constructed with <code>{Binding RelativeSource={RelativeSource TemplatedParent}}</code>, such as for binding parts of the template to properties of the control.</p>
</li>
<li>
<p>If a <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.contentpresenter">ContentPresenter</a> is declared in the <code>ControlTemplate</code> of a <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.contentcontrol">ContentControl</a>, the <code>ContentPresenter</code> will automatically bind to the <code>ContentTemplate</code> and <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.contentcontrol.content">Content</a> properties.</p>
<div class="paragraph">
<p>Likewise, an <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.itemspresenter">ItemsPresenter</a> that is in the <code>ControlTemplate</code> of an <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.itemscontrol">ItemsControl</a> will automatically bind to the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.itemscontrol.itemtemplate">ItemTemplate</a> and <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.itemscontrol.items">Items</a> properties.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;UserControl&gt;</span>
    <span class="nt">&lt;UserControl.Resources&gt;</span>
        <span class="c">&lt;!--  Defined a ControlTemplate as a resource  --&gt;</span>
        <span class="nt">&lt;ControlTemplate</span> <span class="na">x:Key=</span><span class="s">"roundbutton"</span> <span class="na">TargetType=</span><span class="s">"Button"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Grid&gt;</span>
                <span class="nt">&lt;Ellipse</span> <span class="na">Fill=</span><span class="s">"{TemplateBinding Background}"</span> <span class="na">Stroke=</span><span class="s">"{TemplateBinding Foreground}"</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;ContentPresenter</span> <span class="na">HorizontalAlignment=</span><span class="s">"Center"</span> <span class="na">VerticalAlignment=</span><span class="s">"Center"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;/Grid&gt;</span>
        <span class="nt">&lt;/ControlTemplate&gt;</span>
    <span class="nt">&lt;/UserControl.Resources&gt;</span>
    <span class="nt">&lt;StackPanel&gt;</span>
        <span class="c">&lt;!-- Set the button's Template property to the roundbutton resource --&gt;</span>
        <span class="nt">&lt;Button</span> <span class="na">Template=</span><span class="s">"{StaticResource roundbutton}"</span><span class="nt">&gt;</span>Hello<span class="nt">&lt;/Button&gt;</span>
        <span class="c">&lt;!-- Defined the ControlTemplate inline --&gt;</span>
        <span class="nt">&lt;Button</span> <span class="na">Background=</span><span class="s">"Red"</span> <span class="na">Foreground=</span><span class="s">"White"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Button.Content&gt;</span>World<span class="nt">&lt;/Button.Content&gt;</span>
            <span class="nt">&lt;Button.Template&gt;</span>
                <span class="nt">&lt;ControlTemplate</span> <span class="na">TargetType=</span><span class="s">"Button"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;Grid&gt;</span>
                        <span class="nt">&lt;Ellipse</span> <span class="na">Fill=</span><span class="s">"{TemplateBinding Background}"</span> <span class="na">Stroke=</span><span class="s">"{TemplateBinding Foreground}"</span> <span class="nt">/&gt;</span>
                        <span class="nt">&lt;ContentPresenter</span> <span class="na">HorizontalAlignment=</span><span class="s">"Center"</span> <span class="na">VerticalAlignment=</span><span class="s">"Center"</span> <span class="nt">/&gt;</span>
                    <span class="nt">&lt;/Grid&gt;</span>
                <span class="nt">&lt;/ControlTemplate&gt;</span>
            <span class="nt">&lt;/Button.Template&gt;</span>
        <span class="nt">&lt;/Button&gt;</span>
    <span class="nt">&lt;/StackPanel&gt;</span>
<span class="nt">&lt;/UserControl&gt;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="data-templates">7.3. Data templates</h3>
<div class="paragraph">
<p>In WPF, the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.datatemplate">DataTemplate</a> is used to custom  the presentation and appearance of the data objects.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>In most cases, all other aspects of presentation, such as what an item looks like when it is selected or how a <code>ListBox</code> lays out the items, do not belong in the definition of a <code>DataTemplate</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="c">&lt;!-- Defined the DataTemplate inline --&gt;</span>
<span class="nt">&lt;ListBox</span> <span class="na">Width=</span><span class="s">"400"</span> <span class="na">Margin=</span><span class="s">"10"</span>
         <span class="na">ItemsSource=</span><span class="s">"{Binding Source={StaticResource myTodoList}}"</span><span class="nt">&gt;</span>
   <span class="nt">&lt;ListBox.ItemTemplate&gt;</span>
     <span class="nt">&lt;DataTemplate&gt;</span>
       <span class="nt">&lt;StackPanel&gt;</span>
         <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding Path=TaskName}"</span> <span class="nt">/&gt;</span>
         <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding Path=Description}"</span><span class="nt">/&gt;</span>
         <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding Path=Priority}"</span><span class="nt">/&gt;</span>
       <span class="nt">&lt;/StackPanel&gt;</span>
     <span class="nt">&lt;/DataTemplate&gt;</span>
   <span class="nt">&lt;/ListBox.ItemTemplate&gt;</span>
<span class="nt">&lt;/ListBox&gt;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="c">&lt;!--  Defined a DataTemplate as a resource  --&gt;</span>
<span class="nt">&lt;UserControl.Resources&gt;</span>
    <span class="nt">&lt;DataTemplate</span> <span class="na">x:Key=</span><span class="s">"myTaskTemplate"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;StackPanel&gt;</span>
            <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding Path=TaskName}"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding Path=Description}"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding Path=Priority}"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/StackPanel&gt;</span>
    <span class="nt">&lt;/DataTemplate&gt;</span>
<span class="nt">&lt;/UserControl.Resources&gt;</span>
<span class="nt">&lt;StackPanel&gt;</span>
    <span class="nt">&lt;ListBox</span>
        <span class="na">Width=</span><span class="s">"400"</span>
        <span class="na">Margin=</span><span class="s">"10"</span>
        <span class="na">ItemTemplate=</span><span class="s">"{StaticResource myTaskTemplate}"</span>
        <span class="na">ItemsSource=</span><span class="s">"{Binding Source={StaticResource myTodoList}}"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/StackPanel&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <code>DataTemplate</code> class has a <code>DataType</code> property that is very similar to the <code>TargetType</code> property of the <code>Style</code> class.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;DataTemplate</span> <span class="na">DataType=</span><span class="s">"{x:Type local:Task}"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;StackPanel&gt;</span>
    <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding Path=TaskName}"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding Path=Description}"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding Path=Priority}"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/StackPanel&gt;</span>
<span class="nt">&lt;/DataTemplate&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p>To supply logic to choose which <code>DataTemplate</code> to use based on the <code>Priority</code> value of the data object, create a subclass of <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.datatemplateselector">DataTemplateSelector</a> and override the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.datatemplateselector.selecttemplate">SelectTemplate</a> method.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">namespace</span> <span class="nn">SDKSample</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">TaskListDataTemplateSelector</span> <span class="p">:</span> <span class="n">DataTemplateSelector</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">override</span> <span class="n">DataTemplate</span> <span class="nf">SelectTemplate</span><span class="p">(</span><span class="kt">object</span> <span class="n">item</span><span class="p">,</span> <span class="n">DependencyObject</span> <span class="n">container</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">FrameworkElement</span> <span class="n">element</span> <span class="p">=</span> <span class="n">container</span> <span class="k">as</span> <span class="n">FrameworkElement</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">element</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">item</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">item</span> <span class="k">is</span> <span class="n">Task</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Task</span> <span class="n">taskitem</span> <span class="p">=</span> <span class="n">item</span> <span class="k">as</span> <span class="n">Task</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">taskitem</span><span class="p">.</span><span class="n">Priority</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span>
                    <span class="k">return</span> <span class="n">element</span><span class="p">.</span><span class="nf">FindResource</span><span class="p">(</span><span class="s">"importantTaskTemplate"</span><span class="p">)</span> <span class="k">as</span> <span class="n">DataTemplate</span><span class="p">;</span>
                <span class="k">else</span>
                    <span class="k">return</span> <span class="n">element</span><span class="p">.</span><span class="nf">FindResource</span><span class="p">(</span><span class="s">"myTaskTemplate"</span><span class="p">)</span> <span class="k">as</span> <span class="n">DataTemplate</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;Window.Resources&gt;</span>
    <span class="nt">&lt;local:TaskListDataTemplateSelector</span> <span class="na">x:Key=</span><span class="s">"myDataTemplateSelector"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/Window.Resources&gt;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;ListBox</span> <span class="na">Width=</span><span class="s">"400"</span> <span class="na">Margin=</span><span class="s">"10"</span>
         <span class="na">ItemsSource=</span><span class="s">"{Binding Source={StaticResource myTodoList}}"</span>
         <span class="na">ItemTemplateSelector=</span><span class="s">"{StaticResource myDataTemplateSelector}"</span>
         <span class="na">HorizontalContentAlignment=</span><span class="s">"Stretch"</span><span class="nt">/&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p>Styling and Templating an ItemsControl</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;ItemsControl</span> <span class="na">Margin=</span><span class="s">"10"</span>
              <span class="na">ItemsSource=</span><span class="s">"{Binding Source={StaticResource myTodoList}}"</span><span class="nt">&gt;</span>
  <span class="c">&lt;!--The ItemsControl has no default visual appearance.
      Use the Template property to specify a ControlTemplate to define
      the appearance of an ItemsControl. The ItemsPresenter uses the specified
      ItemsPanelTemplate (see below) to layout the items. If an
      ItemsPanelTemplate is not specified, the default is used. (For ItemsControl,
      the default is an ItemsPanelTemplate that specifies a StackPanel.--&gt;</span>
  <span class="nt">&lt;ItemsControl.Template&gt;</span>
    <span class="nt">&lt;ControlTemplate</span> <span class="na">TargetType=</span><span class="s">"ItemsControl"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;Border</span> <span class="na">BorderBrush=</span><span class="s">"Aqua"</span> <span class="na">BorderThickness=</span><span class="s">"1"</span> <span class="na">CornerRadius=</span><span class="s">"15"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;ItemsPresenter/&gt;</span>
      <span class="nt">&lt;/Border&gt;</span>
    <span class="nt">&lt;/ControlTemplate&gt;</span>
  <span class="nt">&lt;/ItemsControl.Template&gt;</span>
  <span class="c">&lt;!--Use the ItemsPanel property to specify an ItemsPanelTemplate
      that defines the panel that is used to hold the generated items.
      In other words, use this property if you want to affect
      how the items are laid out.--&gt;</span>
  <span class="nt">&lt;ItemsControl.ItemsPanel&gt;</span>
    <span class="nt">&lt;ItemsPanelTemplate&gt;</span>
      <span class="nt">&lt;WrapPanel</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/ItemsPanelTemplate&gt;</span>
  <span class="nt">&lt;/ItemsControl.ItemsPanel&gt;</span>
  <span class="c">&lt;!--Use the ItemTemplate to set a DataTemplate to define
      the visualization of the data objects. This DataTemplate
      specifies that each data object appears with the Proriity
      and TaskName on top of a silver ellipse.--&gt;</span>
  <span class="nt">&lt;ItemsControl.ItemTemplate&gt;</span>
    <span class="nt">&lt;DataTemplate&gt;</span>
      <span class="nt">&lt;DataTemplate.Resources&gt;</span>
        <span class="nt">&lt;Style</span> <span class="na">TargetType=</span><span class="s">"TextBlock"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"FontSize"</span> <span class="na">Value=</span><span class="s">"18"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"HorizontalAlignment"</span> <span class="na">Value=</span><span class="s">"Center"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/Style&gt;</span>
      <span class="nt">&lt;/DataTemplate.Resources&gt;</span>
      <span class="nt">&lt;Grid&gt;</span>
        <span class="nt">&lt;Ellipse</span> <span class="na">Fill=</span><span class="s">"Silver"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;StackPanel&gt;</span>
          <span class="nt">&lt;TextBlock</span> <span class="na">Margin=</span><span class="s">"3,3,3,0"</span>
                     <span class="na">Text=</span><span class="s">"{Binding Path=Priority}"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;TextBlock</span> <span class="na">Margin=</span><span class="s">"3,0,3,7"</span>
                     <span class="na">Text=</span><span class="s">"{Binding Path=TaskName}"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/StackPanel&gt;</span>
      <span class="nt">&lt;/Grid&gt;</span>
    <span class="nt">&lt;/DataTemplate&gt;</span>
  <span class="nt">&lt;/ItemsControl.ItemTemplate&gt;</span>
  <span class="c">&lt;!--Use the ItemContainerStyle property to specify the appearance
      of the element that contains the data. This ItemContainerStyle
      gives each item container a margin and a width. There is also
      a trigger that sets a tooltip that shows the description of
      the data object when the mouse hovers over the item container.--&gt;</span>
  <span class="nt">&lt;ItemsControl.ItemContainerStyle&gt;</span>
    <span class="nt">&lt;Style&gt;</span>
      <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"Control.Width"</span> <span class="na">Value=</span><span class="s">"100"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"Control.Margin"</span> <span class="na">Value=</span><span class="s">"5"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;Style.Triggers&gt;</span>
        <span class="nt">&lt;Trigger</span> <span class="na">Property=</span><span class="s">"Control.IsMouseOver"</span> <span class="na">Value=</span><span class="s">"True"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"Control.ToolTip"</span>
                  <span class="na">Value=</span><span class="s">"{Binding RelativeSource={x:Static RelativeSource.Self},
                          Path=Content.Description}"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/Trigger&gt;</span>
      <span class="nt">&lt;/Style.Triggers&gt;</span>
    <span class="nt">&lt;/Style&gt;</span>
  <span class="nt">&lt;/ItemsControl.ItemContainerStyle&gt;</span>
<span class="nt">&lt;/ItemsControl&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p>The <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.hierarchicaldatatemplate">HierarchicalDataTemplate</a> class is designed to be used with <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.headereditemscontrol">HeaderedItemsControl</a> types to display collection data that contains other collections such as a <code>Menu</code> or a <code>TreeView</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;Window</span>
    <span class="na">x:Class=</span><span class="s">"SDKSample.Window1"</span>
    <span class="na">xmlns=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="na">xmlns:x=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="na">xmlns:src=</span><span class="s">"clr-namespace:SDKSample"</span>
    <span class="na">Title=</span><span class="s">"HierarchicalDataTemplate Sample"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;DockPanel&gt;</span>
        <span class="nt">&lt;DockPanel.Resources&gt;</span>
            <span class="nt">&lt;src:ListLeagueList</span> <span class="na">x:Key=</span><span class="s">"MyList"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;HierarchicalDataTemplate</span> <span class="na">DataType=</span><span class="s">"{x:Type src:League}"</span> <span class="na">ItemsSource=</span><span class="s">"{Binding Path=Divisions}"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding Path=Name}"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;/HierarchicalDataTemplate&gt;</span>
            <span class="nt">&lt;HierarchicalDataTemplate</span> <span class="na">DataType=</span><span class="s">"{x:Type src:Division}"</span> <span class="na">ItemsSource=</span><span class="s">"{Binding Path=Teams}"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding Path=Name}"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;/HierarchicalDataTemplate&gt;</span>
            <span class="nt">&lt;DataTemplate</span> <span class="na">DataType=</span><span class="s">"{x:Type src:Team}"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding Path=Name}"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;/DataTemplate&gt;</span>
        <span class="nt">&lt;/DockPanel.Resources&gt;</span>
        <span class="nt">&lt;Menu</span>
            <span class="na">Name=</span><span class="s">"menu1"</span>
            <span class="na">Margin=</span><span class="s">"10,10,10,10"</span>
            <span class="na">DockPanel.Dock=</span><span class="s">"Top"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;MenuItem</span> <span class="na">Header=</span><span class="s">"My Soccer Leagues"</span> <span class="na">ItemsSource=</span><span class="s">"{Binding Source={StaticResource MyList}}"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/Menu&gt;</span>
        <span class="nt">&lt;TreeView&gt;</span>
            <span class="nt">&lt;TreeViewItem</span> <span class="na">Header=</span><span class="s">"My Soccer Leagues"</span> <span class="na">ItemsSource=</span><span class="s">"{Binding Source={StaticResource MyList}}"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/TreeView&gt;</span>
    <span class="nt">&lt;/DockPanel&gt;</span>
<span class="nt">&lt;/Window&gt;</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="triggers">7.4. Triggers</h3>
<div class="paragraph">
<p>A trigger sets properties or starts actions, such as an animation, when a property value changes or when an event is raised.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Style</code>, <code>ControlTemplate</code>, and <code>DataTemplate</code> all have a <code>Triggers</code> property that can contain a set of triggers.</p>
</li>
<li>
<p>A <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.trigger">Trigger</a> that sets property values or starts actions based on the value of a property is called a property trigger.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;Window.Resources&gt;</span>
    <span class="c">&lt;!-- .... other resources .... --&gt;</span>

    <span class="nt">&lt;Style</span> <span class="na">TargetType=</span><span class="s">"ListBoxItem"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"Opacity"</span> <span class="na">Value=</span><span class="s">"0.5"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"MaxHeight"</span> <span class="na">Value=</span><span class="s">"75"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;Style.Triggers&gt;</span>
            <span class="nt">&lt;Trigger</span> <span class="na">Property=</span><span class="s">"IsSelected"</span> <span class="na">Value=</span><span class="s">"True"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;Trigger.Setters&gt;</span>
                    <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"Opacity"</span> <span class="na">Value=</span><span class="s">"1.0"</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;/Trigger.Setters&gt;</span>
            <span class="nt">&lt;/Trigger&gt;</span>
        <span class="nt">&lt;/Style.Triggers&gt;</span>
    <span class="nt">&lt;/Style&gt;</span>
<span class="nt">&lt;/Window.Resources&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p>The properties changed by triggers are automatically reset to their previous value when the triggered condition is no longer satisfied.</p>
</li>
<li>
<p>Another type of trigger is the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.eventtrigger">EventTrigger</a>, which starts a set of actions based on the occurrence of an event.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;Style.Triggers&gt;</span>
    <span class="nt">&lt;Trigger</span> <span class="na">Property=</span><span class="s">"IsSelected"</span> <span class="na">Value=</span><span class="s">"True"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;Trigger.Setters&gt;</span>
            <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"Opacity"</span> <span class="na">Value=</span><span class="s">"1.0"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/Trigger.Setters&gt;</span>
    <span class="nt">&lt;/Trigger&gt;</span>
    <span class="nt">&lt;EventTrigger</span> <span class="na">RoutedEvent=</span><span class="s">"Mouse.MouseEnter"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;EventTrigger.Actions&gt;</span>
            <span class="nt">&lt;BeginStoryboard&gt;</span>
                <span class="nt">&lt;Storyboard&gt;</span>
                    <span class="nt">&lt;DoubleAnimation</span>
                        <span class="na">Duration=</span><span class="s">"0:0:0.2"</span>
                        <span class="na">Storyboard.TargetProperty=</span><span class="s">"MaxHeight"</span>
                        <span class="na">To=</span><span class="s">"90"</span>  <span class="nt">/&gt;</span>
                <span class="nt">&lt;/Storyboard&gt;</span>
            <span class="nt">&lt;/BeginStoryboard&gt;</span>
        <span class="nt">&lt;/EventTrigger.Actions&gt;</span>
    <span class="nt">&lt;/EventTrigger&gt;</span>
    <span class="nt">&lt;EventTrigger</span> <span class="na">RoutedEvent=</span><span class="s">"Mouse.MouseLeave"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;EventTrigger.Actions&gt;</span>
            <span class="nt">&lt;BeginStoryboard&gt;</span>
                <span class="nt">&lt;Storyboard&gt;</span>
                    <span class="nt">&lt;DoubleAnimation</span>
                        <span class="na">Duration=</span><span class="s">"0:0:1"</span>
                        <span class="na">Storyboard.TargetProperty=</span><span class="s">"MaxHeight"</span>  <span class="nt">/&gt;</span>
                <span class="nt">&lt;/Storyboard&gt;</span>
            <span class="nt">&lt;/BeginStoryboard&gt;</span>
        <span class="nt">&lt;/EventTrigger.Actions&gt;</span>
    <span class="nt">&lt;/EventTrigger&gt;</span>
<span class="nt">&lt;/Style.Triggers&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.multitrigger">MultiTriggers</a> applly property values or performs actions when a set of conditions are satisfied.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;Style.Triggers&gt;</span>
  <span class="nt">&lt;Trigger</span> <span class="na">Property=</span><span class="s">"IsEnabled"</span> <span class="na">Value=</span><span class="s">"false"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"Background"</span> <span class="na">Value=</span><span class="s">"#EEEEEE"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/Trigger&gt;</span>

  <span class="nt">&lt;MultiTrigger&gt;</span>
    <span class="nt">&lt;MultiTrigger.Conditions&gt;</span>
      <span class="nt">&lt;Condition</span> <span class="na">Property=</span><span class="s">"HasItems"</span> <span class="na">Value=</span><span class="s">"false"</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;Condition</span> <span class="na">Property=</span><span class="s">"Width"</span> <span class="na">Value=</span><span class="s">"Auto"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/MultiTrigger.Conditions&gt;</span>
    <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"MinWidth"</span> <span class="na">Value=</span><span class="s">"120"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/MultiTrigger&gt;</span>

  <span class="nt">&lt;MultiTrigger&gt;</span>
    <span class="nt">&lt;MultiTrigger.Conditions&gt;</span>
      <span class="nt">&lt;Condition</span> <span class="na">Property=</span><span class="s">"HasItems"</span> <span class="na">Value=</span><span class="s">"false"</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;Condition</span> <span class="na">Property=</span><span class="s">"Height"</span> <span class="na">Value=</span><span class="s">"Auto"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/MultiTrigger.Conditions&gt;</span>
    <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">"MinHeight"</span> <span class="na">Value=</span><span class="s">"95"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/MultiTrigger&gt;</span>
<span class="nt">&lt;/Style.Triggers&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.eventsetter">Event setters</a> invoke the specified event handlers in response to routed events, which apply to all elements that reference the Style rather than requiring to attach instance handlers to each individual element.</p>
<div class="ulist">
<ul>
<li>
<p>Only <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.style.setters?view=windowsdesktop-8.0">Style.Setters</a> support <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.eventsetter?view=windowsdesktop-8.0">EventSetter</a> objects.</p>
</li>
<li>
<p>Handlers attached through event setters are invoked after any class handlers for an event, and also after any instance handlers.</p>
<div class="paragraph">
<p>As a result, if a class handler or instance handler marks an event handled in its arguments, then the handler declared by an event setter is not invoked, unless the event setter specifically sets <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.eventsetter.handledeventstoo?view=windowsdesktop-8.0">HandledEventsToo</a> true.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;StackPanel</span>
  <span class="na">xmlns=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
  <span class="na">xmlns:x=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml"</span>
  <span class="na">x:Class=</span><span class="s">"SDKSample.EventOvw2"</span>
  <span class="na">Name=</span><span class="s">"dpanel2"</span>
  <span class="na">Initialized=</span><span class="s">"PrimeHandledToo"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;StackPanel.Resources&gt;</span>
    <span class="nt">&lt;Style</span> <span class="na">TargetType=</span><span class="s">"{x:Type Button}"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;EventSetter</span> <span class="na">Event=</span><span class="s">"Click"</span> <span class="na">Handler=</span><span class="s">"b1SetColor"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/Style&gt;</span>
  <span class="nt">&lt;/StackPanel.Resources&gt;</span>
  <span class="nt">&lt;Button&gt;</span>Click me<span class="nt">&lt;/Button&gt;</span>
  <span class="nt">&lt;Button</span> <span class="na">Name=</span><span class="s">"ThisButton"</span> <span class="na">Click=</span><span class="s">"HandleThis"</span><span class="nt">&gt;</span>
    Raise event, handle it, use handled=true handler to get it anyway.
  <span class="nt">&lt;/Button&gt;</span>
<span class="nt">&lt;/StackPanel&gt;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">void</span> <span class="nf">b1SetColor</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">RoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">Button</span> <span class="n">b</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">Source</span> <span class="k">as</span> <span class="n">Button</span><span class="p">;</span>
  <span class="n">b</span><span class="p">.</span><span class="n">Background</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SolidColorBrush</span><span class="p">(</span><span class="n">Colors</span><span class="p">.</span><span class="n">Azure</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">void</span> <span class="nf">HandleThis</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">RoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">e</span><span class="p">.</span><span class="n">Handled</span><span class="p">=</span><span class="k">true</span><span class="p">;</span>
<span class="p">}</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="references">References</h2>
<div class="sectionbody">
<div class="ulist bibliography">
<ul class="bibliography">
<li>
<p><a id="maui-mvvm-pattern"></a>[1] <a href="https://learn.microsoft.com/en-us/dotnet/architecture/maui/mvvm" class="bare">https://learn.microsoft.com/en-us/dotnet/architecture/maui/mvvm</a></p>
</li>
<li>
<p><a id="communitytoolkit"></a>[2] <a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/" class="bare">https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/</a></p>
</li>
<li>
<p><a id="wpf"></a>[3] <a href="https://learn.microsoft.com/en-us/dotnet/desktop/wpf" class="bare">https://learn.microsoft.com/en-us/dotnet/desktop/wpf</a></p>
</li>
</ul>
</div>
</div>
</div>]]></content><author><name></name></author><category term="dotnet" /><category term="dotnet" /></entry><entry><title type="html">Git Bash and Cygwin in Windows Terminal</title><link href="https://blog.codefarm.me/2024/08/29/git-bash-cygwin-in-windows-terminal/" rel="alternate" type="text/html" title="Git Bash and Cygwin in Windows Terminal" /><published>2024-08-29T16:32:49+08:00</published><updated>2024-08-29T16:32:49+08:00</updated><id>https://blog.codefarm.me/2024/08/29/git-bash-cygwin-in-windows-terminal</id><content type="html" xml:base="https://blog.codefarm.me/2024/08/29/git-bash-cygwin-in-windows-terminal/"><![CDATA[<div id="toc" class="toc">
<div id="toctitle"></div>
<ul class="sectlevel1">
<li><a href="#git-bash">1. Git Bash</a></li>
<li><a href="#cygwin">2. Cygwin</a></li>
</ul>
</div>
<div class="sect1">
<h2 id="git-bash">1. Git Bash</h2>
<div class="sectionbody">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Open Windows Terminal</p>
</li>
<li>
<p>Enter the <code>Settings</code> page (<code>Ctrl + ,</code>)</p>
</li>
<li>
<p>Click the <code>Add a new profile</code> on the left bottom panel</p>
</li>
<li>
<p>On the <code>Add a new profile</code> page, click <code>New empty profile</code> or <code>Duplicate</code> from an existed profile</p>
</li>
<li>
<p>On the new profile page, fill the following options:</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>Name: <code>Git Bash</code></p>
</li>
<li>
<p>Command Line: <code>C:\Program Files\Git\bin\bash.exe -i -l</code></p>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
The <code>-i -l</code> or <code>--interactive --login</code> options will make Git Bash work on non-ASCII text well.
</td>
</tr>
</table>
</div>
<div class="ulist">
<ul>
<li>
<p>Without <code>-i -l</code>:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">$</span><span class="w"> </span><span class="nb">ls</span> <span class="nt">-l</span> /tmp/hello/
<span class="go">total 0
</span><span class="gp">-rw-r--r-- 1 ousia 197121 0 Aug 29 16:46 '□□'$</span><span class="s1">'\226''□'$'</span><span class="se">\2</span><span class="s1">25</span><span class="se">\2</span><span class="s1">14'</span></code></pre>
</div>
</div>
</li>
<li>
<p>With <code>-i -l</code>:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">$</span><span class="w"> </span><span class="nb">ls</span> <span class="nt">-l</span> /tmp/hello/
<span class="go">total 0
-rw-r--r-- 1 ousia 197121 0 Aug 29 16:46 世界</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>Starting Directory: <code>%USERPROFILE%</code></p>
</li>
<li>
<p>Icon: <code>C:\Program Files\Git\git-bash.exe</code></p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>Click the <code>Save</code> on the right bottom to finish it.</p>
</li>
</ol>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>To solve Git not displaying unicode file names:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">$</span><span class="w"> </span>git init <span class="nt">--initial-branch</span><span class="o">=</span>main
<span class="gp">$</span><span class="w"> </span><span class="nb">touch</span> <span class="s1">'Hello 世界.txt'</span>
<span class="gp">$</span><span class="w"> </span>git status
<span class="go">On branch main

No commits yet

Untracked files:
</span><span class="gp">  (use "git add &lt;file&gt;</span>...<span class="s2">" to include in what will be committed)
</span><span class="go">        "Hello \344\270\226\347\225\214.txt"

nothing added to commit but untracked files present (use "git add" to track)

</span><span class="gp">$</span><span class="w"> </span>git config core.quotePath <span class="nb">false</span>
<span class="go">
</span><span class="gp">$</span><span class="w"> </span>git status
<span class="go">On branch main

No commits yet

Untracked files:
</span><span class="gp">  (use "git add &lt;file&gt;</span>...<span class="s2">" to include in what will be committed)
</span><span class="go">        Hello 世界.txt

nothing added to commit but untracked files present (use "git add" to track)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>You can also specify the <code>--global</code> option as below:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">git config <span class="nt">--global</span> core.quotePath <span class="nb">false</span></code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cygwin">2. Cygwin</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Run <a href="https://www.cygwin.com/setup-x86_64.exe">setup-x86_64.exe</a> any time you want to update or install a Cygwin package for 64-bit windows.</p>
</li>
<li>
<p>The setup program will check by default if it runs with administrative privileges and, if not, will try to elevate the process. If you want to avoid this behaviour and install under an unprivileged account just for your own usage, run setup with the <code>--no-admin</code> option.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">./setup-x86_64.exe <span class="nt">--no-admin</span></code></pre>
</div>
</div>
</li>
<li>
<p>Add the <code>ROOT_INSTALL_DIRECTORY</code> + <code>bin</code> directory to the <code>PATH</code> environment, such as:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="txt">C:\cygwin64\bin</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>]]></content><author><name></name></author><category term="misc" /><category term="misc" /></entry><entry><title type="html">Dimensions and Embedding Models</title><link href="https://blog.codefarm.me/2024/06/19/dimensions-embedding-models/" rel="alternate" type="text/html" title="Dimensions and Embedding Models" /><published>2024-06-19T17:15:55+08:00</published><updated>2024-06-19T17:15:55+08:00</updated><id>https://blog.codefarm.me/2024/06/19/dimensions-embedding-models</id><content type="html" xml:base="https://blog.codefarm.me/2024/06/19/dimensions-embedding-models/"><![CDATA[<div id="toc" class="toc">
<div id="toctitle"></div>
<ul class="sectlevel1">
<li><a href="#dimensions-embedding-models">1. Dimensions &amp; Embedding Models</a>
<ul class="sectlevel2">
<li><a href="#dimensionality-mapping-the-essence-of-data">1.1. Dimensionality: Mapping the Essence of Data</a></li>
<li><a href="#embedding-models-bridging-the-gap-between-data-and-meaning">1.2. Embedding Models: Bridging the Gap Between Data and Meaning</a></li>
</ul>
</li>
<li><a href="#dimensionality-in-milvus">2. Dimensionality in Milvus</a>
<ul class="sectlevel2">
<li><a href="#collections-in-milvus">2.1. Collections in Milvus:</a></li>
<li><a href="#vector-embeddings">2.2. Vector Embeddings:</a></li>
<li><a href="#efficient-retrieval">2.3. Efficient Retrieval:</a></li>
</ul>
</li>
<li><a href="#building-a-text-based-kb-system-with-milvus">3. Building a Text-based KB System with Milvus</a>
<ul class="sectlevel2">
<li><a href="#understanding-textual-data">3.1. Understanding Textual Data:</a></li>
<li><a href="#dimensionality-and-milvus-collections">3.2. Dimensionality and Milvus Collections:</a></li>
<li><a href="#selecting-the-right-embedding-model-for-your-kb-system">3.3. Selecting the Right Embedding Model for your KB System:</a></li>
<li><a href="#experimentation-is-key">3.4. Experimentation is Key:</a></li>
</ul>
</li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
This post is generated by Google Gemini
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="dimensions-embedding-models">1. Dimensions &amp; Embedding Models</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In the realm of machine learning, particularly when dealing with complex data like text, two concepts play a crucial role in capturing meaning and enabling efficient information retrieval: <strong>dimensionality</strong> and <strong>embedding models</strong>.</p>
</div>
<div class="sect2">
<h3 id="dimensionality-mapping-the-essence-of-data">1.1. Dimensionality: Mapping the Essence of Data</h3>
<div class="paragraph">
<p>Imagine a vast space with multiple axes. Each axis represents a specific feature used to describe something. In machine learning, this space is often used to represent data points. <strong>Dimensionality</strong> refers to the number of axes (features) used in this space.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The Right Fit: There&#8217;s no one-size-fits-all approach to dimensionality. The optimal number of features depends on the type of data and the task at hand. For example, representing an image might require hundreds or thousands of dimensions (pixels), while a simple classification task might only need a few.</p>
</li>
<li>
<p>Balancing Complexity and Efficiency: Higher dimensionality can potentially capture more nuanced details about the data. However, it also comes with downsides:</p>
</li>
<li>
<p>Increased Complexity: More features can make algorithms more complex and computationally expensive to train.</p>
</li>
<li>
<p>Curse of Dimensionality: As dimensionality increases, the amount of data needed to effectively learn relationships between features grows exponentially. This can lead to poor performance with limited data.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The goal is to find the <strong>sweet spot</strong> – a dimensionality that captures the essential information for your task without introducing unnecessary complexity. Experimenting with different dimensions and evaluating the performance of your model is key to finding this balance.</p>
</div>
</div>
<div class="sect2">
<h3 id="embedding-models-bridging-the-gap-between-data-and-meaning">1.2. Embedding Models: Bridging the Gap Between Data and Meaning</h3>
<div class="paragraph">
<p>Raw data, like text or images, can be difficult for machines to understand directly. Embedding models act as a bridge, transforming this data into a more meaningful representation suitable for machine learning algorithms. They do this by:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Analyzing the Data: The model analyzes the data, identifying patterns and relationships within it. For example, a text embedding model might analyze word co-occurrence to understand semantic relationships between words.</p>
</li>
<li>
<p>Generating Embeddings: Based on the analysis, the model generates numerical vectors (embeddings) that represent the data. These vectors capture the essence of the data in a way that the machine learning model can understand and use effectively.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><strong>Benefits of Embedding Models</strong>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Efficiency: Embeddings are often lower dimensional than the original data, making them more efficient for storage and processing by machine learning algorithms.</p>
</li>
<li>
<p>Capturing Relationships: Well-designed embedding models can capture complex relationships within the data, leading to better performance in various tasks like similarity search and classification.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><strong>Choosing the Right Embedding Model:</strong></p>
</div>
<div class="paragraph">
<p>The best embedding model depends on the specific type of data and the task at hand. Different models excel at handling different data types (text, images, etc.) and capturing different aspects of the data.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="dimensionality-in-milvus">2. Dimensionality in Milvus</h2>
<div class="sectionbody">
<div class="paragraph">
<p>While Milvus itself doesn&#8217;t directly deal with "dimensionality" in the same way as traditional machine learning models, it plays a crucial role in how embedding models and vector data are stored and retrieved.</p>
</div>
<div class="paragraph">
<p>In essence, Milvus provides a storage and retrieval framework for vector data generated by embedding models. By carefully considering dimensionality and choosing the right embedding model, you can optimize your Milvus system for efficient storage, retrieval, and accurate search results based on the semantic meaning of your data.</p>
</div>
<div class="sect2">
<h3 id="collections-in-milvus">2.1. Collections in Milvus:</h3>
<div class="ulist">
<ul>
<li>
<p>Collections Define Dimension: When you create a collection in Milvus, you specify its dimensionality, which refers to the size of the vector embeddings that will be stored in that collection. This essentially defines the number of features used to represent your data points.</p>
</li>
<li>
<p>Fixed Dimension for a Collection: Unlike traditional models where dimensionality can be dynamic, each collection in Milvus has a fixed dimensionality. All vectors stored within a collection must have the same size (number of elements).</p>
</li>
<li>
<p>Choosing the Right Dimension: The optimal dimension for your Milvus collection depends on the chosen embedding model and your specific data. Experimenting with different dimensions within the recommended range for your embedding model is crucial to find the balance between capturing sufficient information and storage efficiency.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="vector-embeddings">2.2. Vector Embeddings:</h3>
<div class="ulist">
<ul>
<li>
<p>Pre-trained or Train Your Own: You can utilize pre-trained embedding models (e.g., Word2Vec) or train your own model to generate vector embeddings for your data. These embeddings capture the semantic meaning of your data points (text, images, etc.) in a numerical format.</p>
</li>
<li>
<p>Dimensionality Match with Collection: The dimension (size) of the generated vector embeddings must match the dimensionality of the Milvus collection where you plan to store them. This ensures compatibility and efficient storage within Milvus.</p>
</li>
<li>
<p>Dimensionality Mismatch (Optional): If using a pre-trained model with a different dimension than your collection, you might need to adapt:</p>
<div class="ulist">
<ul>
<li>
<p>Dimensionality Reduction: Techniques like PCA can be used to project higher dimensional vectors into a lower dimension that aligns with your collection&#8217;s dimensionality.</p>
</li>
<li>
<p>Partial Vector Usage: You can utilize only a specific portion (e.g., the first 300 dimensions) of a higher dimensional vector if it aligns with your collection size.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="efficient-retrieval">2.3. Efficient Retrieval:</h3>
<div class="ulist">
<ul>
<li>
<p>Similarity Search at Its Core: Milvus excels at performing similarity search on vector data stored within collections. It compares query vectors (representing search terms) with stored vectors based on their distance in the multi-dimensional space.</p>
</li>
<li>
<p>Dimensionality Impacts Search Performance: While the exact impact can vary depending on the data and search algorithm, lower dimensionality can potentially lead to faster search times in Milvus. This is because there are fewer features to compare during the similarity calculation.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="building-a-text-based-kb-system-with-milvus">3. Building a Text-based KB System with Milvus</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Milvus offers a powerful platform for building text-based knowledge base (KB) systems.</p>
</div>
<div class="sect2">
<h3 id="understanding-textual-data">3.1. Understanding Textual Data:</h3>
<div class="ulist">
<ul>
<li>
<p>Transforming Text into Meaningful Vectors: Raw text data isn&#8217;t directly usable by Milvus. We need a way to capture the semantic meaning of words and documents. This is where embedding models come in.</p>
</li>
<li>
<p>Embedding Models Bridge the Gap: These models analyze your text data, identifying relationships between words and documents. They then generate numerical vectors (embeddings) that represent this semantic meaning in a multi-dimensional space.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="dimensionality-and-milvus-collections">3.2. Dimensionality and Milvus Collections:</h3>
<div class="ulist">
<ul>
<li>
<p>Defining the Vector Space: When creating a collection in Milvus for your KB system, you specify its dimensionality. This represents the number of elements (features) in your vector embeddings. It essentially defines the size of the multi-dimensional space where meaning is represented.</p>
</li>
<li>
<p>Choosing the Right Dimension: There&#8217;s no one-size-fits-all answer. The optimal dimension depends on the chosen embedding model and your specific dataset. Common text embedding models typically work well within a range of 50 to 1024 dimensions.</p>
</li>
<li>
<p>Balancing Accuracy and Efficiency: Higher dimensionality can potentially capture more nuanced semantic information, leading to better retrieval accuracy (finding relevant documents in your KB). However, it also comes with trade-offs:</p>
<div class="ulist">
<ul>
<li>
<p>Storage Requirements: Higher dimensional vectors require more storage space within Milvus.</p>
</li>
<li>
<p>Search Performance: Milvus performs similarity searches to retrieve documents. Higher dimensional vectors might lead to slightly slower search times.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="selecting-the-right-embedding-model-for-your-kb-system">3.3. Selecting the Right Embedding Model for your KB System:</h3>
<div class="ulist">
<ul>
<li>
<p>Multiple Options: Consider Word2Vec, the default model from Milvus (e.g., paraphrase-albert-small-v2), or explore other pre-trained models.</p>
</li>
<li>
<p>Word2Vec: A Reliable Choice: This well-established model excels at capturing word-level semantics. Many pre-trained Word2Vec models are available, often with 300 dimensions (ideal for your collection). However, it might not capture complex relationships within longer text passages as effectively.</p>
</li>
<li>
<p>Default Milvus Model: Potential for Richer Relationships: Milvus&#8217;s default model might capture more complex relationships compared to Word2Vec. The advantage? It&#8217;s pre-trained, eliminating the need for training on your data. However, it might have a higher dimension (e.g., 768) requiring handling for your collection:</p>
<div class="ulist">
<ul>
<li>
<p>Dimensionality Reduction: Techniques like PCA can project these higher dimensional vectors into a lower dimension compatible with your collection.</p>
</li>
<li>
<p>Partial Vector Usage: You can utilize only the first 300 dimensions of the generated vectors if it aligns with your collection size.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="experimentation-is-key">3.4. Experimentation is Key:</h3>
<div class="paragraph">
<p>The best approach depends on your specific needs. Try both Word2Vec (potentially pre-trained) and the default model on your KB system&#8217;s data. Evaluate the retrieval performance (Recall@K) to see which one delivers the most accurate results in finding relevant documents based on your queries.</p>
</div>
<div class="paragraph">
<p><strong>Here are some additional tips:</strong></p>
</div>
<div class="ulist">
<ul>
<li>
<p>Focus on Accuracy with an Eye on Efficiency: Prioritize retrieval accuracy, but consider the impact of dimensionality on storage and search performance. Find a balance that works for your KB system&#8217;s needs.</p>
</li>
<li>
<p>Consider Training Your Own Word2Vec (Optional): If pre-trained models don&#8217;t offer the desired performance or your KB system deals with a specific domain vocabulary, consider training your own Word2Vec model. This requires data pre-processing and setting training parameters, but can offer the most optimized performance.</p>
</li>
</ul>
</div>
</div>
</div>
</div>]]></content><author><name></name></author><category term="ai" /><category term="ai" /><category term="embedding" /></entry><entry><title type="html">RAG: Boosting LLMs with Contextual Retrieval</title><link href="https://blog.codefarm.me/2024/06/18/rag-boosting-llms-with-contextual-retrieval/" rel="alternate" type="text/html" title="RAG: Boosting LLMs with Contextual Retrieval" /><published>2024-06-18T13:33:05+08:00</published><updated>2024-06-18T13:33:05+08:00</updated><id>https://blog.codefarm.me/2024/06/18/rag-boosting-llms-with-contextual-retrieval</id><content type="html" xml:base="https://blog.codefarm.me/2024/06/18/rag-boosting-llms-with-contextual-retrieval/"><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>RAG (Retrieval-Augmented Generation) is a powerful technique that enhances the capabilities of Large Language Models (LLMs) like GPT-4. While LLMs excel at generating text, they often lack context and struggle to understand the deeper meaning behind user queries. RAG bridges this gap by incorporating information retrieval to provide LLMs with relevant context, leading to improved response quality.</p>
</div>
</div>
<div id="toc" class="toc">
<div id="toctitle"></div>
<ul class="sectlevel1">
<li><a href="#how-does-rag-work">1. How does RAG work?</a></li>
<li><a href="#deep-dive-into-context-enrichment-for-rag-systems">2. Deep Dive into Context Enrichment for RAG Systems</a></li>
<li><a href="#automatic-prompt-construction">3. Automatic Prompt Construction</a></li>
<li><a href="#build-rag-with-milvus">4. Build RAG with Milvus</a>
<ul class="sectlevel2">
<li><a href="#prepare-the-data-in-milvus">4.1. Prepare the data in Milvus</a></li>
<li><a href="#use-llm-to-get-a-rag-response">4.2. Use LLM to get a RAG response</a></li>
</ul>
</li>
<li><a href="#references">References</a></li>
</ul>
</div>
</div>
<div class="sect1">
<h2 id="how-does-rag-work">1. How does RAG work?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>RAG is a pattern which uses your data with an LLM to generate answers specific to your data. When a user asks a question, the data store is searched based on user input. The user question is then combined with the matching results and sent to the LLM using a prompt (explicit instructions to an AI or machine learning model) to generate the desired answer. This can be illustrated as follows. <a href="#ms-az-ai-rag">[1]</a></p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://learn.microsoft.com/en-us/azure/ai-studio/media/index-retrieve/rag-pattern.png#lightbox" alt="Screenshot of the RAG pattern." width="55%" height="55%">
</div>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>User Input: The user provides a query or prompt.</p>
</li>
<li>
<p>Vector Search: A vector database (like Milvus) efficiently retrieves documents or passages most relevant to the user&#8217;s query based on semantic similarity.</p>
</li>
<li>
<p>Context Enrichment: Techniques like summarization, keyphrase extraction, or entity recognition are applied to the retrieved information, providing context for the LLM.</p>
</li>
<li>
<p>Prompt Construction: The user&#8217;s original query is combined with the extracted context to form a new, enriched prompt for the LLM.</p>
</li>
<li>
<p>Enhanced Generation: The LLM leverages the enriched prompt to generate a more informative and relevant response that addresses the user&#8217;s specific intent and considers the retrieved context.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>While Milvus and GPT-like LLMs are key players, consider these additional aspects for a well-rounded RAG system:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Machine Learning Fundamentals: Understanding concepts like word embeddings and information retrieval is crucial.</p>
</li>
<li>
<p>Alternative Tools: Explore other vector databases and pre-trained word embedding models.</p>
</li>
<li>
<p>Prompt Construction Techniques: Utilize template-based prompts, conditional logic, or fine-tuning for automatic prompt generation.</p>
</li>
<li>
<p>Evaluation: Continuously monitor performance to identify areas for improvement.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In essence, RAG empowers LLMs to become more contextually aware, leading to a more informative and engaging user experience.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="deep-dive-into-context-enrichment-for-rag-systems">2. Deep Dive into Context Enrichment for RAG Systems</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Context enrichment is a crucial step in RAG (Retrieval-Augmented Generation) that bridges the gap between a user&#8217;s query and the LLM&#8217;s response. It involves processing the information retrieved from the vector database (like Milvus) to provide the LLM with a deeper understanding of the user&#8217;s intent and the relevant context.</p>
</div>
<div class="paragraph">
<p>Here&#8217;s a breakdown of some popular libraries and techniques for context enrichment:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Text Summarization:</p>
<div class="ulist">
<ul>
<li>
<p>Goal: Condense retrieved documents into concise summaries for the LLM to grasp the key points.</p>
</li>
<li>
<p>Libraries:</p>
<div class="ulist">
<ul>
<li>
<p>Gensim (Python): Offers various summarization techniques, including extractive (selecting important sentences) and abstractive (generating a new summary).</p>
</li>
<li>
<p>BART (Transformers library): A powerful pre-trained model specifically designed for text summarization.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>Keyword Extraction:</p>
<div class="ulist">
<ul>
<li>
<p>Goal: Identify the most relevant keywords or keyphrases within retrieved documents to highlight the main themes.</p>
</li>
<li>
<p>Libraries:</p>
<div class="ulist">
<ul>
<li>
<p>spaCy (Python): Provides functionalities for part-of-speech tagging, named entity recognition, and keyword extraction.</p>
</li>
<li>
<p>NLTK (Python): A comprehensive toolkit for various NLP tasks, including keyword extraction using techniques like TF-IDF (Term Frequency-Inverse Document Frequency).</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>Named Entity Recognition (NER):</p>
<div class="ulist">
<ul>
<li>
<p>Goal: Recognize and classify named entities (people, locations, organizations) within retrieved text, enriching the context for the LLM.</p>
</li>
<li>
<p>Libraries:</p>
<div class="ulist">
<ul>
<li>
<p>spaCy: Offers pre-trained NER models for various languages, allowing the LLM to understand the context of specific entities.</p>
</li>
<li>
<p>Stanford NER: A widely used Java-based library for named entity recognition.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p><strong>Choosing the Right Technique:</strong></p>
</div>
<div class="paragraph">
<p>The best approach for context enrichment depends on your specific needs and the type of data you&#8217;re working with. Here&#8217;s a quick guide:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>For factual or informative responses: Text summarization can be highly effective.</p>
</li>
<li>
<p>For understanding the main topics: Keyword extraction is a good choice.</p>
</li>
<li>
<p>For tasks involving specific entities: Named entity recognition becomes crucial.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><strong>Advanced Techniques:</strong></p>
</div>
<div class="ulist">
<ul>
<li>
<p>Combining Techniques: Don&#8217;t be limited to a single approach. Combine summarization with keyword extraction or NER to provide richer context to the LLM.</p>
</li>
<li>
<p>Custom Summarization Models: For specialized domains, consider training custom summarization models using domain-specific data.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="automatic-prompt-construction">3. Automatic Prompt Construction</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Several approaches can automate prompt construction based on user input and extracted context:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Template-Based Prompts: Pre-defined templates can be used to structure the prompt, incorporating user query and extracted elements (e.g., "{user_query}: Based on similar content, here are some key points: {key_phrases}. Can you elaborate?").</p>
</li>
<li>
<p>Conditional Logic: Conditional statements can be used based on the chosen context enrichment technique. For example, if using summaries, the prompt might say "Here&#8217;s a summary of relevant information&#8230;&#8203;" while using keyphrases, it might mention "Here are some key points&#8230;&#8203;"</p>
</li>
<li>
<p>Fine-tuning Language Models: Techniques like fine-tuning pre-trained LLMs can be explored to allow them to automatically learn how to integrate user queries and retrieved context into a cohesive prompt. This is an advanced approach requiring expertise in machine learning.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><strong>Choosing the Right Tool:</strong></p>
</div>
<div class="paragraph">
<p>The best tool or approach depends on your specific needs and available resources. Here&#8217;s a basic guideline:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Simpler Systems: For less complex RAG systems, template-based prompts with basic summarization or keyword extraction tools might suffice.</p>
</li>
<li>
<p>Advanced Systems: For more sophisticated applications, consider exploring conditional logic, fine-tuning LLMs, or combining different context enrichment techniques to create richer prompts.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>By combining vector databases with the right context enrichment tools and automatic prompt construction techniques, we can build a robust RAG system that leverages the power of LLMs to generate more informative and relevant responses.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="build-rag-with-milvus">4. Build RAG with Milvus</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We will use <a href="https://azure.microsoft.com/en-us/products/phi-3">Phi-3</a>, an open small language model, to provide an OpenAI-compatible API.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="title">Prepare the Phi3 LLM with Ollama on Linux</div>
<div class="ulist">
<ul>
<li>
<p>Install Ollama on Linux:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">curl <span class="nt">-fsSL</span> https://ollama.com/install.sh | sh</code></pre>
</div>
</div>
</li>
<li>
<p>Pull model <code>phi3:mini</code>, and make sure the model checkpoint is prepared:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">ollama pull phi3:mini</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">$</span><span class="w"> </span>ollama list
<span class="go">NAME                    ID              SIZE    MODIFIED
phi3:mini               64c1188f2485    2.4 GB  17 minutes ago</span></code></pre>
</div>
</div>
</li>
<li>
<p>Check the Phi3 model with the Chat Completion API:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">curl http://localhost:11434/v1/chat/completions <span class="se">\</span>
    <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
    <span class="nt">-d</span> <span class="s1">'{"model":"phi3:mini","messages":[{"role":"user","content":"Hi, who are you?"}]}'</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">{
  "id": "chatcmpl-866",
  "object": "chat.completion",
  "created": 1718872510,
  "model": "phi3:mini",
  "system_fingerprint": "fp_ollama",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": " I am Phi, an AI developed to provide information and answer questions to the best of my ability. How can I assist you today?"
      },
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 0,
    "completion_tokens": 30,
    "total_tokens": 30
  }
}</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="prepare-the-data-in-milvus">4.1. Prepare the data in Milvus</h3>
<div class="ulist">
<ul>
<li>
<p>Dependencies and Environment</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">pip <span class="nb">install</span> <span class="nt">--upgrade</span> <span class="s1">'pymilvus[model]==2.4.4'</span> <span class="s1">'numpy&lt;2'</span> openai requests
<span class="c"># pipenv install -v 'pymilvus[model]==2.4.4' 'numpy&lt;2'  openai requests</span></code></pre>
</div>
</div>
</li>
<li>
<p>Prepare the embedding model</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">pymilvus.model.dense</span> <span class="kn">import</span> <span class="n">SentenceTransformerEmbeddingFunction</span>  <span class="c1"># Sentence Transformer pre-trained models
</span>
<span class="c1"># If connection to https://huggingface.co/ failed, uncomment the following path
# import os
# os.environ['HF_ENDPOINT'] = 'https://hf-mirror.com'
</span>
<span class="n">ef</span> <span class="o">=</span> <span class="nc">SentenceTransformerEmbeddingFunction</span><span class="p">(</span>
    <span class="n">model_name</span><span class="o">=</span><span class="sh">'</span><span class="s">all-MiniLM-L6-v2</span><span class="sh">'</span><span class="p">,</span>  <span class="c1"># Specify the model name
</span><span class="p">)</span></code></pre>
</div>
</div>
</li>
<li>
<p>Create the collection in Milvus</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">pymilvus</span> <span class="kn">import</span> <span class="n">MilvusClient</span><span class="p">,</span> <span class="n">DataType</span>

<span class="n">COLLECTION_NAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">my_rag_collection</span><span class="sh">"</span>
<span class="n">SERVER_ADDR</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://localhost:19530</span><span class="sh">"</span>
<span class="n">ACCESS_TOKEN</span> <span class="o">=</span> <span class="sh">"</span><span class="s">root:Milvus</span><span class="sh">"</span>
<span class="n">DB_NAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span>

<span class="c1"># 1. Set up a Milvus client
</span><span class="n">client</span> <span class="o">=</span> <span class="nc">MilvusClient</span><span class="p">(</span>
    <span class="n">uri</span><span class="o">=</span><span class="n">SERVER_ADDR</span><span class="p">,</span>
    <span class="n">token</span><span class="o">=</span><span class="n">ACCESS_TOKEN</span><span class="p">,</span>
    <span class="n">db_name</span><span class="o">=</span><span class="n">DB_NAME</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># 2. Check if the collection already exists and drop it if it does.
</span><span class="k">if</span> <span class="n">client</span><span class="p">.</span><span class="nf">has_collection</span><span class="p">(</span><span class="n">COLLECTION_NAME</span><span class="p">):</span>
    <span class="n">client</span><span class="p">.</span><span class="nf">drop_collection</span><span class="p">(</span><span class="n">COLLECTION_NAME</span><span class="p">)</span>

<span class="c1"># 3. Create a new collection with specified parameters.
</span><span class="n">client</span><span class="p">.</span><span class="nf">create_collection</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="n">COLLECTION_NAME</span><span class="p">,</span>
    <span class="n">dimension</span><span class="o">=</span><span class="mi">384</span><span class="p">,</span>  <span class="c1"># The vector has 384 dimensions, matching the SBERT embedding function with all-MiniLM-L6-v2
</span>    <span class="n">auto_id</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>  <span class="c1"># default is False
</span>    <span class="c1"># primary_field_name="id",
</span>    <span class="c1"># id_type="int",
</span>    <span class="c1"># vector_field_name="vector",
</span>    <span class="c1"># metric_type="COSINE",
</span>    <span class="c1"># enable_dynamic_field=True,
</span><span class="p">)</span>

<span class="c1"># 4. (optional) To load a collection, use the load_collection() method.
# client.load_collection(
#     collection_name=COLLECTION_NAME
# )
#
# To release a collection, use the release_collection() method.
# client.release_collection(
#     collection_name=COLLECTION_NAME
# )
</span>
<span class="c1"># 5. (optional) The collection created above is loaded automatically.
</span><span class="n">res</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">get_load_state</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="n">COLLECTION_NAME</span>
<span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>

<span class="c1"># 6. (optional) List detailed information about the collection.
</span><span class="kn">import</span> <span class="n">json</span>
<span class="n">desc</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">describe_collection</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="n">COLLECTION_NAME</span><span class="p">,</span>
<span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">desc</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">{'state': &lt;LoadState: Loaded&gt;</span><span class="o">}</span>
<span class="go">{
  "collection_name": "my_rag_collection",
  "auto_id": true,
  "num_shards": 1,
  "description": "",
  "fields": [
    {
      "field_id": 100,
      "name": "id",
      "description": "",
      "type": 5,
      "params": {},
      "auto_id": true,
      "is_primary": true
    },
    {
      "field_id": 101,
      "name": "vector",
      "description": "",
      "type": 101,
      "params": {
        "dim": 384
      }
    }
  ],
  "aliases": [],
  "collection_id": 450568843972908135,
  "consistency_level": 2,
  "properties": {},
  "num_partitions": 1,
  "enable_dynamic_field": true
}</span></code></pre>
</div>
</div>
</li>
<li>
<p>Use the <a href="https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md">Milvus development guide</a> to be as the private knowledge in our RAG, which is a good data source for a simple RAG pipeline.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># download and save it as a local text file.
</span><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">urllib.request</span>

<span class="n">URL</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://raw.githubusercontent.com/milvus-io/milvus/master/DEVELOPMENT.md</span><span class="sh">"</span>
<span class="n">FILE_PATH</span> <span class="o">=</span> <span class="sh">"</span><span class="s">./Milvus_DEVELOPMENT.md1</span><span class="sh">"</span>

<span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">FILE_PATH</span><span class="p">):</span>
    <span class="n">urllib</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">urlretrieve</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span> <span class="n">FILE_PATH</span><span class="p">)</span></code></pre>
</div>
</div>
</li>
<li>
<p>Create embeddings, and then insert the data into Milvus</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">pymilvus</span> <span class="kn">import</span> <span class="n">MilvusClient</span><span class="p">,</span> <span class="n">model</span>

<span class="n">COLLECTION_NAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">my_rag_collection</span><span class="sh">"</span>
<span class="n">SERVER_ADDR</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://localhost:19530</span><span class="sh">"</span>
<span class="n">ACCESS_TOKEN</span> <span class="o">=</span> <span class="sh">"</span><span class="s">root:Milvus</span><span class="sh">"</span>
<span class="n">DB_NAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span>

<span class="n">client</span> <span class="o">=</span> <span class="nc">MilvusClient</span><span class="p">(</span>
    <span class="n">uri</span><span class="o">=</span><span class="n">SERVER_ADDR</span><span class="p">,</span>
    <span class="n">token</span><span class="o">=</span><span class="n">ACCESS_TOKEN</span><span class="p">,</span>
    <span class="n">db_name</span><span class="o">=</span><span class="n">DB_NAME</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># If connection to https://huggingface.co/ failed, uncomment the following path
# import os
# os.environ['HF_ENDPOINT'] = 'https://hf-mirror.com'
</span>
<span class="n">ef</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">dense</span><span class="p">.</span><span class="nc">SentenceTransformerEmbeddingFunction</span><span class="p">(</span>
    <span class="n">model_name</span><span class="o">=</span><span class="sh">'</span><span class="s">all-MiniLM-L6-v2</span><span class="sh">'</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">FILE_PATH</span> <span class="o">=</span> <span class="sh">"</span><span class="s">./Milvus_DEVELOPMENT.md</span><span class="sh">"</span>

<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">FILE_PATH</span><span class="p">,</span> <span class="sh">"</span><span class="s">r+t</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">fi</span><span class="p">:</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">fi</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>

<span class="c1"># Use "# " to separate the content in the file, which can roughly separate
# the content of each main part of the markdown file.
</span><span class="n">docs</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s"># </span><span class="sh">"</span><span class="p">)</span>

<span class="n">vectors</span> <span class="o">=</span> <span class="n">ef</span><span class="p">.</span><span class="nf">encode_documents</span><span class="p">(</span><span class="n">docs</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">vector</span><span class="sh">"</span><span class="p">:</span> <span class="n">vectors</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">docs</span><span class="p">[</span><span class="n">i</span><span class="p">]}</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">vectors</span><span class="p">))]</span>

<span class="n">res</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="n">collection_name</span><span class="o">=</span><span class="n">COLLECTION_NAME</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">{'insert_count': 47, 'ids': [450568843971283844, ... , 450568843971283889, 450568843971283890], 'cost': 0}</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="use-llm-to-get-a-rag-response">4.2. Use LLM to get a RAG response</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>
<span class="kn">from</span> <span class="n">pymilvus</span> <span class="kn">import</span> <span class="n">MilvusClient</span><span class="p">,</span> <span class="n">model</span>

<span class="n">COLLECTION_NAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">my_rag_collection</span><span class="sh">"</span>
<span class="n">SERVER_ADDR</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://localhost:19530</span><span class="sh">"</span>
<span class="n">ACCESS_TOKEN</span> <span class="o">=</span> <span class="sh">"</span><span class="s">root:Milvus</span><span class="sh">"</span>
<span class="n">DB_NAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span>

<span class="n">client</span> <span class="o">=</span> <span class="nc">MilvusClient</span><span class="p">(</span>
    <span class="n">uri</span><span class="o">=</span><span class="n">SERVER_ADDR</span><span class="p">,</span>
    <span class="n">token</span><span class="o">=</span><span class="n">ACCESS_TOKEN</span><span class="p">,</span>
    <span class="n">db_name</span><span class="o">=</span><span class="n">DB_NAME</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># If connection to https://huggingface.co/ failed, uncomment the following path
# import os
# os.environ['HF_ENDPOINT'] = 'https://hf-mirror.com'
</span>
<span class="n">ef</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">dense</span><span class="p">.</span><span class="nc">SentenceTransformerEmbeddingFunction</span><span class="p">(</span>
    <span class="n">model_name</span><span class="o">=</span><span class="sh">'</span><span class="s">all-MiniLM-L6-v2</span><span class="sh">'</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># Define a query question about the content of the development guide documentation.
</span><span class="n">question</span> <span class="o">=</span> <span class="sh">"</span><span class="s">what is the hardware requirements specification if I want to build Milvus and run from source code?</span><span class="sh">"</span>

<span class="c1"># Search for the question in the collection and retrieve the semantic top-3 matches.
</span><span class="n">res</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="n">COLLECTION_NAME</span><span class="p">,</span>
    <span class="n">data</span><span class="o">=</span><span class="n">ef</span><span class="p">.</span><span class="nf">encode_queries</span><span class="p">([</span><span class="n">question</span><span class="p">]),</span>
    <span class="n">limit</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>  <span class="c1"># Return top 3 results
</span>    <span class="n">output_fields</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">],</span>  <span class="c1"># Return the text field
</span><span class="p">)</span>

<span class="n">retrieved_lines_with_distances</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="sh">"</span><span class="s">entity</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">],</span> <span class="n">r</span><span class="p">[</span><span class="sh">"</span><span class="s">distance</span><span class="sh">"</span><span class="p">])</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="p">]</span>
<span class="c1"># [
#   [
#     "Hardware Requirements\n\nThe following specification (either physical or virtual machine resources) is recommended for Milvus to build and run from source code.\n\n```\n- 8GB of RAM\n- 50GB of free disk space\n```\n\n##",
#     0.8904632329940796
#   ],
#   [
#     "Software Requirements\n\nAll Linux distributions are available for Milvus development. However a majority of our contributor worked with Ubuntu or CentOS systems, with a small portion of Mac (both x86_64 and Apple Silicon) contributors. If you would like Milvus to build and run on other distributions, you are more than welcome to file an issue and contribute!\n\nHere's a list of verified OS types where Milvus can successfully build and run:\n\n- Debian/Ubuntu\n- Amazon Linux\n- MacOS (x86_64)\n- MacOS (Apple Silicon)\n\n##",
#     0.7089803814888
#   ],
#   [
#     "Building Milvus on a local OS/shell environment\n\nThe details below outline the hardware and software requirements for building on Linux and MacOS.\n\n##",
#     0.7013456225395203
#   ]
# ]
</span>
<span class="c1"># Convert the retrieved documents into a string format.
</span><span class="n">context</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span>
    <span class="p">[</span><span class="n">line_with_distance</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">line_with_distance</span> <span class="ow">in</span> <span class="n">retrieved_lines_with_distances</span><span class="p">]</span>
<span class="p">)</span>

<span class="c1"># Define system and user prompts for the Lanage Model.
</span><span class="n">SYSTEM_PROMPT</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">
Human: You are an AI assistant. You are able to find answers to the questions from the contextual passage snippets provided.
</span><span class="sh">"""</span>
<span class="n">USER_PROMPT</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"""</span><span class="s">
Use the following pieces of information enclosed in &lt;context&gt; tags to provide an answer to the question enclosed in &lt;question&gt; tags.
&lt;context&gt;
</span><span class="si">{</span><span class="n">context</span><span class="si">}</span><span class="s">
&lt;/context&gt;
&lt;question&gt;
</span><span class="si">{</span><span class="n">question</span><span class="si">}</span><span class="s">
&lt;/question&gt;
</span><span class="sh">"""</span>

<span class="c1"># Use OpenAI Chat Completion API to generate a response based on the prompts.
</span><span class="n">OAI_API_KEY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">EMPTY</span><span class="sh">"</span>
<span class="n">OAI_API_BASE</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://localhost:11434/v1</span><span class="sh">"</span>

<span class="n">oai_client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span>
    <span class="n">api_key</span><span class="o">=</span><span class="n">OAI_API_KEY</span><span class="p">,</span>
    <span class="n">base_url</span><span class="o">=</span><span class="n">OAI_API_BASE</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">response</span> <span class="o">=</span> <span class="n">oai_client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">phi3:mini</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">messages</span><span class="o">=</span><span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">SYSTEM_PROMPT</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">USER_PROMPT</span><span class="p">},</span>
    <span class="p">],</span>
<span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">The hardware requirements specification for building Milvus and running it from source code includes having at least 8GB of RAM and 50GB of free disk space.</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="references">References</h2>
<div class="sectionbody">
<div class="ulist bibliography">
<ul class="bibliography">
<li>
<p><a id="ms-az-ai-rag"></a>[1] <a href="https://learn.microsoft.com/en-us/azure/ai-studio/concepts/retrieval-augmented-generation" class="bare">https://learn.microsoft.com/en-us/azure/ai-studio/concepts/retrieval-augmented-generation</a></p>
</li>
<li>
<p><a id="milvus-arg"></a>[2 ] <a href="https://milvus.io/docs/build-rag-with-milvus.md" class="bare">https://milvus.io/docs/build-rag-with-milvus.md</a></p>
</li>
</ul>
</div>
</div>
</div>]]></content><author><name></name></author><category term="ai" /><category term="ai" /><category term="llm" /><category term="rag" /></entry><entry><title type="html">Proxies in Docker and containerd</title><link href="https://blog.codefarm.me/2024/06/15/proxies-in-docker-containerd/" rel="alternate" type="text/html" title="Proxies in Docker and containerd" /><published>2024-06-15T10:36:13+08:00</published><updated>2024-06-15T10:36:13+08:00</updated><id>https://blog.codefarm.me/2024/06/15/proxies-in-docker-containerd</id><content type="html" xml:base="https://blog.codefarm.me/2024/06/15/proxies-in-docker-containerd/"><![CDATA[<div id="toc" class="toc">
<div id="toctitle"></div>
<ul class="sectlevel1">
<li><a href="#unveiling-the-proxy-trio-http_proxy-https_proxy-and-no_proxy">1. Unveiling the Proxy Trio: http_proxy, https_proxy, and no_proxy</a></li>
<li><a href="#unveiling-the-proxy-trio-with-docker-and-containerd">2. Unveiling the Proxy Trio with Docker and containerd</a></li>
<li><a href="#install-docker-engine-on-debian">3. Install Docker Engine on Debian</a></li>
</ul>
</div>
<div class="sect1">
<h2 id="unveiling-the-proxy-trio-http_proxy-https_proxy-and-no_proxy">1. Unveiling the Proxy Trio: http_proxy, https_proxy, and no_proxy</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Ever tried downloading a file online but encountered a restrictive firewall (security barrier) blocking your way?</p>
</div>
<div class="paragraph">
<p>Fear not! This guide unveils the magic behind <code>http_proxy</code> and <code>https_proxy</code>, the environment variables that act as passports for your tools to navigate these gatekeepers.</p>
</div>
<div class="paragraph">
<p>Imagine <code>curl</code>, a popular Swiss army knife tool for downloading files from the internet, needs to access a website, but a firewall stands between them, potentially for restriction of information access, and security reasons. Here is where the environment variables <code>http_proxy</code> and <code>https_proxy</code> come in:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>http_proxy</code> specifies the address and port of a proxy server specifically for handling <strong>regular, unencrypted HTTP traffic</strong>.</p>
<div class="paragraph">
<p>Think of it as a translator, converting your request into a format the proxy understands before forwarding it to the website.</p>
</div>
</li>
<li>
<p><code>https_proxy</code>: caters to <strong>HTTPS traffic</strong>, which is encrypted for security.</p>
<div class="paragraph">
<p>When set, <code>curl</code> establishes a secure tunnel with the proxy server using TLS/SSL before sending any data. It&#8217;s like whispering your request through a hidden passage.</p>
</div>
</li>
<li>
<p><code>no_proxy</code> specifies a list of hostnames, domains, or IP addresses that should bypass the proxy server. Traffic destined for these entries will be sent directly to the internet without going through the proxy.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="nb">export </span><span class="nv">no_proxy</span><span class="o">=</span><span class="s2">"localhost,127.0.0.1,internal.mycompany.com"</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>no_proxy</code> list takes precedence over <code>http_proxy</code> and <code>https_proxy</code>. Any traffic destined for a hostname or IP address listed in <code>no_proxy</code> will bypass the proxy, even if a proxy server is defined using the other variables.</p>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>In most cases, <strong>setting <code>http_proxy</code> and <code>https_proxy</code> to the same value (pointing to the same proxy server)</strong> is the common practice for proxying all traffic.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>It&#8217;s important to note that <code>no_proxy</code> might support wildcard patterns (e.g., <code>*.mycompany.com</code>) depending on the specific tool or library interpreting the environment variable. However, it is not a guaranteed feature, and its behavior can vary across applications.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Whenever possible, it&#8217;s safer and more reliable to specify exact hostnames or IP addresses in <code>no_proxy</code> instead of relying on wildcards.</p>
</li>
<li>
<p>If you must use wildcards, thoroughly consult the documentation for the specific tool or library to understand how it interprets wildcard patterns in <code>no_proxy</code>.</p>
</li>
</ul>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Imagine you want to download a file using <code>curl</code> but a firewall with a proxy server is in place. Here&#8217;s how you would use the environment variables:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="c"># Set the proxy server address and port (replace with your actual details)</span>
<span class="nb">export </span><span class="nv">https_proxy</span><span class="o">=</span>http://your_proxy_server:port

<span class="c"># Now, use curl to download the file</span>
curl https://example.com/file.txt</code></pre>
</div>
</div>
<div class="paragraph">
<p>By setting <code>https_proxy</code>, <code>curl</code> knows to route its request through the specified proxy server, allowing you to download the file despite the firewall and proxy combination.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
While <code>curl</code> itself is generally case-insensitive for these variables, using lowercase (<code>http_proxy</code> and <code>https_proxy</code>) is recommended for consistency.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>While <code>http_proxy</code> and <code>https_proxy</code> can be configured for SOCKS proxies by including the <code>socks5://</code> prefix in the URL, it&#8217;s important to understand some limitations:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="nb">export </span><span class="nv">http_proxy</span><span class="o">=</span>socks5://proxy_server:port
<span class="nb">export </span><span class="nv">https_proxy</span><span class="o">=</span>socks5://proxy_server:port</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>SOCKS proxies typically don&#8217;t handle DNS resolution themselves. You might need to configure a separate DNS server for your system to work correctly with a SOCKS proxy.</p>
</li>
<li>
<p>Not all applications are SOCKS proxy aware. Some applications might require additional configuration or may not work correctly through a SOCKS proxy.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>With the understanding of <code>http_proxy</code> and <code>https_proxy</code>, you can navigate proxy servers and access the resources you need!</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="unveiling-the-proxy-trio-with-docker-and-containerd">2. Unveiling the Proxy Trio with Docker and containerd</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When working with containerized applications, pulling images from registries is a common task. But what if your network environment requires a proxy server for internet access? This guide explores how to configure <code>https_proxy</code> for secure communication with container image registries using Docker and containerd.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Docker</strong>: A container engine built on top of containerd, offering a user-friendly interface and additional functionalities for managing images and containers.</p>
</li>
<li>
<p><strong>containerd</strong>: A container runtime engine that manages the lifecycle of containers (creation, starting, stopping, and deletion).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>While Docker, built on top of containerd, manages container image pulling by default, containerd also has its own built-in image pulling plugin (e.g., used by Kubernetes).</p>
</div>
<div class="paragraph">
<p>To ensure consistent proxy behavior regardless of which tool pulls the image, it&#8217;s recommended to configure the proxy for both Docker and containerd.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Set the <code>HTTPS_PROXY</code> environment variable on systemd service files:</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>Locate the systemd service file for containerd and dockerd (e.g., <code>/etc/systemd/system/docker.service</code>).</p>
</li>
<li>
<p>Edit the file (e.g., <code>sudo systemctl edit docker.service</code>) and add the following lines under the <code>[Service]</code> section:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="conf">[<span class="n">Service</span>]
<span class="n">Environment</span>=<span class="s2">"HTTPS_PROXY=https://your_proxy_server:port"</span></code></pre>
</div>
</div>
</li>
<li>
<p>Reload systemd and restart the service:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="nb">sudo </span>systemctl daemon-reload
<span class="nb">sudo </span>systemctl restart docker</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p><a href="https://docs.docker.com/config/daemon/systemd/#httphttps-proxy">Configure the Docker daemon to use a proxy server</a> in the <a href="https://docs.docker.com/config/daemon/#configure-the-docker-daemon">daemon.json</a> file (Recommended for Docker only):</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="json"><span class="p">{</span><span class="w">
  </span><span class="nl">"proxies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"http-proxy"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://proxy.example.com:3128"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"https-proxy"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://proxy.example.com:3129"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"no-proxy"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*.test.example.com,.example.org,127.0.0.0/8"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="install-docker-engine-on-debian">3. Install Docker Engine on Debian</h2>
<div class="sectionbody">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Set up Docker&#8217;s <code>apt</code> repository.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="c"># Add Docker's official GPG key:</span>
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>ca-certificates curl
<span class="nb">sudo install</span> <span class="nt">-m</span> 0755 <span class="nt">-d</span> /etc/apt/keyrings
<span class="nb">sudo </span>curl <span class="nt">-fsSL</span> https://download.docker.com/linux/debian/gpg <span class="nt">-o</span> /etc/apt/keyrings/docker.asc
<span class="nb">sudo chmod </span>a+r /etc/apt/keyrings/docker.asc

<span class="c"># Add the repository to Apt sources:</span>
<span class="nb">echo</span> <span class="se">\</span>
  <span class="s2">"deb [arch=</span><span class="si">$(</span>dpkg <span class="nt">--print-architecture</span><span class="si">)</span><span class="s2"> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian </span><span class="se">\</span><span class="s2">
  </span><span class="si">$(</span><span class="nb">.</span> /etc/os-release <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$VERSION_CODENAME</span><span class="s2">"</span><span class="si">)</span><span class="s2"> stable"</span> | <span class="se">\</span>
  <span class="nb">sudo tee</span> /etc/apt/sources.list.d/docker.list <span class="o">&gt;</span> /dev/null
<span class="nb">sudo </span>apt-get update</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>To use the APT source mirro from Alibaba Cloud, replace the <code><a href="https://download.docker.com" class="bare">https://download.docker.com</a></code> with <code><a href="https://mirrors.aliyun.com/docker-ce" class="bare">https://mirrors.aliyun.com/docker-ce</a></code> at the <code>/etc/apt/sources.list.d/docker.list</code>.</p>
</div>
</td>
</tr>
</table>
</div>
</li>
<li>
<p>Install the Docker packages.</p>
<div class="ulist">
<ul>
<li>
<p>To install the latest version, run:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="nb">sudo </span>apt-get <span class="nb">install </span>docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</code></pre>
</div>
</div>
</li>
<li>
<p>To install a specific version of Docker Engine, start by listing the available versions in the repository:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="c"># List the available versions:</span>
apt-cache madison docker-ce | <span class="nb">awk</span> <span class="s1">'{ print $3 }'</span>

5:26.1.0-1~debian.12~bookworm
5:26.0.2-1~debian.12~bookworm
...</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="c"># Select the desired version and install:</span>
<span class="nv">VERSION_STRING</span><span class="o">=</span>5:26.1.0-1~debian.12~bookworm
<span class="nb">sudo </span>apt-get <span class="nb">install </span>docker-ce<span class="o">=</span><span class="nv">$VERSION_STRING</span> docker-ce-cli<span class="o">=</span><span class="nv">$VERSION_STRING</span> containerd.io docker-buildx-plugin docker-compose-plugin</code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ol>
</div>
</div>
</div>]]></content><author><name></name></author><category term="networking" /><category term="networking" /><category term="proxy" /><category term="http_proxy" /><category term="https_prox" /><category term="curl" /><category term="docker" /><category term="containerd" /></entry><entry><title type="html">What is Milvus?</title><link href="https://blog.codefarm.me/2024/06/14/what-is-milvus-vector-database/" rel="alternate" type="text/html" title="What is Milvus?" /><published>2024-06-14T13:53:48+08:00</published><updated>2024-06-14T13:53:48+08:00</updated><id>https://blog.codefarm.me/2024/06/14/what-is-milvus-vector-database</id><content type="html" xml:base="https://blog.codefarm.me/2024/06/14/what-is-milvus-vector-database/"><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Milvus (/ˈmɪlvəs/) is an open-source vector database to store, index, and manage massive <a href="https://milvus.io/docs/overview.md#Embedding-vectors">embedding vectors</a> generated by deep neural networks and machine learning (ML) models. <a href="#milvus-overview">[1]</a></p>
</div>
<div class="paragraph">
<p>Unlike existing relational databases which mainly deal with structured data following a pre-defined pattern, Milvus is designed from the bottom-up to handle embedding vectors converted from <a href="https://milvus.io/docs/overview.md#Unstructured-data">unstructured data</a>, including images, video, audio, and natural language.</p>
</div>
<div class="paragraph">
<p>Embedding vectors or vectors, the output data format of Neural Network models, can effectively encode information and serve a pivotal role in AI applications such as knowledge base, semantic search, Retrieval Augmented Generation (RAG) and more. Mathematically speaking, an embedding vector is an array of floating-point numbers or binaries. Modern embedding techniques are used to convert unstructured data to embedding vectors.</p>
</div>
<div class="paragraph">
<p>Milvus is able to analyze the correlation between two vectors by calculating their similarity distance. If the two embedding vectors are very similar, it means that the original data sources are similar as well. <a href="https://milvus.io/docs/overview.md#Vector-similarity-search">Vector similarity search</a> is the process of comparing a vector to a database to find vectors that are most similar to the query vector. Approximate nearest neighbor (ANN) search algorithms are used to accelerate the searching process. If the two embedding vectors are very similar, it means that the original data sources are similar as well.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://milvus.io/docs/v2.4.x/assets/milvus_workflow.jpeg" alt="Milvus Workflow" width="75%" height="75%">
</div>
</div>
<div class="paragraph">
<p>Milvus adopts a shared-storage architecture featuring storage and computing disaggregation and horizontal scalability for its computing nodes. Following the principle of data plane and control plane disaggregation, Milvus comprises four layers: access layer, coordinator service, worker node, and storage. <a href="#milvus-architecture_overview">[2]</a></p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://milvus.io/docs/v2.4.x/assets/milvus_architecture.png" alt="Milvus Architecture" width="75%" height="75%">
</div>
</div>
</div>
<div id="toc" class="toc">
<div id="toctitle"></div>
<ul class="sectlevel1">
<li><a href="#install-milvus">1. Install Milvus</a>
<ul class="sectlevel2">
<li><a href="#run-milvus-with-docker-compose">1.1. Run Milvus with Docker Compose</a></li>
<li><a href="#run-milvus-lite-locally">1.2. Run Milvus Lite locally</a></li>
<li><a href="#milvus-command-line-interface-cli">1.3. Milvus Command-Line Interface (CLI)</a></li>
</ul>
</li>
<li><a href="#schema-and-collections">2. Schema and collections</a>
<ul class="sectlevel2">
<li><a href="#load-release-collection">2.1. Load &amp; release collection</a></li>
<li><a href="#dynamic-field">2.2. Dynamic field</a></li>
</ul>
</li>
<li><a href="#embeddings">3. Embeddings</a></li>
<li><a href="#references">References</a></li>
</ul>
</div>
</div>
<div class="sect1">
<h2 id="install-milvus">1. Install Milvus</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Milvus Lite is good for getting started with vector search or building demos and prototypes, and supports the following OS distributions and sillicon types: Ubuntu &gt;= 20.04 (x86_64), and macOS &gt;= 11.0 (Apple Silicon and x86_64), and Debian 12 (x86_64) on Windows with WSL 2 enabled. <a href="#milvus_lite">[4]</a> <a href="#milvus-quickstart">[5]</a></p>
</div>
<div class="paragraph">
<p>For a production use case, It&#8217;s recommended using Milvus on <a href="https://milvus.io/docs/install_standalone-docker.md">Docker</a> and <a href="https://milvus.io/docs/install_cluster-milvusoperator.md">Kubenetes</a>, or considering the fully-managed Milvus on <a href="https://zilliz.com/cloud">Zilliz Cloud</a>.</p>
</div>
<div class="paragraph">
<p>All deployment modes of Milvus share the same API, so your client side code doesn&#8217;t need to change much if moving to another deployment mode. Simply specify the <a href="https://milvus.io/api-reference/pymilvus/v2.4.x/MilvusClient/Client/MilvusClient.md">URI and Token</a> of a Milvus server deployed anywhere: <a href="#milvus-quickstart">[5]</a></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">pymilvus</span> <span class="kn">import</span> <span class="n">MilvusClient</span>

<span class="c1"># Authentication not enabled
</span><span class="n">client</span> <span class="o">=</span> <span class="nc">MilvusClient</span><span class="p">(</span><span class="sh">"</span><span class="s">http://localhost:19530</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Authentication enabled with the root user
</span><span class="n">client</span> <span class="o">=</span> <span class="nc">MilvusClient</span><span class="p">(</span>
    <span class="n">uri</span><span class="o">=</span><span class="sh">"</span><span class="s">http://localhost:19530</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">token</span><span class="o">=</span><span class="sh">"</span><span class="s">root:Milvus</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">db_name</span><span class="o">=</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span>
<span class="p">)</span>

<span class="c1"># Authentication enabled with a non-root user
</span><span class="n">client</span> <span class="o">=</span> <span class="nc">MilvusClient</span><span class="p">(</span>
    <span class="n">uri</span><span class="o">=</span><span class="sh">"</span><span class="s">http://localhost:19530</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">token</span><span class="o">=</span><span class="sh">"</span><span class="s">user:password</span><span class="sh">"</span><span class="p">,</span> <span class="c1"># replace this with your token
</span>    <span class="n">db_name</span><span class="o">=</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span>
<span class="p">)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Milvus provides REST and gRPC API, with client libraries in languages such as Python, Java, Go, C# and Node.js.</p>
</div>
<div class="sect2">
<h3 id="run-milvus-with-docker-compose">1.1. Run Milvus with Docker Compose</h3>
<div class="paragraph">
<p>Milvus provides a Docker Compose configuration file in the Milvus repository. To install Milvus using Docker Compose, just run <a href="#install_standalone-docker-compose">[install_standalone-docker-compose]</a></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="c"># Download the configuration file</span>
<span class="nv">$ </span>wget https://github.com/milvus-io/milvus/releases/download/v2.4.4/milvus-standalone-docker-compose.yml <span class="nt">-O</span> docker-compose.yml

<span class="c"># Start Milvus</span>
<span class="nv">$ </span><span class="nb">sudo </span>docker compose up <span class="nt">-d</span>

Creating milvus-etcd  ... <span class="k">done
</span>Creating milvus-minio ... <span class="k">done
</span>Creating milvus-standalone ... <span class="k">done</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>After starting up Milvus, containers named <code>milvus-standalone</code>, <code>milvus-minio</code>, and <code>milvus-etcd</code> are up.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>milvus-etcd</code> container does not expose any ports to the host and maps its data to <code>volumes/etcd</code> in the current folder.</p>
</li>
<li>
<p>The <code>milvus-minio</code> container serves ports <code>9090</code> and <code>9091</code> locally with the default authentication credentials and maps its data to <code>volumes/minio</code> in the current folder.</p>
</li>
<li>
<p>The <code>milvus-standalone</code> container serves ports <code>19530</code> locally with the default settings and maps its data to <code>volumes/milvus</code> in the current folder.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You can check if the containers are up and running using the following command:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>docker compose ps
<span class="go">
      Name                     Command                  State                            Ports
--------------------------------------------------------------------------------------------------------------------
milvus-etcd         etcd -advertise-client-url ...   Up             2379/tcp, 2380/tcp
milvus-minio        /usr/bin/docker-entrypoint ...   Up (healthy)   9000/tcp
</span><span class="gp">milvus-standalone   /tini -- milvus run standalone   Up             0.0.0.0:19530-&gt;</span>19530/tcp, 0.0.0.0:9091-&gt;9091/tcp</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can stop and delete this container as follows</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">#</span><span class="w"> </span>Stop Milvus
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>docker compose down
<span class="go">
</span><span class="gp">#</span><span class="w"> </span>Delete service data
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo rm</span> <span class="nt">-rf</span> volumes</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="run-milvus-lite-locally">1.2. Run Milvus Lite locally</h3>
<div class="paragraph">
<p>Milvus Lite is the lightweight version of Milvus included in the <a href="https://github.com/milvus-io/pymilvus">Python SDK of Milvus</a>, which can be imported into a Python application, providing the core vector search functionality of Milvus.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Install Milvus</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="c"># set up Milvus Lite with pymilvus, the Python SDK library of Milvus</span>
pip <span class="nb">install</span> <span class="s2">"pymilvus&gt;=2.4.2"</span></code></pre>
</div>
</div>
</li>
<li>
<p>Set up vector database</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># connect to Milvus Lite
</span><span class="kn">from</span> <span class="n">pymilvus</span> <span class="kn">import</span> <span class="n">MilvusClient</span>

<span class="c1"># generate  or load an existing vector database file named milvus_demo.db in the current folder
</span><span class="n">client</span> <span class="o">=</span> <span class="nc">MilvusClient</span><span class="p">(</span><span class="sh">"</span><span class="s">milvus_demo.db</span><span class="sh">"</span><span class="p">)</span></code></pre>
</div>
</div>
</li>
<li>
<p>Create a collection</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># create a collection to store vectors and their associated metadata
</span><span class="n">client</span><span class="p">.</span><span class="nf">create_collection</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">demo_collection</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">dimension</span><span class="o">=</span><span class="mi">768</span><span class="p">,</span>  <span class="c1"># The vectors we will use in this demo has 768 dimensions
</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>The primary key and vector fields use their default names ("id" and "vector").</p>
</li>
<li>
<p>The metric type (vector distance definition) is set to its default value (<a href="https://milvus.io/docs/metric.md#Cosine-Similarity">COSINE</a>).</p>
</li>
<li>
<p>The primary key field accepts integers and does not automatically increments (namely not using <a href="https://milvus.io/docs/schema.md">auto-id feature</a>)</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>Represent text with vectors</p>
<div class="ulist">
<ul>
<li>
<p>To perform semantic search on text, it&#8217;s needed to generate vectors for text by downloading embedding models, which can be easily done by using the utility functions from <code>pymilvus[model]</code> library including essential ML tools such as PyTorch.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">pip <span class="nb">install</span> <span class="s2">"pymilvus[model]&gt;=2.4.2"</span></code></pre>
</div>
</div>
</li>
<li>
<p>Milvus expects data to be inserted organized as a list of dictionaries, where each dictionary represents a data record, termed as an entity.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># generate vector embeddings with default model
</span><span class="kn">from</span> <span class="n">pymilvus</span> <span class="kn">import</span> <span class="n">model</span>

<span class="c1"># If connection to https://huggingface.co/ failed, uncomment the following path
# import os
# os.environ['HF_ENDPOINT'] = 'https://hf-mirror.com'
</span>
<span class="c1"># This will download a small embedding model "paraphrase-albert-small-v2" (~50MB).
</span><span class="n">embedding_fn</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nc">DefaultEmbeddingFunction</span><span class="p">()</span>

<span class="c1"># Text strings to search from.
</span><span class="n">docs</span> <span class="o">=</span> <span class="p">[</span>
    <span class="sh">"</span><span class="s">Artificial intelligence was founded as an academic discipline in 1956.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">Alan Turing was the first person to conduct substantial research in AI.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">Born in Maida Vale, London, Turing was raised in southern England.</span><span class="sh">"</span><span class="p">,</span>
<span class="p">]</span>

<span class="n">vectors</span> <span class="o">=</span> <span class="n">embedding_fn</span><span class="p">.</span><span class="nf">encode_documents</span><span class="p">(</span><span class="n">docs</span><span class="p">)</span>
<span class="c1"># The output vector has 768 dimensions, matching the collection that we just created.
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Dim:</span><span class="sh">"</span><span class="p">,</span> <span class="n">embedding_fn</span><span class="p">.</span><span class="n">dim</span><span class="p">,</span> <span class="n">vectors</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">shape</span><span class="p">)</span>  <span class="c1"># Dim: 768 (768,)
</span>
<span class="c1"># Each entity has id, vector representation, raw text, and a subject label that we use
# to demo metadata filtering later.
</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="n">i</span><span class="p">,</span> <span class="sh">"</span><span class="s">vector</span><span class="sh">"</span><span class="p">:</span> <span class="n">vectors</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">docs</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="sh">"</span><span class="s">subject</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">history</span><span class="sh">"</span><span class="p">}</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">vectors</span><span class="p">))</span>
<span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Data has</span><span class="sh">"</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="sh">"</span><span class="s">entities, each with fields: </span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">keys</span><span class="p">())</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Vector dim:</span><span class="sh">"</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">vector</span><span class="sh">"</span><span class="p">]))</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Dim: 768 (768,)
Data has 3 entities, each with fields:  dict_keys(['id', 'vector', 'text', 'subject'])
Vector dim: 768</span></code></pre>
</div>
</div>
</li>
<li>
<p>Insert data into the collection.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">res</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">demo_collection</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">{'insert_count': 3, 'ids': [0, 1, 2], 'cost': 0}</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>Semantic search</p>
<div class="ulist">
<ul>
<li>
<p>Milvus accepts one or multiple <strong>vector search</strong> requests as a list of vectors, where each vector is an array of float numbers, at the same time.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># from pymilvus import MilvusClient, model
#
# client = MilvusClient("milvus_demo.db")
#
# # If connection to https://huggingface.co/ failed, uncomment the following path
# import os
# os.environ['HF_ENDPOINT'] = 'https://hf-mirror.com'
#
# # This will download a small embedding model "paraphrase-albert-small-v2" (~50MB).
# embedding_fn = model.DefaultEmbeddingFunction()
</span>
<span class="n">query_vectors</span> <span class="o">=</span> <span class="n">embedding_fn</span><span class="p">.</span><span class="nf">encode_queries</span><span class="p">([</span><span class="sh">"</span><span class="s">Who is Alan Turing?</span><span class="sh">"</span><span class="p">])</span>

<span class="n">res</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">demo_collection</span><span class="sh">"</span><span class="p">,</span>  <span class="c1"># target collection
</span>    <span class="n">data</span><span class="o">=</span><span class="n">query_vectors</span><span class="p">,</span>  <span class="c1"># query vectors
</span>    <span class="n">limit</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>  <span class="c1"># number of returned entities
</span>    <span class="n">output_fields</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">subject</span><span class="sh">"</span><span class="p">],</span>  <span class="c1"># specifies fields to be returned
</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">data: ["[{'id': 2, 'distance': 0.5859944820404053, 'entity': {'text': 'Born in Maida Vale, London, Turing was raised in southern England.', 'subject': 'history'}}, {'id': 1, 'distance': 0.5118255019187927, 'entity': {'text': 'Alan Turing was the first person to conduct substantial research in AI.', 'subject': 'history'}}]"] , extra_info: {'cost': 0}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># Vector search with metadata filtering
</span>
<span class="c1"># Insert more docs in another subject.
</span><span class="n">docs</span> <span class="o">=</span> <span class="p">[</span>
    <span class="sh">"</span><span class="s">Machine learning has been used for drug design.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">Computational synthesis with AI algorithms predicts molecular properties.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">DDR1 is involved in cancers and fibrosis.</span><span class="sh">"</span><span class="p">,</span>
<span class="p">]</span>
<span class="n">vectors</span> <span class="o">=</span> <span class="n">embedding_fn</span><span class="p">.</span><span class="nf">encode_documents</span><span class="p">(</span><span class="n">docs</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="sh">"</span><span class="s">vector</span><span class="sh">"</span><span class="p">:</span> <span class="n">vectors</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">docs</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="sh">"</span><span class="s">subject</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">biology</span><span class="sh">"</span><span class="p">}</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">vectors</span><span class="p">))</span>
<span class="p">]</span>

<span class="n">client</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">demo_collection</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>

<span class="c1"># This will exclude any text in "history" subject despite close to the query vector.
</span><span class="n">res</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">demo_collection</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">data</span><span class="o">=</span><span class="n">embedding_fn</span><span class="p">.</span><span class="nf">encode_queries</span><span class="p">([</span><span class="sh">"</span><span class="s">tell me AI related information</span><span class="sh">"</span><span class="p">]),</span>
    <span class="nb">filter</span><span class="o">=</span><span class="sh">"</span><span class="s">subject == </span><span class="sh">'</span><span class="s">biology</span><span class="sh">'"</span><span class="p">,</span>
    <span class="n">limit</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">output_fields</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">subject</span><span class="sh">"</span><span class="p">],</span>
<span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">data: ["[{'id': 4, 'distance': 0.27030572295188904, 'entity': {'text': 'Computational synthesis with AI algorithms predicts molecular properties.', 'subject': 'biology'}}, {'id': 3, 'distance': 0.1642588973045349, 'entity': {'text': 'Machine learning has been used for drug design.', 'subject': 'biology'}}]"] , extra_info: {'cost': 0}</span></code></pre>
</div>
</div>
</li>
<li>
<p>A query() is an operation that retrieves all entities matching a cretria, such as a filter expression or matching some ids.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># retrieving all entities whose scalar field has a particular value
</span><span class="n">res</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">demo_collection</span><span class="sh">"</span><span class="p">,</span>
    <span class="nb">filter</span><span class="o">=</span><span class="sh">"</span><span class="s">subject == </span><span class="sh">'</span><span class="s">history</span><span class="sh">'"</span><span class="p">,</span>
    <span class="n">output_fields</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">subject</span><span class="sh">"</span><span class="p">],</span>
<span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># retrieving entities by primary key directly
</span><span class="n">res</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">demo_collection</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
    <span class="n">output_fields</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">vector</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">subject</span><span class="sh">"</span><span class="p">],</span>
<span class="p">)</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>Delete entities specifying the primary key or delete all entities matching a particular filter expression.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># Delete entities by primary key
</span><span class="n">res</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">demo_collection</span><span class="sh">"</span><span class="p">,</span> <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>

<span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>

<span class="c1"># Delete entities by a filter expression
</span><span class="n">res</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">demo_collection</span><span class="sh">"</span><span class="p">,</span>
    <span class="nb">filter</span><span class="o">=</span><span class="sh">"</span><span class="s">subject == </span><span class="sh">'</span><span class="s">biology</span><span class="sh">'"</span><span class="p">,</span>
<span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>

<span class="c1"># Drop collection
</span><span class="n">client</span><span class="p">.</span><span class="nf">drop_collection</span><span class="p">(</span><span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">demo_collection</span><span class="sh">"</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">[0, 2]
[3, 4, 5]</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="milvus-command-line-interface-cli">1.3. Milvus Command-Line Interface (CLI)</h3>
<div class="paragraph">
<p>Milvus Command-Line Interface (CLI), based on <a href="https://github.com/milvus-io/pymilvus">Milvus Python SDK</a>, is a command-line tool that supports database connection, data operations, and import and export of data. <a href="#milvus-cli_overview">[6]</a></p>
</div>
<div class="ulist">
<ul>
<li>
<p>Install via pip</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">pip <span class="nb">install </span>milvus-cli</code></pre>
</div>
</div>
</li>
<li>
<p>Install with Docker</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">docker run <span class="nt">-it</span> zilliz/milvus_cli:latest</code></pre>
</div>
</div>
</li>
<li>
<p>Commands</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">milvus_cli &gt;</span><span class="w"> </span>connect <span class="nt">-uri</span> http://127.0.0.1:19530
<span class="gp">milvus_cli &gt;</span><span class="w"> </span>create database <span class="nt">-db</span> testdb
<span class="gp">milvus_cli &gt;</span><span class="w"> </span>list databases
<span class="gp">milvus_cli &gt;</span><span class="w"> </span>use database <span class="nt">-db</span> testdb
<span class="gp">milvus_cli &gt;</span><span class="w"> </span>list collections
<span class="gp">milvus_cli &gt;</span><span class="w"> </span>show collection <span class="nt">-c</span> test_collection_insert
<span class="gp">milvus_cli &gt;</span><span class="w"> </span>list connections
<span class="gp">milvus_cli &gt;</span><span class="w"> </span>search
<span class="go">
Collection name (car, test_collection): car

The vectors of search data(the length of data is number of query (nq), the dim of every vector in data must be equal to vector field’s of collection. You can also import a csv file
out headers): examples/import_csv/search_vectors.csv

The vector field used to search of collection (vector): vector

Metric type: L2

Search parameter nprobe's value: 10

The max number of returned record, also known as topk: 2

</span><span class="gp">The boolean expression used to filter attribute []: id &gt;</span><span class="w"> </span>0
<span class="go">
The names of partitions to search (split by "," if multiple) ['_default'] []: _default

timeout []:

Guarantee Timestamp(It instructs Milvus to see all operations performed before a provided timestamp. If no such timestamp is provided, then Milvus will search all operations performed to date) [0]:</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="schema-and-collections">2. Schema and collections</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In Milvus, schema is used to define the properties of a collection and the fields within. <a href="#milvus-schema">[7]</a></p>
</div>
<div class="ulist">
<ul>
<li>
<p>A <em>field schema</em> is the logical definition of a field, and Milvus supports only one primary key field in a collection.</p>
<div class="paragraph">
<p>To reduce the complexity in data inserts, Milvus allows to specify a default value for each scalar field during field schema creation, excluding the primary key field.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Create a regular field schema:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">pymilvus</span> <span class="kn">import</span> <span class="n">FieldSchema</span>
<span class="n">id_field</span> <span class="o">=</span> <span class="nc">FieldSchema</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">DataType</span><span class="p">.</span><span class="n">INT64</span><span class="p">,</span> <span class="n">is_primary</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">primary id</span><span class="sh">"</span><span class="p">)</span>
<span class="n">age_field</span> <span class="o">=</span> <span class="nc">FieldSchema</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">DataType</span><span class="p">.</span><span class="n">INT64</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">)</span>
<span class="n">embedding_field</span> <span class="o">=</span> <span class="nc">FieldSchema</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">embedding</span><span class="sh">"</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">DataType</span><span class="p">.</span><span class="n">FLOAT_VECTOR</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">128</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">vector</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># The following creates a field and use it as the partition key
</span><span class="n">position_field</span> <span class="o">=</span> <span class="nc">FieldSchema</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">position</span><span class="sh">"</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">DataType</span><span class="p">.</span><span class="n">VARCHAR</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span> <span class="n">is_partition_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></code></pre>
</div>
</div>
</li>
<li>
<p>Create a field schema with default field values:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">pymilvus</span> <span class="kn">import</span> <span class="n">FieldSchema</span>

<span class="n">fields</span> <span class="o">=</span> <span class="p">[</span>
  <span class="nc">FieldSchema</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">DataType</span><span class="p">.</span><span class="n">INT64</span><span class="p">,</span> <span class="n">is_primary</span><span class="o">=</span><span class="bp">True</span><span class="p">),</span>
  <span class="c1"># configure default value `25` for field `age`
</span>  <span class="nc">FieldSchema</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">DataType</span><span class="p">.</span><span class="n">INT64</span><span class="p">,</span> <span class="n">default_value</span><span class="o">=</span><span class="mi">25</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">),</span>
  <span class="n">embedding_field</span> <span class="o">=</span> <span class="nc">FieldSchema</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">embedding</span><span class="sh">"</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">DataType</span><span class="p">.</span><span class="n">FLOAT_VECTOR</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">128</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">vector</span><span class="sh">"</span><span class="p">)</span>
<span class="p">]</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>A <em>collection schema</em> is the logical definition of a collection.</p>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
Define the field schemas before defining a collection schema.
</td>
</tr>
</table>
</div>
<div class="ulist">
<ul>
<li>
<p>Create a collection schema</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">pymilvus</span> <span class="kn">import</span> <span class="n">FieldSchema</span><span class="p">,</span> <span class="n">CollectionSchema</span>
<span class="n">id_field</span> <span class="o">=</span> <span class="nc">FieldSchema</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">DataType</span><span class="p">.</span><span class="n">INT64</span><span class="p">,</span> <span class="n">is_primary</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">primary id</span><span class="sh">"</span><span class="p">)</span>
<span class="n">age_field</span> <span class="o">=</span> <span class="nc">FieldSchema</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">DataType</span><span class="p">.</span><span class="n">INT64</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">)</span>
<span class="n">embedding_field</span> <span class="o">=</span> <span class="nc">FieldSchema</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">embedding</span><span class="sh">"</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">DataType</span><span class="p">.</span><span class="n">FLOAT_VECTOR</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">128</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">vector</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Enable partition key on a field if you need to implement multi-tenancy based on the partition-key field
</span><span class="n">position_field</span> <span class="o">=</span> <span class="nc">FieldSchema</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">position</span><span class="sh">"</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">DataType</span><span class="p">.</span><span class="n">VARCHAR</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span> <span class="n">is_partition_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># Set enable_dynamic_field to True if you need to use dynamic fields.
</span><span class="n">schema</span> <span class="o">=</span> <span class="nc">CollectionSchema</span><span class="p">(</span><span class="n">fields</span><span class="o">=</span><span class="p">[</span><span class="n">id_field</span><span class="p">,</span> <span class="n">age_field</span><span class="p">,</span> <span class="n">embedding_field</span><span class="p">],</span> <span class="n">auto_id</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">enable_dynamic_field</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">desc of a collection</span><span class="sh">"</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
Enable dynamic schema by setting <code>enable_dynamic_field</code> to <code>True</code> in the collection schema.
</td>
</tr>
</table>
</div>
</li>
<li>
<p>Create a collection with the schema specified:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">pymilvus</span> <span class="kn">import</span> <span class="n">Collection</span>
<span class="n">collection_name1</span> <span class="o">=</span> <span class="sh">"</span><span class="s">tutorial_1</span><span class="sh">"</span>
<span class="n">collection1</span> <span class="o">=</span> <span class="nc">Collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">collection_name1</span><span class="p">,</span> <span class="n">schema</span><span class="o">=</span><span class="n">schema</span><span class="p">,</span> <span class="n">using</span><span class="o">=</span><span class="sh">'</span><span class="s">default</span><span class="sh">'</span><span class="p">,</span> <span class="n">shards_num</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="load-release-collection">2.1. Load &amp; release collection</h3>
<div class="paragraph">
<p>Before conducting searches in a collection, ensure that the collection is loaded. During the loading process of a collection, Milvus loads the collection&#8217;s index file into memory. Conversely, when releasing a collection, Milvus unloads the index file from memory. <a href="#milvus-manage-collections">[8]</a></p>
</div>
<div class="ulist">
<ul>
<li>
<p>To load a collection, use the <a href="https://milvus.io/api-reference/pymilvus/v2.4.x/MilvusClient/Management/load_collection.md">load_collection()</a> method, specifying the collection name.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># Load the collection
</span><span class="n">client</span><span class="p">.</span><span class="nf">load_collection</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">customized_setup_2</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">replica_number</span><span class="o">=</span><span class="mi">1</span> <span class="c1"># Number of replicas to create on query nodes. Max value is 1 for Milvus Standalone, and no greater than `queryNode.replicas` for Milvus Cluster.
</span><span class="p">)</span>

<span class="n">res</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">get_load_state</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">customized_setup_2</span><span class="sh">"</span>
<span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>

<span class="c1"># Output
#
# {
#     "state": "&lt;LoadState: Loaded&gt;"
# }</span></code></pre>
</div>
</div>
</li>
<li>
<p>To release a collection, use the <a href="https://milvus.io/api-reference/pymilvus/v2.4.x/MilvusClient/Management/release_collection.md">release_collection()</a> method, specifying the collection name.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># Release the collection
</span><span class="n">client</span><span class="p">.</span><span class="nf">release_collection</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">customized_setup_2</span><span class="sh">"</span>
<span class="p">)</span>

<span class="n">res</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">get_load_state</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">customized_setup_2</span><span class="sh">"</span>
<span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>

<span class="c1"># Output
#
# {
#     "state": "&lt;LoadState: NotLoad&gt;"
# }</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="dynamic-field">2.2. Dynamic field</h3>
<div class="paragraph">
<p>The <a href="https://milvus.io/docs/enable-dynamic-field.md">dynamic field</a> in a collection is a reserved JSON field named <code>$meta</code>. It can hold non-schema-defined fields and their values as key-value pairs. Using the dynamic field, search and query both schema-defined fields and any non-schema-defined fields they may have.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Enable dynamic field</p>
<div class="paragraph">
<p>When defining a schema for a collection, set <code>enable_dynamic_field</code> to <code>True</code> to enable the reserved dynamic field, indicating that any non-schema-defined fields and their values inserted later on will be saved as key-value pairs in the reserved dynamic field.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">import</span> <span class="n">random</span><span class="p">,</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">pymilvus</span> <span class="kn">import</span> <span class="n">connections</span><span class="p">,</span> <span class="n">MilvusClient</span><span class="p">,</span> <span class="n">DataType</span>

<span class="n">SERVER_ADDR</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://localhost:19530</span><span class="sh">"</span>

<span class="c1"># 1. Set up a Milvus client
</span><span class="n">client</span> <span class="o">=</span> <span class="nc">MilvusClient</span><span class="p">(</span>
    <span class="n">uri</span><span class="o">=</span><span class="n">SERVER_ADDR</span>
<span class="p">)</span>

<span class="c1"># 2. Create a collection
</span><span class="n">schema</span> <span class="o">=</span> <span class="n">MilvusClient</span><span class="p">.</span><span class="nf">create_schema</span><span class="p">(</span>
    <span class="n">auto_id</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="c1"># highlight-next-line
</span>    <span class="n">enable_dynamic_field</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">schema</span><span class="p">.</span><span class="nf">add_field</span><span class="p">(</span><span class="n">field_name</span><span class="o">=</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="n">datatype</span><span class="o">=</span><span class="n">DataType</span><span class="p">.</span><span class="n">INT64</span><span class="p">,</span> <span class="n">is_primary</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">schema</span><span class="p">.</span><span class="nf">add_field</span><span class="p">(</span><span class="n">field_name</span><span class="o">=</span><span class="sh">"</span><span class="s">vector</span><span class="sh">"</span><span class="p">,</span> <span class="n">datatype</span><span class="o">=</span><span class="n">DataType</span><span class="p">.</span><span class="n">FLOAT_VECTOR</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>

<span class="n">index_params</span> <span class="o">=</span> <span class="n">MilvusClient</span><span class="p">.</span><span class="nf">prepare_index_params</span><span class="p">()</span>

<span class="n">index_params</span><span class="p">.</span><span class="nf">add_index</span><span class="p">(</span>
    <span class="n">field_name</span><span class="o">=</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">index_type</span><span class="o">=</span><span class="sh">"</span><span class="s">STL_SORT</span><span class="sh">"</span>
<span class="p">)</span>

<span class="n">index_params</span><span class="p">.</span><span class="nf">add_index</span><span class="p">(</span>
    <span class="n">field_name</span><span class="o">=</span><span class="sh">"</span><span class="s">vector</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">index_type</span><span class="o">=</span><span class="sh">"</span><span class="s">IVF_FLAT</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">metric_type</span><span class="o">=</span><span class="sh">"</span><span class="s">L2</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">params</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">nlist</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1024</span><span class="p">}</span>
<span class="p">)</span>

<span class="n">client</span><span class="p">.</span><span class="nf">create_collection</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">test_collection</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">schema</span><span class="o">=</span><span class="n">schema</span><span class="p">,</span>
    <span class="n">index_params</span><span class="o">=</span><span class="n">index_params</span>
<span class="p">)</span>

<span class="n">res</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">get_load_state</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">test_collection</span><span class="sh">"</span>
<span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>

<span class="c1"># Output
#
# {
#     "state": "&lt;LoadState: Loaded&gt;"
# }</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># check the details of the collection.
</span><span class="n">res</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">describe_collection</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">test_collection</span><span class="sh">"</span>
<span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>

<span class="c1"># Output
#
# {
#   "collection_name": "test_collection",
#   "auto_id": false,
#   "num_shards": 1,
#   "description": "",
#   "fields": [
#     {
#       "field_id": 100,
#       "name": "id",
#       "description": "",
#       "type": 5,
#       "params": {},
#       "is_primary": true
#     },
#     {
#       "field_id": 101,
#       "name": "vector",
#       "description": "",
#       "type": 101,
#       "params": {
#         "dim": 5
#       }
#     }
#   ],
#   "aliases": [],
#   "collection_id": 450568843971279780,
#   "consistency_level": 2,
#   "properties": {},
#   "num_partitions": 1,
#   "enable_dynamic_field": true
# }</span></code></pre>
</div>
</div>
</li>
<li>
<p>Insert dynamic data</p>
<div class="ulist">
<ul>
<li>
<p>Prepare some randomly generated data for the insertion later on.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">green</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">blue</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">yellow</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">red</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">white</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">purple</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">pink</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">orange</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">brown</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">grey</span><span class="sh">"</span><span class="p">]</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">):</span>
    <span class="n">current_color</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="n">colors</span><span class="p">)</span>
    <span class="n">current_tag</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">9999</span><span class="p">)</span>
    <span class="n">data</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
        <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="n">i</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">vector</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span> <span class="n">random</span><span class="p">.</span><span class="nf">uniform</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="p">],</span>
        <span class="sh">"</span><span class="s">color</span><span class="sh">"</span><span class="p">:</span> <span class="n">current_color</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">tag</span><span class="sh">"</span><span class="p">:</span> <span class="n">current_tag</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">color_tag</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">current_color</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">current_tag</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
    <span class="p">})</span>

<span class="nf">print</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span></code></pre>
</div>
</div>
</li>
<li>
<p>Insert the data into the collection.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="n">res</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">test_collection</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span>
<span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>

<span class="c1"># Output
#
# {
#     "insert_count": 1000,
#     "ids": [
#         0,
#         1,
#         2,
#         3,
#         4,
#         5,
#         6,
#         7,
#         8,
#         9,
#         "(990 more items hidden)"
#     ]
# }
</span>
<span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>Search with dynamic fields</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># 4. Search with dynamic fields
</span><span class="n">query_vectors</span> <span class="o">=</span> <span class="p">[[</span><span class="mf">0.3580376395471989</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.6023495712049978</span><span class="p">,</span> <span class="mf">0.18414012509913835</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.26286205330961354</span><span class="p">,</span> <span class="mf">0.9029438446296592</span><span class="p">]]</span>

<span class="n">res</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">test_collection</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">data</span><span class="o">=</span><span class="n">query_vectors</span><span class="p">,</span>
    <span class="nb">filter</span><span class="o">=</span><span class="sh">"</span><span class="s">color in [</span><span class="se">\"</span><span class="s">red</span><span class="se">\"</span><span class="s">, </span><span class="se">\"</span><span class="s">green</span><span class="se">\"</span><span class="s">]</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">search_params</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">metric_type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">L2</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">nprobe</span><span class="sh">"</span><span class="p">:</span> <span class="mi">10</span><span class="p">}},</span>
    <span class="n">limit</span><span class="o">=</span><span class="mi">3</span>
<span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>

<span class="c1"># Output
#
# [
#     [
#         {
#             "id": 863,
#             "distance": 0.188413605093956,
#             "entity": {
#                 "id": 863,
#                 "color_tag": "red_2371"
#             }
#         },
#         {
#             "id": 799,
#             "distance": 0.29188022017478943,
#             "entity": {
#                 "id": 799,
#                 "color_tag": "red_2235"
#             }
#         },
#         {
#             "id": 564,
#             "distance": 0.3492690920829773,
#             "entity": {
#                 "id": 564,
#                 "color_tag": "red_9186"
#             }
#         }
#     ]
# ]</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="embeddings">3. Embeddings</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Embedding is a machine learning concept for mapping data into a high-dimensional space, where data of similar semantic are placed close together. <a href="#milvus-embeddings">[9]</a></p>
</div>
<div class="ulist">
<ul>
<li>
<p>Typically being a Deep Neural Network from BERT or other Transformer families, the <strong>embedding model</strong> can effectively represent the semantics of text, images, and other data types with a series of numbers known as <strong>vectors</strong>.</p>
</li>
<li>
<p>A key feature of these models is that the <strong>mathematical distance</strong> between vectors in the high-dimensional space can indicate the similarity of the semantics of original text or images, that unlocks many information retrieval applications, such as web search engines like Google and Bing, product search and recommendations on e-commerce sites, and the recently popular Retrieval Augmented Generation (RAG) paradigm in generative AI.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>There are two main categories of embeddings, each producing a different type of vector:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Dense</strong> embedding: Most embedding models represent information as a floating point vector of hundreds to thousands of dimensions. The output is called "dense" vectors as most dimensions have non-zero values.</p>
<div class="paragraph">
<p><a href="https://github.com/milvus-io/bootcamp/blob/master/bootcamp/model/embedding_functions.ipynb">Dense embedding</a> is a technique used in natural language processing to represent words or phrases as continuous, dense vectors in a high-dimensional space, capturing semantic relationships.</p>
</div>
<div class="paragraph">
<p>For instance, the popular open-source embedding model BAAI/bge-base-en-v1.5 outputs vectors of 768 floating point numbers (768-dimension float vector).</p>
</div>
</li>
<li>
<p><strong>Sparse</strong> embedding: In contrast, the output vectors of sparse embeddings has most dimensions being zero, namely "sparse" vectors. These vectors often have much higher dimensions (tens of thousands or more) which is determined by the size of the token vocabulary.</p>
<div class="paragraph">
<p>Sparse vectors can be generated by Deep Neural Networks or statistical analysis of text corpora. Due to their interpretability and observed better out-of-domain generalization capabilities, sparse embeddings are increasingly adopted by developers as a complement to dense embeddings.</p>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>Milvus is a vector database designed for vector data management, storage, and retrieval. By integrating mainstream embedding and <a href="https://milvus.io/docs/rerankers-overview.md">reranking</a> models, it can easily transform original text into searchable vectors or rerank the results using powerful models to achieve more accurate results for RAG, and simplifies text transformation and eliminates the need for additional embedding or reranking components, thereby streamlining RAG development and validation.</p>
</div>
<div class="paragraph">
<p>To use embedding functions with Milvus, first install the PyMilvus client library with the <code>model</code> subpackage that wraps all the utilities for embedding generation.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">pip <span class="nb">install </span>pymilvus[model]
<span class="c"># or pip install "pymilvus[model]" for zsh.</span>
<span class="c"># or pipenv install 'pymilvus[model]==2.4.4' 'numpy&lt;2'</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The model subpackage supports various embedding models, from OpenAI, Sentence Transformers, BGE M3, BM25, to SPLADE pretrained models.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Use <a href="https://github.com/milvus-io/milvus-model/blob/main/milvus_model/<em>init</em>.py">default embedding function</a> to generate dense vectors</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">pymilvus</span> <span class="kn">import</span> <span class="n">model</span>

<span class="c1"># If connection to https://huggingface.co/ failed, uncomment the following path
# import os
# os.environ['HF_ENDPOINT'] = 'https://hf-mirror.com'
</span>
<span class="c1"># This will download a small embedding model "paraphrase-albert-small-v2" (~50MB).
</span><span class="n">embedding_fn</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nc">DefaultEmbeddingFunction</span><span class="p">()</span>

<span class="c1"># Text strings to search from.
</span><span class="n">docs</span> <span class="o">=</span> <span class="p">[</span>
    <span class="sh">"</span><span class="s">Artificial intelligence was founded as an academic discipline in 1956.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">Alan Turing was the first person to conduct substantial research in AI.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">Born in Maida Vale, London, Turing was raised in southern England.</span><span class="sh">"</span><span class="p">,</span>
<span class="p">]</span>

<span class="n">vectors</span> <span class="o">=</span> <span class="n">embedding_fn</span><span class="p">.</span><span class="nf">encode_documents</span><span class="p">(</span><span class="n">docs</span><span class="p">)</span>
<span class="c1"># The output vector has 768 dimensions, matching the collection that we just created.
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Dim:</span><span class="sh">"</span><span class="p">,</span> <span class="n">embedding_fn</span><span class="p">.</span><span class="n">dim</span><span class="p">,</span> <span class="n">vectors</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">shape</span><span class="p">)</span>  <span class="c1"># Dim: 768 (768,)
</span>
<span class="c1"># Each entity has id, vector representation, raw text, and a subject label that we use
# to demo metadata filtering later.
</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="n">i</span><span class="p">,</span> <span class="sh">"</span><span class="s">vector</span><span class="sh">"</span><span class="p">:</span> <span class="n">vectors</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">docs</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="sh">"</span><span class="s">subject</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">history</span><span class="sh">"</span><span class="p">}</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">vectors</span><span class="p">))</span>
<span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Data has</span><span class="sh">"</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="sh">"</span><span class="s">entities, each with fields: </span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">keys</span><span class="p">())</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Vector dim:</span><span class="sh">"</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">vector</span><span class="sh">"</span><span class="p">]))</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Dim: 768 (768,)
Data has 3 entities, each with fields:  dict_keys(['id', 'vector', 'text', 'subject'])
Vector dim: 768</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># To create embeddings for queries, use the encode_queries() method:
</span><span class="n">query_vectors</span> <span class="o">=</span> <span class="n">embedding_fn</span><span class="p">.</span><span class="nf">encode_queries</span><span class="p">([</span><span class="sh">"</span><span class="s">Who is Alan Turing?</span><span class="sh">"</span><span class="p">])</span></code></pre>
</div>
</div>
</li>
<li>
<p>Use <a href="https://github.com/milvus-io/milvus-model/blob/main/milvus_model/dense/sentence_transformer.py">sentence transformer embedding function</a> to generate dense vectors with <a href="https://huggingface.co/sentence-transformers">Sentence Transformer</a> pre-trained models</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">pip <span class="nb">install </span>sentence_transformers  <span class="c"># (optional) install sentence_transformers manually</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">pymilvus</span> <span class="kn">import</span> <span class="n">model</span>

<span class="c1"># If connection to https://huggingface.co/ failed, uncomment the following path
# import os
# os.environ['HF_ENDPOINT'] = 'https://hf-mirror.com'
</span>
<span class="n">sentence_transformer_ef</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">dense</span><span class="p">.</span><span class="nc">SentenceTransformerEmbeddingFunction</span><span class="p">(</span>
    <span class="n">model_name</span><span class="o">=</span><span class="sh">'</span><span class="s">all-MiniLM-L6-v2</span><span class="sh">'</span><span class="p">,</span> <span class="c1"># Specify the model name
</span>    <span class="n">device</span><span class="o">=</span><span class="sh">'</span><span class="s">cpu</span><span class="sh">'</span> <span class="c1"># Specify the device to use, e.g., 'cpu', 'cuda:0'. If None, checks if a GPU can be used.
</span><span class="p">)</span>

<span class="n">docs</span> <span class="o">=</span> <span class="p">[</span>
    <span class="sh">"</span><span class="s">Artificial intelligence was founded as an academic discipline in 1956.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">Alan Turing was the first person to conduct substantial research in AI.</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">Born in Maida Vale, London, Turing was raised in southern England.</span><span class="sh">"</span><span class="p">,</span>
<span class="p">]</span>

<span class="n">docs_embeddings</span> <span class="o">=</span> <span class="n">sentence_transformer_ef</span><span class="p">.</span><span class="nf">encode_documents</span><span class="p">(</span><span class="n">docs</span><span class="p">)</span>

<span class="c1"># Print embeddings
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Embeddings:</span><span class="sh">"</span><span class="p">,</span> <span class="n">docs_embeddings</span><span class="p">)</span>
<span class="c1"># Print dimension and shape of embeddings
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Dim:</span><span class="sh">"</span><span class="p">,</span> <span class="n">sentence_transformer_ef</span><span class="p">.</span><span class="n">dim</span><span class="p">,</span> <span class="n">docs_embeddings</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">shape</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Embeddings: [array([-3.09392996e-02, -1.80662833e-02,  1.34775648e-02,  2.77156215e-02,
       -4.86349640e-03, -3.12581174e-02, -3.55921760e-02,  5.76934684e-03,
        2.80773244e-03,  1.35783911e-01,  3.59678417e-02,  6.17732145e-02,
</span><span class="c">...
</span><span class="go">       -4.61330153e-02, -4.85207550e-02,  3.13997865e-02,  7.82178566e-02,
       -4.75336798e-02,  5.21207601e-02,  9.04406682e-02, -5.36676683e-02],
      dtype=float32)]
Dim: 384 (384,)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="c1"># To create embeddings for queries, use the encode_queries() method:
</span>
<span class="n">queries</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">When was artificial intelligence founded</span><span class="sh">"</span><span class="p">,</span>
           <span class="sh">"</span><span class="s">Where was Alan Turing born?</span><span class="sh">"</span><span class="p">]</span>

<span class="n">query_embeddings</span> <span class="o">=</span> <span class="n">sentence_transformer_ef</span><span class="p">.</span><span class="nf">encode_queries</span><span class="p">(</span><span class="n">queries</span><span class="p">)</span>

<span class="c1"># Print embeddings
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Embeddings:</span><span class="sh">"</span><span class="p">,</span> <span class="n">query_embeddings</span><span class="p">)</span>
<span class="c1"># Print dimension and shape of embeddings
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Dim:</span><span class="sh">"</span><span class="p">,</span> <span class="n">sentence_transformer_ef</span><span class="p">.</span><span class="n">dim</span><span class="p">,</span> <span class="n">query_embeddings</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">shape</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">Embeddings: [array([-2.52114702e-02, -5.29330298e-02,  1.14570223e-02,  1.95571519e-02,
       -2.46500354e-02, -2.66519729e-02, -8.48201662e-03,  2.82961670e-02,
       -3.65092754e-02,  7.50745758e-02,  4.28900979e-02,  7.18822703e-02,
</span><span class="c">...
</span><span class="go">       -6.76431581e-02, -6.45996556e-02, -4.67132553e-02,  4.78532910e-02,
       -2.31596199e-03,  4.13446948e-02,  1.06935494e-01, -1.08258888e-01],
      dtype=float32)]
Dim: 384 (384,)</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="references">References</h2>
<div class="sectionbody">
<div class="ulist bibliography">
<ul class="bibliography">
<li>
<p><a id="milvus-overview"></a>[1] <a href="https://milvus.io/docs/overview.md" class="bare">https://milvus.io/docs/overview.md</a></p>
</li>
<li>
<p><a id="milvus-architecture_overview"></a>[2] <a href="https://milvus.io/docs/architecture_overview.md" class="bare">https://milvus.io/docs/architecture_overview.md</a></p>
</li>
<li>
<p><a id="milvus-install_standalone-docker-compose"></a>[3] <a href="https://milvus.io/docs/install_standalone-docker-compose.md" class="bare">https://milvus.io/docs/install_standalone-docker-compose.md</a></p>
</li>
<li>
<p><a id="milvus_lite"></a>[4] <a href="https://milvus.io/docs/milvus_lite.md" class="bare">https://milvus.io/docs/milvus_lite.md</a></p>
</li>
<li>
<p><a id="milvus-quickstart"></a>[5] <a href="https://milvus.io/docs/quickstart.md" class="bare">https://milvus.io/docs/quickstart.md</a></p>
</li>
<li>
<p><a id="milvus-cli_overview"></a>[6] <a href="https://milvus.io/docs/cli_overview.md" class="bare">https://milvus.io/docs/cli_overview.md</a></p>
</li>
<li>
<p><a id="milvus-schema"></a>[7] <a href="https://milvus.io/docs/schema.md" class="bare">https://milvus.io/docs/schema.md</a></p>
</li>
<li>
<p><a id="milvus-manage-collections"></a>[8] <a href="https://milvus.io/docs/manage-collections.md" class="bare">https://milvus.io/docs/manage-collections.md</a></p>
</li>
<li>
<p><a id="milvus-embeddings"></a>[9] <a href="https://milvus.io/docs/embeddings.md" class="bare">https://milvus.io/docs/embeddings.md</a></p>
</li>
</ul>
</div>
</div>
</div>]]></content><author><name></name></author><category term="database" /><category term="database" /><category term="vector" /></entry><entry><title type="html">Ollama, vLLM, Hugging Face, LangChain, LlamaIndex, and Open WebUI</title><link href="https://blog.codefarm.me/2024/06/12/ollama-vllm-and-hugging-face/" rel="alternate" type="text/html" title="Ollama, vLLM, Hugging Face, LangChain, LlamaIndex, and Open WebUI" /><published>2024-06-12T14:07:43+08:00</published><updated>2024-06-12T14:07:43+08:00</updated><id>https://blog.codefarm.me/2024/06/12/ollama-vllm-and-hugging-face</id><content type="html" xml:base="https://blog.codefarm.me/2024/06/12/ollama-vllm-and-hugging-face/"><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Ollama, vLLM, and llama.cpp are all tools related to running large language models (LLMs) locally on the own computer.</p>
</div>
</div>
<div id="toc" class="toc">
<div id="toctitle"></div>
<ul class="sectlevel1">
<li><a href="#ollama">1. Ollama</a></li>
<li><a href="#vllm">2. vLLM</a></li>
<li><a href="#hugging-face">3. Hugging Face</a></li>
<li><a href="#langchain">4. LangChain</a></li>
<li><a href="#llamaindex">5. LlamaIndex</a></li>
<li><a href="#open-webui">6. Open WebUI</a></li>
</ul>
</div>
</div>
<div class="sect1">
<h2 id="ollama">1. Ollama</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/ollama/ollama">Ollama</a> (/ˈɒlˌlæmə/) is a user-friendly, <strong>higher-level interface</strong> for running various LLMs, including Llama, Qwen, Jurassic-1 Jumbo, and others.</p>
</li>
<li>
<p>It provides a <strong>streamlined workflow</strong> for downloading models, configuring settings, and interacting with LLMs through a command-line interface (CLI) or Python API.</p>
</li>
<li>
<p>Ollama acts as a central hub for managing and running <strong>multiple LLM models</strong> from different providers, and integrates with underlying tools like llama.cpp for efficient execution.</p>
</li>
<li>
<p>To pull a model checkpoint and run the model, use the <code>ollama run</code> command.</p>
<div class="ulist">
<ul>
<li>
<p>Install Ollama on Linux:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">curl <span class="nt">-fsSL</span> https://ollama.com/install.sh | sh</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code>&gt;&gt;&gt; Downloading ollama...
######################################################################## 100.0%-#O#- #   #
######################################################################## 100.0%
&gt;&gt;&gt; Installing ollama to /usr/local/bin...
&gt;&gt;&gt; Creating ollama user...
&gt;&gt;&gt; Adding ollama user to render group...
&gt;&gt;&gt; Adding ollama user to video group...
&gt;&gt;&gt; Adding current user to ollama group...
&gt;&gt;&gt; Creating ollama systemd service...
&gt;&gt;&gt; Enabling and starting ollama service...
Created symlink /etc/systemd/system/default.target.wants/ollama.service → /etc/systemd/system/ollama.service.
&gt;&gt;&gt; The Ollama API is now available at 127.0.0.1:11434.
&gt;&gt;&gt; Install complete. Run "ollama" from the command line.
WARNING: No NVIDIA/AMD GPU detected. Ollama will run in CPU-only mode.</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
For more install instructions , see <a href="https://github.com/ollama/ollama" class="bare">https://github.com/ollama/ollama</a>.
</td>
</tr>
</table>
</div>
</li>
<li>
<p>Keep Ollama service running whenever using ollama:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">$</span><span class="w"> </span>systemctl status ollama.service
<span class="go">○ ollama.service - Ollama Service
</span><span class="gp">     Loaded: loaded (/etc/systemd/system/ollama.service;</span><span class="w"> </span>disabled<span class="p">;</span> preset: enabled<span class="o">)</span>
<span class="go">     Active: inactive (dead)</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">$</span><span class="w"> </span>ollama run phi3:mini
<span class="go">Error: could not connect to ollama app, is it running?</span></code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>To run <a href="https://devblogs.microsoft.com/commandline/systemd-support-is-now-available-in-wsl/">systemd inside of Windows Subsystem for Linux (WSL)</a> distros:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Add these lines to the <a href="https://docs.microsoft.com/windows/wsl/wsl-config#wslconf">/etc/wsl.conf</a> to ensure systemd starts up on boot.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="conf">[<span class="n">boot</span>]
<span class="n">systemd</span>=<span class="n">true</span></code></pre>
</div>
</div>
</li>
<li>
<p>Run <code>wsl.exe --shutdown</code> from PowerShell to restart the WSL instances.</p>
</li>
<li>
<p>Start and check the Ollama service status.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>systemctl start ollama.service
<span class="gp">$</span><span class="w"> </span>systemctl status ollama.service
<span class="go">● ollama.service - Ollama Service
</span><span class="gp">     Loaded: loaded (/etc/systemd/system/ollama.service;</span><span class="w"> </span>disabled<span class="p">;</span> preset: enabled<span class="o">)</span>
<span class="gp">     Active: active (running) since Wed 2024-06-12 15:21:39 CST;</span><span class="w"> </span>5min ago
<span class="go">   Main PID: 914 (ollama)
      Tasks: 15 (limit: 9340)
     Memory: 576.9M
     CGroup: /system.slice/ollama.service
             └─914 /usr/local/bin/ollama serve
</span><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>ss <span class="nt">-ntlp</span>
<span class="go">State     Recv-Q    Send-Q    Local Address:Port     Peer Address:Port    Process
LISTEN    0         4096          127.0.0.1:11434         0.0.0.0:*        users:(("ollama",pid=914,fd=3))</span></code></pre>
</div>
</div>
</li>
</ol>
</div>
</td>
</tr>
</table>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>Ollama has its own <a href="https://ollama.com/library">library</a> to pull models, and store them at home directory of the user (i.e., <code>ollama</code>) that running the ollama service:</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>macOS: <code>~/.ollama/models</code></p>
</li>
<li>
<p>Linux: <code>/usr/share/ollama/.ollama/models</code></p>
</li>
<li>
<p>Windows: <code>C:\Users\%username%\.ollama\models</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p>If a different directory needs to be used, set the environment variable <code>OLLAMA_MODELS</code> to the chosen directory.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
To get the home directory of the user <code>ollama</code>, run <code>getent passwd ollama | cut -d: -f6</code>.
</td>
</tr>
</table>
</div>
</li>
<li>
<p>To allow the Ollama service to listen on all network interfaces (default <code>127.0.0.1:11434</code>), follow these steps:</p>
<div class="ulist">
<ul>
<li>
<p>Edit the Ollama service configuration:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="nb">sudo </span>systemctl edit ollama.service</code></pre>
</div>
</div>
</li>
<li>
<p>Add the following content to the editor:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="ini"><span class="nn">[Service]</span>
<span class="py">Environment</span><span class="p">=</span><span class="s">"OLLAMA_HOST=0.0.0.0:11434"</span></code></pre>
</div>
</div>
</li>
<li>
<p>Reload and restart the Ollama service:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="nb">sudo </span>systemctl daemon-reload <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>systemctl restart ollama.service</code></pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>The ollama service can also be accessed via its OpenAI-compatible API when the model checkpoint is prepared.</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">$</span><span class="w"> </span>ollama serve <span class="nt">--help</span>
<span class="go">Start ollama

Usage:
  ollama serve [flags]

Aliases:
  serve, start

Flags:
  -h, --help   help for serve

Environment Variables:
      OLLAMA_DEBUG               Show additional debug information (e.g. OLLAMA_DEBUG=1)
      OLLAMA_HOST                IP Address for the ollama server (default 127.0.0.1:11434)
      OLLAMA_KEEP_ALIVE          The duration that models stay loaded in memory (default "5m")
      OLLAMA_MAX_LOADED_MODELS   Maximum number of loaded models (default 1)
      OLLAMA_MAX_QUEUE           Maximum number of queued requests
      OLLAMA_MODELS              The path to the models directory
      OLLAMA_NUM_PARALLEL        Maximum number of parallel requests (default 1)
      OLLAMA_NOPRUNE             Do not prune model blobs on startup
      OLLAMA_ORIGINS             A comma separated list of allowed origins
      OLLAMA_TMPDIR              Location for temporary files
      OLLAMA_FLASH_ATTENTION     Enabled flash attention
      OLLAMA_LLM_LIBRARY         Set LLM library to bypass autodetection
      OLLAMA_MAX_VRAM            Maximum VRAM</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="go">//  ensure that the model checkpoint is prepared.
</span><span class="gp">$</span><span class="w"> </span>ollama list
<span class="go">NAME                    ID              SIZE    MODIFIED
phi3:mini               64c1188f2485    2.4 GB  17 minutes ago</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>curl</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">curl http://localhost:11434/v1/chat/completions <span class="se">\</span>
    <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
    <span class="nt">-d</span> <span class="s1">'{"messages":[{"role":"user","content":"Say this is a test"}],"model":"phi3:mini"}'</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Python</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">pip <span class="nb">install </span>openai</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="py"><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>
<span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span>
    <span class="n">base_url</span><span class="o">=</span><span class="sh">'</span><span class="s">http://localhost:11434/v1/</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">api_key</span><span class="o">=</span><span class="sh">'</span><span class="s">ollama</span><span class="sh">'</span><span class="p">,</span>  <span class="c1"># required but ignored
</span><span class="p">)</span>
<span class="n">chat_completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="n">messages</span><span class="o">=</span><span class="p">[</span>
        <span class="p">{</span>
            <span class="sh">'</span><span class="s">role</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">content</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Say this is a test</span><span class="sh">'</span><span class="p">,</span>
        <span class="p">}</span>
    <span class="p">],</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">'</span><span class="s">phi3:mini</span><span class="sh">'</span><span class="p">,</span>
<span class="p">)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>C#/.NET</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="c"># The official .NET library for the OpenAI API</span>
dotnet add package OpenAI <span class="nt">--prerelease</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="cs"><span class="k">using</span> <span class="nn">OpenAI.Chat</span><span class="p">;</span>

<span class="n">ChatClient</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span><span class="p">(</span>
    <span class="n">model</span><span class="p">:</span> <span class="s">"phi3:mini"</span><span class="p">,</span>
    <span class="n">credential</span><span class="p">:</span> <span class="s">"EMPTY_OPENAI_API_KEY"</span><span class="p">,</span>
    <span class="n">options</span><span class="p">:</span> <span class="k">new</span> <span class="n">OpenAI</span><span class="p">.</span><span class="n">OpenAIClientOptions</span> <span class="p">{</span> <span class="n">Endpoint</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="s">"http://localhost:11434/v1/"</span><span class="p">)</span> <span class="p">});</span>

<span class="n">ChatCompletion</span> <span class="n">completion</span> <span class="p">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">CompleteChat</span><span class="p">(</span><span class="s">"Say 'this is a test.'"</span><span class="p">);</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"[ASSISTANT]: </span><span class="p">{</span><span class="n">completion</span><span class="p">}</span><span class="s">"</span><span class="p">);</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="vllm">2. vLLM</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/vllm-project/vllm">vLLM</a> (Very Low Latency Model) primarily <strong>focuses on deploying LLMs as low-latency inference servers</strong>.</p>
</li>
<li>
<p>It prioritizes speed and efficiency, making it suitable for <strong>serving LLMs to multiple users</strong> in real-time applications.</p>
</li>
<li>
<p>vLLM offers APIs that allow developers to integrate LLM functionality into their applications. While it can be used locally, server deployment is its main strength.</p>
</li>
<li>
<p>vLLM is a Python library that also contains pre-compiled C++ and CUDA (12.1) binaries, and with the <a href="https://docs.vllm.ai/en/v0.5.0/getting_started/installation.html">requirements</a>:</p>
<div class="ulist">
<ul>
<li>
<p>OS: Linux</p>
</li>
<li>
<p>Python: 3.8 – 3.11</p>
</li>
<li>
<p>GPU: compute capability 7.0 or higher (e.g., V100, T4, RTX20xx, A100, L4, H100, etc.)</p>
</li>
</ul>
</div>
</li>
<li>
<p>To deploy a model as an OpenAI-compatible service:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">pip <span class="nb">install </span>vllm</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">$</span><span class="w"> </span>pip list | egrep <span class="s1">'vllm|transformers'</span>
<span class="go">transformers                      4.41.2
vllm                              0.5.0
vllm-flash-attn                   2.5.9</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">$</span><span class="w"> </span>python <span class="nt">-m</span> vllm.entrypoints.openai.api_server <span class="nt">--help</span>
<span class="go">vLLM OpenAI-Compatible RESTful API server.

options:
  --host HOST           host name
  --port PORT           port number
  --api-key API_KEY     If provided, the server will require this key to be presented in the header.
  --model MODEL         Name or path of the huggingface model to use.
  --max-model-len MAX_MODEL_LEN
                        Model context length. If unspecified, will be automatically derived from the model config.
  --gpu-memory-utilization GPU_MEMORY_UTILIZATION
                        The fraction of GPU memory to be used for the model executor, which can range from 0 to 1. For example, a value of 0.5 would imply 50% GPU memory utilization. If unspecified, will use
                        the default value of 0.9.
  --served-model-name SERVED_MODEL_NAME [SERVED_MODEL_NAME ...]
                        The model name(s) used in the API. If multiple names are provided, the server will respond to any of the provided names. The model name in the model field of a response will be the
                        first name in this list. If not specified, the model name will be the same as the `--model` argument. Noted that this name(s)will also be used in `model_name` tag content of
                        prometheus metrics, if multiple names provided, metricstag will take the first one.</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="c"># Start an OpenAI-compatible API service</span>
python <span class="nt">-m</span> vllm.entrypoints.openai.api_server <span class="nt">--model</span> Qwen/Qwen2-0.5B-Instruct</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>If saw connection to <a href="https://huggingface.co/" class="bare">https://huggingface.co/</a> failed, try:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="nv">HF_ENDPOINT</span><span class="o">=</span>https://hf-mirror.com python <span class="nt">-m</span> vllm.entrypoints.openai.api_server <span class="nt">--model</span> Qwen/Qwen2-0.5B-Instruct</code></pre>
</div>
</div>
<div class="paragraph">
<p>Run in a firewalled or <a href="https://huggingface.co/docs/transformers/v4.41.2/en/installation#offline-mode">offline</a> environment with locally cached files by setting the environment variable <code>TRANSFORMERS_OFFLINE=1</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="nv">HF_DATASETS_OFFLINE</span><span class="o">=</span>1 <span class="nv">TRANSFORMERS_OFFLINE</span><span class="o">=</span>1 <span class="se">\</span>
    <span class="nv">HF_ENDPOINT</span><span class="o">=</span>https://hf-mirror.com <span class="se">\</span>
    python <span class="nt">-m</span> vllm.entrypoints.openai.api_server <span class="se">\</span>
    <span class="nt">--model</span> Qwen/Qwen2-0.5B-Instruct <span class="se">\</span>
    <span class="nt">--max-model-len</span> 4096</code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock warning">
<table>
<tr>
<td class="icon">
<i class="fa icon-warning" title="Warning"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The vLLM requires a NVIDIA GPU on the host system, and the <code>--device cpu</code> doesn&#8217;t work.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console"><span class="gp">$</span><span class="w"> </span>python <span class="nt">-m</span> vllm.entrypoints.openai.api_server <span class="nt">--model</span> Qwen/Qwen2-0.5B-Instruct <span class="nt">--device</span> cpu
<span class="go">RuntimeError: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx</span></code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p><strong>llama.cpp:</strong></p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/ggerganov/llama.cpp">llama.cpp</a> is a C++ library as a <strong>core inference engine</strong> that provides the core functionality for running LLMs on CPUs and GPUs.</p>
</li>
<li>
<p>It&#8217;s designed to efficiently execute LLM models for tasks like text generation and translation.</p>
</li>
<li>
<p>Ollama and other tools like Hugging Face Transformers can use llama.cpp as the underlying engine for running LLM models locally.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Think of Ollama as a user-friendly car with a dashboard and controls that simplifies running different LLM models (like choosing a destination). vLLM is more like a high-performance racing engine focused on speed and efficiency, which is optimized for serving LLMs to many users (like a racing car on a track). llama.cpp is the core engine that does the actual work of moving the car (like the internal combustion engine), and other tools can utilize it for different purposes.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Use Ollama for a simple and user-friendly experience running different LLM models locally.</p>
</li>
<li>
<p>Consider vLLM if the focus is on deploying a low-latency LLM server for real-time applications.</p>
</li>
<li>
<p>llama.cpp is a low-level library that serves as the core engine for other tools to run LLMs efficiently.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="hugging-face">3. Hugging Face</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="https://huggingface.co/">Hugging Face</a> is a popular <strong>open-source community</strong> and platform focused on advancing natural language processing (NLP) research and development, which is well-known for the <strong>Transformers library</strong>, a widely used open-source framework written in Python that provides tools and functionalities for training, fine-tuning, and deploying various NLP models, including LLMs.</p>
</li>
<li>
<p>Hugging Face maintains a <strong>Model Hub</strong>, a vast repository of pre-trained NLP models, including LLMs like Qwen, Jurassic-1 Jumbo, and many others which can be downloaded and used with the Transformers library or other compatible tools.</p>
</li>
<li>
<p><a href="https://huggingface.co/modelscope">Model Scope</a> is a platform that <strong>focus on model access</strong> and aims to democratize access to a wide range of machine learning models, including LLMs. It goes beyond NLP models and encompasses various domains like computer vision, audio processing, and more. It acts as a <strong>model hosting service</strong>, allowing developers to access and utilize pre-trained models through APIs or a cloud-based environment.</p>
</li>
<li>
<p>While Model Scope has its own model repository, it also <strong>collaborates with Hugging Face</strong>. Some models from the Hugging Face Model Hub are also available on Model Scope, providing users with additional access options.</p>
</li>
<li>
<p>Here&#8217;s a table summarizing the key differences:</p>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 14.2857%;">
<col style="width: 42.8571%;">
<col style="width: 42.8572%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Feature</th>
<th class="tableblock halign-left valign-top">Hugging Face</th>
<th class="tableblock halign-left valign-top">Model Scope</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Focus</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Open-source community, NLP research &amp; development</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Model access across various domains (including NLP)</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Core Strength</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transformers library, Model Hub</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Model hosting service, API access</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Model Scope</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primarily NLP, but expanding</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Wide range of machine learning models</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Community Focus</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Strong community focus, education, collaboration</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Less emphasis on community, more on commercial aspect</p></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>Command line interface (CLI)</p>
<div class="paragraph">
<p>The <code>huggingface_hub</code> Python package comes with a built-in CLI called <a href="https://huggingface.co/docs/huggingface_hub/v0.21.4/en/guides/cli"><code>huggingface-cli</code></a> that can be used to interact with the Hugging Face Hub directly from a terminal.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh">pip <span class="nb">install</span> <span class="nt">-U</span> <span class="s2">"huggingface_hub[cli]"</span></code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
In the snippet above, the <code>[cli]</code> extra dependencies is also installed to make the user experience better, especially when using the <code>delete-cache</code> command.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>To download a single file from a repo, simply provide the repo_id and filename as follow:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sh"><span class="c"># If saw connection to https://huggingface.co/ failed, uncomment the following line:</span>
<span class="c"># ENV HF_ENDPOINT=https://hf-mirror.com</span>

huggingface-cli download sentence-transformers/all-MiniLM-L6-v2</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="langchain">4. LangChain</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://python.langchain.com/v0.2/docs/introduction/">LangChain</a> is a framework for developing applications powered by large language models (LLMs).</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="llamaindex">5. LlamaIndex</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://docs.llamaindex.ai/">LlamaIndex</a> is the leading framework for building LLM-powered agents over data with LLMs and workflows.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="open-webui">6. Open WebUI</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://docs.openwebui.com/">Open WebUI</a> is an extensible, feature-rich, and user-friendly self-hosted WebUI designed to operate entirely offline. It supports various LLM runners, including Ollama and OpenAI-compatible APIs.</p>
</div>
</div>
</div>]]></content><author><name></name></author><category term="ai" /><category term="ai" /><category term="llm" /></entry></feed>